#ifndef __INFLUENT_MUNICIPALITY_1_MSL__
#define __INFLUENT_MUNICIPALITY_1_MSL__

#include "west.msl"

CLASS Influent_Municipality_1 (* icon = "influent"; file = ""; *)  SPECIALISES PhysicalDAEModelType := 
{:
  comments <- "";

  interface <-
  {
    OBJ H2O (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_ALK (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_I (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_ND (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_NH (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_NO (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_O (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ S_S (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_BA (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_BH (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_I (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_ND (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_P (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};
    OBJ X_S (*terminal = ""; *) "" : Real := {: causality <- "CIN"; :};

    OBJ Influent_Load (*terminal = "out_1"; *) "Influent load" : OutWWTPTerminal := {: nature <- "THROUGH"; causality <- "COUT"; group <- "Influent"; :};
  };

  parameters <-
  {

    OBJ WWTPSpecificVolume (* hidden = "1"; *) "The specific volumes (= 1/density) of the components" : SpecificVolumeVector;
  };

  independent <- 
  {
    OBJ t (* fixed = "1"; *) "Time" : Time;
  };

  state <-
  {

    OBJ Inflow (* *) "Temporary variable" : WWTPConcTerminal;
  };

  initial <-
  {
    parameters.WWTPSpecificVolume[IndexOfSolvent] := 0.000001;

  };

  equations <-
  {
    // (De-)Fractionation

    state.Inflow[H2O] = interface.H2O * (1);
    state.Inflow[S_ALK] = interface.S_ALK * (1);
    state.Inflow[S_I] = interface.S_I * (1);
    state.Inflow[S_ND] = interface.S_ND * (1);
    state.Inflow[S_NH] = interface.S_NH * (1);
    state.Inflow[S_NO] = interface.S_NO * (1);
    state.Inflow[S_O] = interface.S_O * (1);
    state.Inflow[S_S] = interface.S_S * (1);
    state.Inflow[X_BA] = interface.X_BA * (1);
    state.Inflow[X_BH] = interface.X_BH * (1);
    state.Inflow[X_I] = interface.X_I * (1);
    state.Inflow[X_ND] = interface.X_ND * (1);
    state.Inflow[X_P] = interface.X_P * (1);
    state.Inflow[X_S] = interface.X_S * (1);

    // C2F conversion

    interface.Influent_Load[IndexOfSolvent] = - state.Inflow[IndexOfSolvent] / parameters.WWTPSpecificVolume[IndexOfSolvent];

    { FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. NrOfComponents}:
        interface.Influent_Load[Comp_Index] = - state.Inflow[Comp_Index] * state.Inflow[IndexOfSolvent]; };

  };
:};

#endif

