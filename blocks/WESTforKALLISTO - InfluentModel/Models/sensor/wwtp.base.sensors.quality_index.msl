/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 * Author Youri Amerlinck
 *
 ******************************************************************************/
 
#ifndef WWTP_BASE_SENSORS_QUALITYINDEX
#define WWTP_BASE_SENSORS_QUALITYINDEX

  #if (defined ASM1Temp || defined ASM2dModTemp || ASM2dChemTemp)

 CLASS EffluentQualityIndex 
 
   (* icon = "sensor_multi" *)
   "sensor"
   EXTENDS Sensor WITH 
   {:
     comments <- "A model for a sensor measuring BOD, COD, TN, TP, NH4 and NO3, PUBOD, PUCOD, PUTP, PUNH4 and PUNO3";
 
 	interface <-
     {
 	 OBJ y_M (* terminal = "out_2" *)"measurement" :Real:= {: causality <- "COUT" ; group <- "Measurement data" :};
     };
     	
 #if (defined ASM1 || defined ASM1Temp || defined ASM1PTemp)
 
 parameters <-
   {
    OBJ F_TSS_COD "Conversion factor TSS/COD" : Real := {: value <- 0.75 ; group <- "Conversion factors" :};
    OBJ F_BOD5_BOD20 "Conversion factor BOD5/BOD20": Fraction := {: value <- 0.25 ; group <- "Conversion factors" :};
    OBJ i_X_B "Mass Of Nitrogen Per Mass Of COD In Biomass" : MassOfNitrogenPerMassOfCODInBiomass := {:value <- 0.086 ; group <- "Composition parameters" :};
    OBJ i_X_P "Mass Of Nitrogen Per Mass Of COD In Products Formed" : MassOfNitrogenPerMassOfCODInProdFromBiomass := {:value <- 0.06 ; group <- "Composition parameters" :};
   #ifdef ASM1PTemp
    OBJ i_P_S_I "Phosphorus content of inert soluble COD S_I" : PhosphorusConversionFactor := {:value <- 0.00 ; group <- "Composition parameters" :};
    OBJ i_P_S_S "Phosphorus content of soluble substrate S_S" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_X_I "Phosphorus content of inert particulate COD X_I" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_X_S "Phosphorus content of particulate substrate X_S" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_BM "Phosphorus content of biomass X_BH, X_BA" : PhosphorusConversionFactor := {:value <- 0.02 ; group <- "Composition parameters" :};
   #endif
 };
 
 state <-
   {
    OBJ S_COD "Soluble COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ X_COD "Particulate COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ BOD20 "BOD20" : BiolOxDemand := {: group <- "Influent characterization" :};
    OBJ COD "COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ BOD5 "BOD5" : BiolOxDemand := {: group <- "Influent characterization" :};
    OBJ TSS "TSS" : Concentration := {: group <- "Influent characterization" :};
    OBJ TN "Total Nitrogen" : Concentration := {: group <- "Influent characterization" :};
    OBJ TKN "Total Nitrogen" : Concentration := {: group <- "Influent characterization" :};
    OBJ NH_4 "Ammonia" : Concentration := {: group <- "Influent characterization" :};
    OBJ NO_3 "Nitrates" : Concentration := {: group <- "Influent characterization" :};
    
   #ifdef ASM1PTemp
    OBJ TP "Total Phosphorus" : Concentration := {: group <- "Influent characterization" :};
    
   #endif
   
   };
   
     equations <-
   {
    interface.y_M = state.Q_In;
     
    state.S_COD = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE
    			   (interface.Inflow[S_I] + interface.Inflow[S_S]) / state.Q_In; 
    state.X_COD = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE   
    			   (interface.Inflow[X_I] + interface.Inflow[X_S] 
 		     + interface.Inflow[X_BH] + interface.Inflow[X_BA] + interface.Inflow[X_P]) / state.Q_In;
    state.BOD20 = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE
 			   (interface.Inflow[S_S] + interface.Inflow[X_S] 
 		     + interface.Inflow[X_BH] + interface.Inflow[X_BA]) / state.Q_In;
 
    state.COD  = state.S_COD + state.X_COD;
    state.BOD5 = parameters.F_BOD5_BOD20 * state.BOD20;
    state.TSS  = parameters.F_TSS_COD * state.X_COD;
 
    state.TKN = IF (state.Q_In == 0)
    			THEN 0
 			   	ELSE
 			   (interface.Inflow[S_NH] + interface.Inflow[S_ND] + interface.Inflow[X_ND]
 	 		+ (parameters.i_X_B * (interface.Inflow[X_BH] + interface.Inflow[X_BA])) 
        		+ (parameters.i_X_P * (interface.Inflow[X_P] + interface.Inflow[X_I]))) / state.Q_In;
    
    state.TN = state.TKN + state.NO_3;
    
    state.NH_4  = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE interface.Inflow[S_NH] / state.Q_In;
    
    state.NO_3  = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE interface.Inflow[S_NO] / state.Q_In;
    
   #ifdef ASM1PTemp
    state.TP = IF (state.Q_In == 0)
    			   THEN 0
 			   ELSE
 			   (interface.Inflow[S_PO] 
    		 + interface.Inflow[X_MEP]
  		 + parameters.i_P_S_I * interface.Inflow[S_I] 
 		 + parameters.i_P_S_S * interface.Inflow[S_S] 
 		 + parameters.i_P_X_I * interface.Inflow[X_I] 
 		 + parameters.i_P_X_S * interface.Inflow[X_S] 
 		 + parameters.i_P_BM * (interface.Inflow[X_BH] + interface.Inflow[X_BA])) / state.Q_In;
 	
   #endif
   
   };
  :};
 
  #endif //ASM1 || ASM1temp
  
  #if (defined ASM2 || defined ASM2Temp || defined ASM2d || defined ASM2dTemp || ASM2dChemTemp)
 
 parameters <-
   {
    OBJ F_BOD5_BOD20 "Conversion factor BOD5/BOD20": Fraction := {: value <- 0.25 ; group <- "Conversion factors" :};
    OBJ i_N_S_I "Nitrogen content of inert soluble COD S_I" : NitrogenConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_N_S_F "Nitrogen content of soluble substrate S_F" : NitrogenConversionFactor := {:value <- 0.03 ; group <- "Composition parameters" :};
    OBJ i_N_X_I "Nitrogen content of inert particulate COD X_I" : NitrogenConversionFactor := {:value <- 0.03 ; group <- "Composition parameters" :};
    OBJ i_N_X_S "Nitrogen content of particulate substrate X_S" : NitrogenConversionFactor := {:value <- 0.04 ; group <- "Composition parameters" :};
    OBJ i_N_BM "Nitrogen content of biomass X_H, X_PAO, X_AUT" : NitrogenConversionFactor := {:value <- 0.07 ; group <- "Composition parameters" :};
    OBJ i_P_S_I "Phosphorus content of inert soluble COD S_I" : PhosphorusConversionFactor := {:value <- 0.00 ; group <- "Composition parameters" :};
    OBJ i_P_S_F "Phosphorus content of soluble substrate S_F" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_X_I "Phosphorus content of inert particulate COD X_I" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_X_S "Phosphorus content of particulate substrate X_S" : PhosphorusConversionFactor := {:value <- 0.01 ; group <- "Composition parameters" :};
    OBJ i_P_BM "Phosphorus content of biomass X_H, X_PAO, X_AUT" : PhosphorusConversionFactor := {:value <- 0.02 ; group <- "Composition parameters" :};
    OBJ i_TSS_X_I "TSS to X_I ratio" : ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_X_S "TSS to X_S ratio" : ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_BM "TSS to biomass ratio for X_H, X_PAO, X_AUT" : ConversionFactor	:= {: value <- 0.9 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_X_PP "TSS to X_PP ratio" : Real	:= {: value <- 3.23 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_X_PHA "TSS to X_PHA ratio" : ConversionFactor	:= {: value <- 0.6 ; group <- "Composition parameters" :};
	OBJ beta_TSS "weight TSS" : Real	:= {: value <- 2 ; group <- "weight number" :};
	OBJ beta_COD "weight COD" : Real := {: value <- 1 ; group <- "weight number" :};
	OBJ beta_BOD5 "weight BOD" : Real	:= {: value <- 2 ; group <- "weight number" :};
	OBJ beta_NH_4 "weight NH4" : Real	:= {: value <- 20 ; group <- "weight number" :};
	OBJ beta_NO_3 "weight NO" : Real	:= {: value <- 20 ; group <- "weight number" :};
	OBJ beta_TP "weight TP" : Real	:= {: value <- 0 ; group <- "weight number" :};
	OBJ f_S_F "Fraction of fermentable readily biodegradable products (S_F) in the soluble COD": Fraction := {: value <- 0.375 ; group <- "Conversion factors" :};
   OBJ f_S_A "Fraction of fermentation procucts (S_A) in the soluble COD": Fraction := {: value <- 0.25 ; group <- "Conversion factors" :};
   OBJ f_X_S "Fraction slowly biodegradable substrate (X_S) in the particulate COD" : Fraction := {: value <- 0.69 ; group <- "Conversion factors" :};

 };
 
 state <-
   {
    OBJ S_COD "Soluble COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ X_COD "Particulate COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ BOD20 "BOD20" : BiolOxDemand := {: group <- "Influent characterization" :};
    OBJ COD "COD" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ BOD5 "BOD5" : BiolOxDemand := {: group <- "Influent characterization" :};
    OBJ TSS "TSS" : Concentration := {: group <- "Influent characterization" :};
    OBJ TN "Total Nitrogen" : Concentration := {: group <- "Influent characterization" :};
    OBJ TKN "Total Nitrogen" : Concentration := {: group <- "Influent characterization" :};
    OBJ TP "Total Phosphorus" : Concentration := {: group <- "Influent characterization" :};
    OBJ NH_4 "Ammonia" : Concentration := {: group <- "Influent characterization" :};
    OBJ NO_3 "Nitrates" : Concentration := {: group <- "Influent characterization" :};
    OBJ PO_4 "Phosphates" : Concentration := {: group <- "Influent characterization" :};
	OBJ PU_COD "COD Pollution" : ChemOxDemand := {: group <- "Influent characterization" :};
    OBJ PU_BOD5 "BOD5 Pollution" : BiolOxDemand := {: group <- "Influent characterization" :};
    OBJ PU_TSS "TSS Pollution" : Concentration := {: group <- "Influent characterization" :};
    OBJ PU_TP "Total Phosphorus Pollution" : Concentration := {: group <- "Influent characterization" :};
    OBJ PU_NH_4 "Ammonia Pollution" : Concentration := {: group <- "Influent characterization" :};
    OBJ PU_NO_3 "Nitrates Pollution" : Concentration := {: group <- "Influent characterization" :};
	OBJ Total_PU "Total Pollution" : Concentration := {: group <- "Influent characterization" :};
	OBJ Integ_NH4 "Integral NH4" : Real ;
	OBJ Integ_NO3 "Integral NO3" : Real ;
	OBJ Integ_BOD5 "Integral BOD5" : Real ;
	OBJ Integ_COD "Integral COD" : Real ;
	OBJ Integ_TSS "Integral TSS" : Real ;
	OBJ Integ_TKN "Integral TKN" : Real ;
   OBJ fX_I  "fraction of Xi" : Real := {: group <- "Influent characterization" :};
   OBJ fX_s  "fraction of Xs" : Real := {: group <- "Influent characterization" :};
   OBJ fS_s  "fraction of Ss" : Real := {: group <- "Influent characterization" :};
   OBJ fS_i  "fraction of Si" : Real := {: group <- "Influent characterization" :};
   };
   
     equations <-
   {
   interface.y_M = state.Q_In * state.TSS/1000;
   
    state.S_COD = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE (interface.Inflow[S_I] + interface.Inflow[S_F] + interface.Inflow[S_A]) / state.Q_In; 
    state.X_COD = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE (interface.Inflow[X_I] + interface.Inflow[X_S] 
 				  	    + interface.Inflow[X_H] + interface.Inflow[X_AUT] + interface.Inflow[X_PAO] + interface.Inflow[X_PHA])
					   / state.Q_In;
    state.BOD20 = IF (state.Q_In == 0)
    			  THEN 0
 			   	  ELSE (interface.Inflow[S_F] + interface.Inflow[S_A] + interface.Inflow[X_S] 
 				  	    + interface.Inflow[X_H] + interface.Inflow[X_AUT] + interface.Inflow[X_PAO] + interface.Inflow[X_PHA])
					   / state.Q_In;
 
    state.COD = state.S_COD + state.X_COD;
    state.BOD5 = parameters.F_BOD5_BOD20 * state.BOD20;
    state.TSS = IF (state.Q_In == 0)
			  	THEN 0
				ELSE interface.Inflow[X_TSS] / state.Q_In;
/*    state.TSS = IF (state.Q_In == 0)
    			   THEN 0
 			   ELSE
 			   (parameters.i_TSS_X_I * interface.Inflow[X_I]+parameters.i_TSS_X_S * interface.Inflow[X_S]
 			   + parameters.i_TSS_BM * (interface.Inflow[X_H] + interface.Inflow[X_AUT] + interface.Inflow[X_PAO])
 			   + parameters.i_TSS_X_PP * interface.Inflow[X_PP] + parameters.i_TSS_X_PHA * interface.Inflow[X_PHA])
			   / state.Q_In;
 */
    state.TKN = IF (state.Q_In == 0)
    			THEN 0
 				ELSE (interface.Inflow[S_NH]
 		 + parameters.i_N_S_I * interface.Inflow[S_I] 
 		 + parameters.i_N_S_F * interface.Inflow[S_F] 
 		 + parameters.i_N_X_I * interface.Inflow[X_I] 
 		 + parameters.i_N_X_S * interface.Inflow[X_S] 
 		 + parameters.i_N_BM * (interface.Inflow[X_H] + interface.Inflow[X_AUT] + interface.Inflow[X_PAO])) / state.Q_In; 
 		 
    state.TN = state.TKN + state.NO_3;
 
    state.TP = IF (state.Q_In == 0)
    		   THEN 0
 			   ELSE
 			   (interface.Inflow[S_PO] + interface.Inflow[X_PP] + interface.Inflow[X_MEP]
    		 + parameters.i_P_S_I * interface.Inflow[S_I] 
 		 + parameters.i_P_S_F * interface.Inflow[S_F] 
 		 + parameters.i_P_X_I * interface.Inflow[X_I] 
 		 + parameters.i_P_X_S * interface.Inflow[X_S] 
 		 + parameters.i_P_BM * (interface.Inflow[X_H] + interface.Inflow[X_AUT] + interface.Inflow[X_PAO])) / state.Q_In;
 	
    state.NH_4 = IF (state.Q_In == 0)
    			 THEN 0
 			   	 ELSE interface.Inflow[S_NH] / state.Q_In;
    state.NO_3 = IF (state.Q_In == 0)
    			 THEN 0
 			   	 ELSE interface.Inflow[S_NO] / state.Q_In;
    state.PO_4 = IF (state.Q_In == 0)
        		 THEN 0
     			 ELSE interface.Inflow[S_PO] / state.Q_In;
    DERIV(state.Integ_NH4, [independent.t]) = state.NH_4 ;
	DERIV(state.Integ_NO3, [independent.t]) = state.NO_3 ;
	DERIV(state.Integ_BOD5, [independent.t]) = state.BOD5 ;
	DERIV(state.Integ_COD, [independent.t]) = state.COD ;
	DERIV(state.Integ_TSS, [independent.t]) = state.TSS ;
	DERIV(state.Integ_TKN, [independent.t]) = state.TKN ;
	state.PU_COD = (parameters.beta_COD * state.COD * state.Q_In)/1000;
	state.PU_BOD5 = (parameters.beta_BOD5 * state.BOD5 * state.Q_In)/1000;
	state.PU_TSS = (parameters.beta_TSS * state.TSS * state.Q_In)/1000;
	state.PU_NH_4 = (parameters.beta_NH_4 * state.NH_4 * state.Q_In)/1000;
	state.PU_NO_3 = (parameters.beta_NO_3 * state.NO_3 * state.Q_In)/1000;
	state.PU_TP = (parameters.beta_TP * state.TP * state.Q_In)/1000;
	state.Total_PU = (state.PU_COD + state.PU_BOD5 + state.PU_TSS + state.PU_NH_4 + state.PU_NO_3 + state.PU_TP); 
  
//   state.X_COD = interface.Inflow[CODt] - interface.Inflow[CODs];
//   state.S_COD = interface.Inflow[CODs];
//   state.fX_s = state.X_COD * parameters.f_X_S/(state.X_COD + state.S_COD);
//   state.fS_s = (state.S_COD * parameters.f_S_F + state.S_COD * parameters.f_S_A)/(state.X_COD + state.S_COD);
//   state.fS_i = state.S_COD * (1 - parameters.f_S_F - parameters.f_S_A)/(state.X_COD + state.S_COD);
//   state.fX_I = (state.X_COD  
//				      - interface.Outflow[X_H]
//				      - interface.Outflow[X_AUT]
//				      - interface.Outflow[X_PAO] 
//				      - interface.Outflow[X_PHA]
//				      - interface.Outflow[X_S])/(state.X_COD + state.S_COD);
   
  };
  :};
 
 #endif //ASM2dModtemp or ASM2dChemTemp
 #endif //ASM1Temp or ASM2dModTemp or ASM2dChemTemp


#endif // WWTP_BASE_SENSORS_QUALITYINDEX

