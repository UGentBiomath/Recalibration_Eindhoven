/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:35$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SPLITTERS_COMBINERS_THREECOMBINER
#define WWTP_BASE_SPLITTERS_COMBINERS_THREECOMBINER

 CLASS ThreeCombiner
 (* icon = "three_combiner" ; is_default = "false" *)  
 "three combiner"
 EXTENDS WWTPAtomicModelWithoutVolume WITH
 {:
  comments <- "A model for a combiner of three flows";
  interface <-
   { 
    OBJ Inflow1 (* terminal = "in_1" *) "Inflow1" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent 1":};
    OBJ Inflow2 (* terminal = "in_2" *) "Inflow2" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent 2":};
    OBJ Inflow3 (* terminal = "in_3" *) "Inflow3" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent 3":};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent":};
   };
  state <-  
  {
    OBJ Q_In1 (* is_favorite = "1" *) "Influent flow rate from flow 1" : FlowRate := {: group <- "Operational" :};
    OBJ Q_In2 (* is_favorite = "1" *) "Influent flow rate from flow 2" : FlowRate := {: group <- "Operational" :};
    OBJ Q_In3 (* is_favorite = "1" *) "Influent flow rate from flow 3" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
  };   
  equations <-
   {
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow[Comp_Index] =
      - state.InFluxPerComponent[Comp_Index];};   

    state.Q_In1 = interface.Inflow1[IndexOfSolvent] * parameters.WWTPSpecificVolume[IndexOfSolvent];
    state.Q_In2 = interface.Inflow2[IndexOfSolvent] * parameters.WWTPSpecificVolume[IndexOfSolvent];
    state.Q_In3 = interface.Inflow3[IndexOfSolvent] * parameters.WWTPSpecificVolume[IndexOfSolvent];

     {state.Q_Out = (parameters.WWTPSpecificVolume[IndexOfSolvent] 
                  * state.InFluxPerComponent[IndexOfSolvent]);};
   }; 
 :};

CLASS InSewTerminal SPECIALISES SewTerminal; //used to indicate inflow concentrations
CLASS OutSewTerminal SPECIALISES SewTerminal; //used to indicate outflow concentrations

CLASS SewSpecificVolumeVector = SpecificVolume[NrOfSewComponents;];
CLASS SewMassFluxVector = MassFlux[NrOfSewComponents;];
CLASS SewConcentrationVector = Concentration[NrOfSewComponents;];
	

 CLASS SewThreeCombiner
 (* icon = "three_combiner" ; is_default = "true" *)  
 "three combiner"
 // EXTENDS WWTPAtomicModelWithoutVolume WITH
  SPECIALISES PhysicalDAEModelType :=
{:
  comments <- "A model for a combiner of three flows";
  interface <-
   { 
    OBJ Inflow1 (* terminal = "in_1" *) "Inflow1" : 
         InSewTerminal := {: causality <- "CIN" ; group <- "Influent 1":};
    OBJ Inflow2 (* terminal = "in_2" *) "Inflow2" : 
         InSewTerminal := {: causality <- "CIN" ; group <- "Influent 2":};
    OBJ Inflow3 (* terminal = "in_3" *) "Inflow3" : 
         InSewTerminal := {: causality <- "CIN" ; group <- "Influent 3":};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" : 
         OutSewTerminal := {: causality <- "COUT" ; group <- "Effluent":};
   };

  parameters <-
   {
    OBJ SewSpecificVolume (* hidden = "1" *)
    "Vector containing the specific volume (= 1/density) for all the components"
    : SewSpecificVolumeVector;
   };

  state <-  
  {
    OBJ Total_Flux (* is_favorite = "1" *) "Total flux per component" : MassFlux[NrOfSewComponents;] := {: group <- "Operational" :};
    OBJ inFluxPerSewComponent (* hidden = "1" *) "Vector containing incoming fluxes for all components" : SewMassFluxVector;
    OBJ Q_In "Influent flow rate" : FlowRate := {: group <- "Influent" :};
	  OBJ Out "Outgoing concentrations and flow rate" : SewConcentrationVector := {: group <- "Effluent" :};
	  OBJ CODtot "Total COD concentration" : Concentration := {: group <- "Effluent" :};
  };  

  initial <-
   {
    parameters.SewSpecificVolume[H2O_sew] := 0.000001;
   };

  independent <- { OBJ t "Time" : Time; };
	  
  equations <-
   {
     { FOREACH Comp_Index IN {1 .. NrOfSewComponents}:
        state.inFluxPerSewComponent[Comp_Index] =
         SUMOVER In_Terminal IN {SelectByType(interface,InSewTerminal)}:
         (In_Terminal[Comp_Index]);
     };

     {state.Q_In = (parameters.SewSpecificVolume[H2O_sew] 
                  * state.inFluxPerSewComponent[H2O_sew]);
     };


    {FOREACH Comp_Index IN {1 .. NrOfSewComponents}:
      interface.Outflow[Comp_Index] =
      - state.inFluxPerSewComponent[Comp_Index];};   

    state.Out[H2O_sew]= -(parameters.SewSpecificVolume[H2O_sew] * interface.Outflow[H2O_sew]);

    {FOREACH Comp_Index IN {2 .. NrOfSewComponents}:
      state.Out[Comp_Index] = - interface.Outflow[Comp_Index] / state.Out[H2O_sew];};   

		state.CODtot = state.Out[COD_part] + state.Out[COD_sol];
    
   }; 
 :};



#endif // WWTP_BASE_SPLITTERS_THREECOMBINER
