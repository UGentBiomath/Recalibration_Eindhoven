/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * Development Jeroen Langeveld, remy schilperoort, Petra van daal
 * Original MSL implementation Lorenzo Benedetti
 * Modifications Youri Amerlinck
 *
 ******************************************************************************/

#ifndef WWTP_BASE_INFLUENT_QEVENTS
#define WWTP_BASE_INFLUENT_QEVENTS

 CLASS Sew_WWTPin_2_Q
 (* icon = "sewer" ; is_default = "true" *)
 "Generator of WWTP infuent pollutograph, second version"
 SPECIALISES PhysicalDAEModelType :=
{:
  comments <- "influent model";
  
  interface <-
  {
    OBJ Q_Meas (* terminal = "in_1"; manip = "1"; is_favorite = "1" *) "Measured" : 
      FlowRate  := {: causality <- "CIN" ; value <- 100000; group <- "Influent" :};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" :
      SewTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
//	  OBJ FD (* terminal = "in_1"; manip = "1"; is_favorite = "1" *) "Filling Degree" : 
//      Real  := {: causality <- "CIN" ; value <- 0.5; group <- "Influent" :};
  };
  
  parameters <-
  {
    OBJ SewSpecificVolume (* hidden = "1" *)
    "Vector containing the specific volume (= 1/density) for all the components"
    : SewSpecificVolumeVector;

   OBJ Q_event "Flow value for start of event" : FlowRate := {: value <- 96000 ; group <- "_Events" :};
	 OBJ Qsw_event8 "Flow sw value for start of event8" : FlowRate := {: value <- 12000 ; group <- "_Events" :};
	 OBJ Qsw_event9 "Flow sw value for start of event9" : FlowRate := {: value <- 96000 ; group <- "_Events" :};
	 OBJ FD_event "Filling degree value for start of event3" : Real := {: value <- 0.21 ; group <- "_Events" :};
	 OBJ Q_FD_event "Flow rate replacing the Filling degree value for start of event3" : Real := {: value <- 600000 ; group <- "_Events" :};
	 OBJ T_Average "Averaging time for Q_mean" : Time := {: value <- 0.02083; group <- "_Events" :};
	 
   OBJ Q_95_av "Daily average Q, 95%ile" : FlowRate := {: value <- 70000 ; group <- "_Averages" :};
   OBJ COD_av "COD daily average concentration" : Concentration := {: value <- 642 ; group <- "_Averages" :};
   OBJ CODs_av "CODs daily average concentration" : Concentration := {: value <- 197.3 ; group <- "_Averages" :};
   OBJ TSS_av "TSS daily average concentration" : Concentration := {: value <- 289.6 ; group <- "_Averages" :};
   OBJ NH4_av "NH4 daily average concentration" : Concentration := {: value <- 35 ; group <- "_Averages" :};
   OBJ PO4_av "PO4 daily average concentration" : Concentration := {: value <- 7 ; group <- "_Averages" :};
   
   OBJ alpha_COD "Alpha for COD, proc2" : Fraction := {: value <- 0.8 ; group <- "_proc2" :};
   OBJ alpha_CODs "Alpha for CODs, proc2" : Fraction := {: value <- 1 ; group <- "_proc2" :};
   OBJ alpha_TSS "Alpha for TSS, proc2" : Fraction := {: value <- 1 ; group <- "_proc2" :};
   OBJ alpha_NH4 "Alpha for NH4, proc2" : Fraction := {: value <- 1 ; group <- "_proc2" :};
   OBJ alpha_PO4 "Alpha for PO4, proc2" : Fraction := {: value <- 1 ; group <- "_proc2" :};
   
   OBJ beta_COD "Beta for COD, proc3" : Fraction := {: value <- 0.8 ; group <- "_proc3" :};
   OBJ beta_CODs "Beta for CODs, proc3" : Fraction := {: value <- 1 ; group <- "_proc3" :};
   OBJ beta_TSS "Beta for TSS, proc3" : Fraction := {: value <- 1 ; group <- "_proc3" :};
   OBJ beta_NH4 "Beta for NH4, proc3" : Fraction := {: value <- 1 ; group <- "_proc3" :};
   OBJ beta_PO4 "Beta for PO4, proc3" : Fraction := {: value <- 1 ; group <- "_proc3" :};
	 
	 OBJ proc4_slope1_COD "Slope1 for COD, proc4" : Fraction := {: value <- 0.576 ; group <- "_proc4" :};
   OBJ proc4_slope1_CODs "Slope1 for CODs, proc4" : Fraction := {: value <- 0.576 ; group <- "_proc4" :};
   OBJ proc4_slope1_TSS "Slope1 for TSS, proc4" : Fraction := {: value <- 0.576 ; group <- "_proc4" :};
   OBJ proc4_slope1_NH4 "Slope1 for NH4, proc4" : Fraction := {: value <- 0.576 ; group <- "_proc4" :};
   OBJ proc4_slope1_PO4 "Slope1 for PO4, proc4" : Fraction := {: value <- 0.576 ; group <- "_proc4" :};
	 
	 OBJ proc4_slope2_COD "Slope2 for COD, proc4" : Fraction := {: value <- 0.288 ; group <- "_proc4" :};
   OBJ proc4_slope2_CODs "Slope2 for CODs, proc4" : Fraction := {: value <- 0.288 ; group <- "_proc4" :};
   OBJ proc4_slope2_TSS "Slope2 for TSS, proc4" : Fraction := {: value <- 0.288 ; group <- "_proc4" :};
   OBJ proc4_slope2_NH4 "Slope2 for NH4, proc4" : Fraction := {: value <- 0.288 ; group <- "_proc4" :};
   OBJ proc4_slope2_PO4 "Slope2 for PO4, proc4" : Fraction := {: value <- 0.288 ; group <- "_proc4" :};
	 
   OBJ window_proc4_COD "Window length for COD, proc4" : Time := {: value <- 0.8333 ; group <- "_proc4" :};
   OBJ window_proc4_CODs "Window length for CODs, proc4" : Time := {: value <- 0.8333 ; group <- "_proc4" :};
   OBJ window_proc4_TSS "Window length for TSS, proc4" : Time := {: value <- 0.8333 ; group <- "_proc4" :};
   OBJ window_proc4_NH4 "Window length for NH4, proc4" : Time := {: value <- 0.8333 ; group <- "_proc4" :};
   OBJ window_proc4_PO4 "Window length for PO4, proc4" : Time := {: value <- 0.8333 ; group <- "_proc4" :};
	 
	 OBJ proc5_slope_CODs "Slope for CODs, proc5" : Fraction := {: value <- 0.576 ; group <- "_proc5" :};
   OBJ proc5_slope_NH4 "Slope for NH4, proc5" : Fraction := {: value <- 0.576 ; group <- "_proc5" :};
   OBJ proc5_slope_PO4 "Slope for PO4, proc5" : Fraction := {: value <- 0.576 ; group <- "_proc5" :};
	 
   OBJ window_proc5_CODs "Window length for CODs, proc5" : Time := {: value <- 1.0833 ; group <- "_proc5" :};
   OBJ window_proc5_NH4 "Window length for NH4, proc5" : Time := {: value <- 1.0833 ; group <- "_proc5" :};
   OBJ window_proc5_PO4 "Window length for PO4, proc5" : Time := {: value <- 1.0833 ; group <- "_proc5" :};
	 
	 OBJ Q_proc6 "Flow value for start of event" : FlowRate := {: value <- 96000 ; group <- "_proc6" :};
	 OBJ peak_COD_high "Proc6 high COD peak concentration" : Concentration := {: value <- 600 ; group <- "_proc6" :};
	 OBJ peak_COD_low "Proc6 low COD peak concentration" : Concentration := {: value <- 300 ; group <- "_proc6" :};
	 OBJ proc6_slope1_COD "Slope1 for COD, proc6" : Real := {: value <- 1728 ; group <- "_proc6" :};
	 OBJ proc6_slope2_COD "Slope2 for COD, proc6" : Real := {: value <- 1296 ; group <- "_proc6" :};
	 OBJ peak_TSS_high "Proc6 high TSS peak concentration" : Concentration := {: value <- 200 ; group <- "_proc6" :};
	 OBJ peak_TSS_low "Proc6 low TSS peak concentration" : Concentration := {: value <- 100 ; group <- "_proc6" :};
	 OBJ proc6_slope1_TSS "Slope1 for TSS, proc6" : Real := {: value <- 1728 ; group <- "_proc6" :};
	 OBJ proc6_slope2_TSS "Slope2 for TSS, proc6" : Real := {: value <- 1296 ; group <- "_proc6" :};
	 OBJ proc6_t1_COD "Time1 for COD high, proc6" : Time := {: value <- 0.5 ; group <- "_proc6" :};
	 OBJ proc6_t2_COD "Time2 for COD low, proc6" : Time := {: value <- 1.5 ; group <- "_proc6" :};
	 OBJ proc6_t1_TSS "Time1 for TSS high, proc6" : Time := {: value <- 0.5 ; group <- "_proc6" :};
	 OBJ proc6_t2_TSS "Time2 for TSS low, proc6" : Time := {: value <- 1.5 ; group <- "_proc6" :};
	 
	 OBJ proc7_slope1_COD "Slope1 for COD, proc7" : Real := {: value <- 2880 ; group <- "_proc7" :};
	 OBJ proc7_slope2_COD "Slope2 for COD, proc7" : Real := {: value <- 720 ; group <- "_proc7" :};
	 OBJ proc7_slope1_TSS "Slope1 for TSS, proc7" : Real := {: value <- 2880 ; group <- "_proc7" :};
	 OBJ proc7_slope2_TSS "Slope2 for TSS, proc7" : Real := {: value <- 720 ; group <- "_proc7" :};
   
   OBJ Q_95_norm_H00 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.04 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H01 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.00 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H02 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.94 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H03 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.87 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H04 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.80 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H05 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.75 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H06 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.72 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H07 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.74 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H08 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.84 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H09 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 0.97 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H10 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.06 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H11 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.10 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H12 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.11 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H13 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.14 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H14 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.15 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H15 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.14 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H16 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.10 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H17 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.09 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H18 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.06 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H19 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.07 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H20 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.08 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H21 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.09 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H22 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.08 ; group <- "Q_95_norm" :};
	 OBJ Q_95_norm_H23 (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : Real := {: value <- 1.06 ; group <- "Q_95_norm" :};
	 
	 OBJ NH4_norm_H00 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.00 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H01 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.99 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H02 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H03 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.99 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H04 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.97 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H05 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.94 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H06 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.92 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H07 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.89 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H08 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.87 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H09 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.91 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H10 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H11 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.09 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H12 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.13 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H13 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.10 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H14 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.04 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H15 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H16 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H17 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H18 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.06 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H19 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.07 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H20 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.03 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H21 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 1.00 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H22 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "NH4_norm" :};
	 OBJ NH4_norm_H23 (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "NH4_norm" :};
	 
	 OBJ COD_norm_H00 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.02 ; group <- "COD_norm" :};
	 OBJ COD_norm_H01 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.00 ; group <- "COD_norm" :};
	 OBJ COD_norm_H02 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.97 ; group <- "COD_norm" :};
	 OBJ COD_norm_H03 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.94 ; group <- "COD_norm" :};
	 OBJ COD_norm_H04 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.89 ; group <- "COD_norm" :};
	 OBJ COD_norm_H05 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.84 ; group <- "COD_norm" :};
	 OBJ COD_norm_H06 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.80 ; group <- "COD_norm" :};
	 OBJ COD_norm_H07 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.77 ; group <- "COD_norm" :};
	 OBJ COD_norm_H08 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.76 ; group <- "COD_norm" :};
	 OBJ COD_norm_H09 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.80 ; group <- "COD_norm" :};
	 OBJ COD_norm_H10 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 0.89 ; group <- "COD_norm" :};
	 OBJ COD_norm_H11 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.00 ; group <- "COD_norm" :};
	 OBJ COD_norm_H12 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.10 ; group <- "COD_norm" :};
	 OBJ COD_norm_H13 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.15 ; group <- "COD_norm" :};
	 OBJ COD_norm_H14 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.18 ; group <- "COD_norm" :};
	 OBJ COD_norm_H15 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.18 ; group <- "COD_norm" :};
	 OBJ COD_norm_H16 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.17 ; group <- "COD_norm" :};
	 OBJ COD_norm_H17 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.13 ; group <- "COD_norm" :};
	 OBJ COD_norm_H18 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.09 ; group <- "COD_norm" :};
	 OBJ COD_norm_H19 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.07 ; group <- "COD_norm" :};
	 OBJ COD_norm_H20 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.05 ; group <- "COD_norm" :};
	 OBJ COD_norm_H21 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.05 ; group <- "COD_norm" :};
	 OBJ COD_norm_H22 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.07 ; group <- "COD_norm" :};
	 OBJ COD_norm_H23 (* hidden = "0" *) "Normalized COD hourly pattern, average" : Real := {: value <- 1.07 ; group <- "COD_norm" :};
	 
	 OBJ CODs_norm_H00 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.00 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H01 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.99 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H02 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.98 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H03 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.99 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H04 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.97 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H05 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.94 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H06 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.92 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H07 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.89 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H08 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.87 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H09 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.91 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H10 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.02 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H11 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.09 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H12 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.13 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H13 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.10 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H14 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.04 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H15 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.02 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H16 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.02 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H17 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.02 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H18 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.06 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H19 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.07 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H20 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.03 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H21 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 1.00 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H22 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.98 ; group <- "CODs_norm" :};
	 OBJ CODs_norm_H23 (* hidden = "0" *) "Normalized CODs hourly pattern, average" : Real := {: value <- 0.98 ; group <- "CODs_norm" :};
	 
	 OBJ PO4_norm_H00 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.00 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H01 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.99 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H02 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H03 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.99 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H04 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.97 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H05 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.94 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H06 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.92 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H07 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.89 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H08 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.87 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H09 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.91 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H10 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H11 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.09 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H12 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.13 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H13 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.10 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H14 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.04 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H15 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H16 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H17 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.02 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H18 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.06 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H19 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.07 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H20 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.03 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H21 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 1.00 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H22 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "PO4_norm" :};
	 OBJ PO4_norm_H23 (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : Real := {: value <- 0.98 ; group <- "PO4_norm" :};
	 
	 OBJ TSS_norm_H00 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.02 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H01 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.00 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H02 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.97 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H03 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.94 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H04 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.89 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H05 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.84 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H06 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.80 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H07 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.77 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H08 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.76 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H09 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.80 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H10 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 0.89 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H11 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.00 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H12 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.10 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H13 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.15 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H14 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.18 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H15 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.18 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H16 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.17 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H17 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.13 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H18 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.09 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H19 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.07 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H20 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.05 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H21 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.05 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H22 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.07 ; group <- "TSS_norm" :};
	 OBJ TSS_norm_H23 (* hidden = "0" *) "Normalized TSS hourly pattern, average" : Real := {: value <- 1.07 ; group <- "TSS_norm" :};
	 
	 OBJ Q_95_norm (* hidden = "0" *) "Normalized Q hourly pattern, 95%ile" : HourlyDailyPattern := {: group <- "z" :}; 
   OBJ COD_norm (* hidden = "0" *) "Normalized COD hourly pattern, average" : HourlyDailyPattern := {: group <- "z" :};  
   OBJ CODs_norm (* hidden = "0" *) "Normalized CODs hourly pattern, average" : HourlyDailyPattern := {: group <- "z" :};  
	 OBJ TSS_norm (* hidden = "0" *) "Normalized TSS hourly pattern, average" : HourlyDailyPattern := {: group <- "z" :}; 
	 OBJ NH4_norm (* hidden = "0" *) "Normalized NH4 hourly pattern, average" : HourlyDailyPattern := {: group <- "z" :};  
	 OBJ PO4_norm (* hidden = "0" *) "Normalized PO4 hourly pattern, average" : HourlyDailyPattern := {: group <- "z" :};
  };

  independent <- 
  {
   OBJ t "Time" : Time := {: group <- "Time" :};
  };

  state <-
  {
   OBJ Q_in "Q in" : FlowRate := {: group <- "_Results" :};
   OBJ Q_integral "Q in integral" : Volume;
	 OBJ Qsw "Qsw" : FlowRate := {: group <- "_Results" :};
	 OBJ Q_DWF_UB "Q DWF UB" : FlowRate := {: group <- "_Results" :};
	 OBJ Q_mean "Averaged influent flow rate" : FlowRate := {: group <- "_Results" :};
   
   OBJ Daytime(* hidden = "0" *) "Calculates hour of the day" : Real;
   OBJ Help_Time (* hidden = "0" *)"Time of the day expressed in days" : Real;
   OBJ Timestep (* hidden = "0" *)"Hour of the day" : Integer;
	 
	 OBJ event "Type of event" : Integer;
	 OBJ event8 "1 yes, 0 no" : Integer;
	 OBJ event8_h "1 yes, 0 no" : Integer;
	 OBJ t_start_event8 (* hidden = "0" *) "Time since event8 start" : Time;
	 OBJ t_end_event8_h (* hidden = "0" *) "Time since event8_h end" : Time;
   
   OBJ COD "COD" : Concentration := {: group <- "_Results" :};
   OBJ CODs "CODs" : Concentration := {: group <- "_Results" :};
   OBJ TSS "TSS" : Concentration := {: group <- "_Results" :};
   OBJ NH4 "NH4" : Concentration := {: group <- "_Results" :};
   OBJ PO4 "PO4" : Concentration := {: group <- "_Results" :};
   
   OBJ proc1_NH4 (* hidden = "0" *) "DWF, NH4" : Concentration := {: group <- "_Process" :};
	 OBJ proc2_NH4 (* hidden = "0" *) "Dilution in large events, NH4" : Real := {: group <- "_Process" :};
   OBJ proc3_NH4 (* hidden = "0" *) "Dilution in medium events, NH4" : Real := {: group <- "_Process" :};
   OBJ proc4_NH4 (* hidden = "0" *) "Replenishment large and medium events, NH4" : Real := {: group <- "_Process" :};
	 OBJ proc4_NH4_h (* hidden = "0" *) "Replenishment large and medium events, NH4" : Real := {: group <- "_Process" :};
	 OBJ proc5_NH4 (* hidden = "0" *) "Dilution and replenishment small events, NH4" : Real := {: group <- "_Process" :};
	 OBJ proc5_1_NH4 (* hidden = "0" *) "Dilution and replenishment first small event, NH4" : Real := {: group <- "_Process" :};
	 OBJ proc5_2_NH4 (* hidden = "0" *) "Dilution and replenishment second small event, NH4" : Real := {: group <- "_Process" :};
	 
	 OBJ proc1_CODs (* hidden = "0" *) "DWF, CODs" : Concentration := {: group <- "_Process" :};
	 OBJ proc2_CODs (* hidden = "0" *) "Dilution in large events, CODs" : Real := {: group <- "_Process" :};
   OBJ proc3_CODs (* hidden = "0" *) "Dilution in medium events, CODs" : Real := {: group <- "_Process" :};
   OBJ proc4_CODs (* hidden = "0" *) "Replenishment large and medium events, CODs" : Real := {: group <- "_Process" :};
	 OBJ proc4_CODs_h (* hidden = "0" *) "Replenishment large and medium events, CODs" : Real := {: group <- "_Process" :};
	 OBJ proc5_CODs (* hidden = "0" *) "Dilution and replenishment small events, CODs" : Real := {: group <- "_Process" :};
	 OBJ proc5_1_CODs (* hidden = "0" *) "Dilution and replenishment first small event, CODs" : Real := {: group <- "_Process" :};
	 OBJ proc5_2_CODs (* hidden = "0" *) "Dilution and replenishment second small event, CODs" : Real := {: group <- "_Process" :};
	 
	 OBJ proc1_PO4 (* hidden = "0" *) "DWF, PO4" : Concentration := {: group <- "_Process" :};
	 OBJ proc2_PO4 (* hidden = "0" *) "Dilution in large events, PO4" : Real := {: group <- "_Process" :};
   OBJ proc3_PO4 (* hidden = "0" *) "Dilution in medium events, PO4" : Real := {: group <- "_Process" :};
   OBJ proc4_PO4 (* hidden = "0" *) "Replenishment large and medium events, PO4" : Real := {: group <- "_Process" :};
	 OBJ proc4_PO4_h (* hidden = "0" *) "Replenishment large and medium events, PO4" : Real := {: group <- "_Process" :};
	 OBJ proc5_PO4 (* hidden = "0" *) "Dilution and replenishment small events, PO4" : Real := {: group <- "_Process" :};
	 OBJ proc5_1_PO4 (* hidden = "0" *) "Dilution and replenishment first small event, PO4" : Real := {: group <- "_Process" :};
	 OBJ proc5_2_PO4 (* hidden = "0" *) "Dilution and replenishment second small event, PO4" : Real := {: group <- "_Process" :};
	 
	 OBJ proc1_COD (* hidden = "0" *) "DWF, COD" : Concentration := {: group <- "_Process" :};
	 OBJ proc2_COD (* hidden = "0" *) "Dilution in large events, COD" : Real := {: group <- "_Process" :};
   OBJ proc3_COD (* hidden = "0" *) "Dilution in medium events, COD" : Real := {: group <- "_Process" :};
   OBJ proc4_COD (* hidden = "0" *) "Replenishment large and medium events, COD" : Real := {: group <- "_Process" :};
	 OBJ proc6_COD (* hidden = "0" *) "Resuspention large and medium events, COD" : Real := {: group <- "_Process" :};
	 OBJ proc6_COD_h (* hidden = "0" *) "Resuspention large and medium events, COD" : Real := {: group <- "_Process" :};
	 OBJ proc7_COD (* hidden = "0" *) "Resuspention small events, COD" : Real := {: group <- "_Process" :};
	 OBJ proc7_COD_h (* hidden = "0" *) "Resuspention small events, COD" : Real := {: group <- "_Process" :};
	 
	 OBJ proc1_TSS (* hidden = "0" *) "DWF, TSS" : Concentration := {: group <- "_Process" :};
	 OBJ proc2_TSS (* hidden = "0" *) "Dilution in large events, TSS" : Real := {: group <- "_Process" :};
   OBJ proc3_TSS (* hidden = "0" *) "Dilution in medium events, TSS" : Real := {: group <- "_Process" :};
   OBJ proc4_TSS (* hidden = "0" *) "Replenishment large and medium events, TSS" : Real := {: group <- "_Process" :};
	 OBJ proc6_TSS (* hidden = "0" *) "Resuspention large and medium events, TSS" : Real := {: group <- "_Process" :};
	 OBJ proc6_TSS_h (* hidden = "0" *) "Resuspention large and medium events, TSS" : Real := {: group <- "_Process" :};
	 OBJ proc7_TSS (* hidden = "0" *) "Resuspention small events, TSS" : Real := {: group <- "_Process" :};
	 OBJ proc7_TSS_h (* hidden = "0" *) "Resuspention small events, TSS" : Real := {: group <- "_Process" :};
	 
	 OBJ t_proc4 (* hidden = "1" *) "Time since proc4 start" : Time;
	 OBJ t_start_proc4 (* hidden = "1" *)"Proc4 start" : Time;
	 OBJ t_event39 (* hidden = "1" *)"Time since event3 or event9 end" : Time;
	 OBJ t_end_event39 (* hidden = "1" *)"Event3 or event9 end" : Time;
	 OBJ t_start_proc5_1 (* hidden = "1" *)"Proc5_1 start" : Time;
	 OBJ t_start_proc5_2 (* hidden = "1" *)"Proc5_2 start" : Time;
	};
  
  initial <-
  { 
    parameters.SewSpecificVolume[H2O_sew] := 0.000001;

	 state.proc2_NH4 = 1;
	 state.proc3_NH4 = 1;
	 state.proc4_NH4 = 1;
	 state.proc5_NH4 = 1;
	 state.proc2_CODs = 1;
	 state.proc3_CODs = 1;
	 state.proc4_CODs = 1;
	 state.proc5_CODs = 1;
	 state.proc2_PO4 = 1;
	 state.proc3_PO4 = 1;
	 state.proc4_PO4 = 1;
	 state.proc5_PO4 = 1;
	 state.proc2_COD = 1;
	 state.proc3_COD = 1;
	 state.proc4_COD = 1;
	 state.proc2_TSS = 1;
	 state.proc3_TSS = 1;
	 state.proc4_TSS = 1;
	 
	 parameters.Q_95_norm[H00] = parameters.Q_95_norm_H00;
	 parameters.Q_95_norm[H01] = parameters.Q_95_norm_H01;
	 parameters.Q_95_norm[H02] = parameters.Q_95_norm_H02;
	 parameters.Q_95_norm[H03] = parameters.Q_95_norm_H03;
	 parameters.Q_95_norm[H04] = parameters.Q_95_norm_H04;
	 parameters.Q_95_norm[H05] = parameters.Q_95_norm_H05;
	 parameters.Q_95_norm[H06] = parameters.Q_95_norm_H06;
	 parameters.Q_95_norm[H07] = parameters.Q_95_norm_H07;
	 parameters.Q_95_norm[H08] = parameters.Q_95_norm_H08;
	 parameters.Q_95_norm[H09] = parameters.Q_95_norm_H09;
	 parameters.Q_95_norm[H10] = parameters.Q_95_norm_H10;
	 parameters.Q_95_norm[H11] = parameters.Q_95_norm_H11;
	 parameters.Q_95_norm[H12] = parameters.Q_95_norm_H12;
	 parameters.Q_95_norm[H13] = parameters.Q_95_norm_H13;
	 parameters.Q_95_norm[H14] = parameters.Q_95_norm_H14;
	 parameters.Q_95_norm[H15] = parameters.Q_95_norm_H15;
	 parameters.Q_95_norm[H16] = parameters.Q_95_norm_H16;
	 parameters.Q_95_norm[H17] = parameters.Q_95_norm_H17;
	 parameters.Q_95_norm[H18] = parameters.Q_95_norm_H18;
	 parameters.Q_95_norm[H19] = parameters.Q_95_norm_H19;
	 parameters.Q_95_norm[H20] = parameters.Q_95_norm_H20;
	 parameters.Q_95_norm[H21] = parameters.Q_95_norm_H21;
	 parameters.Q_95_norm[H22] = parameters.Q_95_norm_H22;
	 parameters.Q_95_norm[H23] = parameters.Q_95_norm_H23;
	 
	 parameters.NH4_norm[H00] = parameters.NH4_norm_H00;
	 parameters.NH4_norm[H01] = parameters.NH4_norm_H01;
	 parameters.NH4_norm[H02] = parameters.NH4_norm_H02;
	 parameters.NH4_norm[H03] = parameters.NH4_norm_H03;
	 parameters.NH4_norm[H04] = parameters.NH4_norm_H04;
	 parameters.NH4_norm[H05] = parameters.NH4_norm_H05;
	 parameters.NH4_norm[H06] = parameters.NH4_norm_H06;
	 parameters.NH4_norm[H07] = parameters.NH4_norm_H07;
	 parameters.NH4_norm[H08] = parameters.NH4_norm_H08;
	 parameters.NH4_norm[H09] = parameters.NH4_norm_H09;
	 parameters.NH4_norm[H10] = parameters.NH4_norm_H10;
	 parameters.NH4_norm[H11] = parameters.NH4_norm_H11;
	 parameters.NH4_norm[H12] = parameters.NH4_norm_H12;
	 parameters.NH4_norm[H13] = parameters.NH4_norm_H13;
	 parameters.NH4_norm[H14] = parameters.NH4_norm_H14;
	 parameters.NH4_norm[H15] = parameters.NH4_norm_H15;
	 parameters.NH4_norm[H16] = parameters.NH4_norm_H16;
	 parameters.NH4_norm[H17] = parameters.NH4_norm_H17;
	 parameters.NH4_norm[H18] = parameters.NH4_norm_H18;
	 parameters.NH4_norm[H19] = parameters.NH4_norm_H19;
	 parameters.NH4_norm[H20] = parameters.NH4_norm_H20;
	 parameters.NH4_norm[H21] = parameters.NH4_norm_H21;
	 parameters.NH4_norm[H22] = parameters.NH4_norm_H22;
	 parameters.NH4_norm[H23] = parameters.NH4_norm_H23;
	 
	 parameters.COD_norm[H00] = parameters.COD_norm_H00;
	 parameters.COD_norm[H01] = parameters.COD_norm_H01;
	 parameters.COD_norm[H02] = parameters.COD_norm_H02;
	 parameters.COD_norm[H03] = parameters.COD_norm_H03;
	 parameters.COD_norm[H04] = parameters.COD_norm_H04;
	 parameters.COD_norm[H05] = parameters.COD_norm_H05;
	 parameters.COD_norm[H06] = parameters.COD_norm_H06;
	 parameters.COD_norm[H07] = parameters.COD_norm_H07;
	 parameters.COD_norm[H08] = parameters.COD_norm_H08;
	 parameters.COD_norm[H09] = parameters.COD_norm_H09;
	 parameters.COD_norm[H10] = parameters.COD_norm_H10;
	 parameters.COD_norm[H11] = parameters.COD_norm_H11;
	 parameters.COD_norm[H12] = parameters.COD_norm_H12;
	 parameters.COD_norm[H13] = parameters.COD_norm_H13;
	 parameters.COD_norm[H14] = parameters.COD_norm_H14;
	 parameters.COD_norm[H15] = parameters.COD_norm_H15;
	 parameters.COD_norm[H16] = parameters.COD_norm_H16;
	 parameters.COD_norm[H17] = parameters.COD_norm_H17;
	 parameters.COD_norm[H18] = parameters.COD_norm_H18;
	 parameters.COD_norm[H19] = parameters.COD_norm_H19;
	 parameters.COD_norm[H20] = parameters.COD_norm_H20;
	 parameters.COD_norm[H21] = parameters.COD_norm_H21;
	 parameters.COD_norm[H22] = parameters.COD_norm_H22;
	 parameters.COD_norm[H23] = parameters.COD_norm_H23;
	 
	 parameters.CODs_norm[H00] = parameters.CODs_norm_H00;
	 parameters.CODs_norm[H01] = parameters.CODs_norm_H01;
	 parameters.CODs_norm[H02] = parameters.CODs_norm_H02;
	 parameters.CODs_norm[H03] = parameters.CODs_norm_H03;
	 parameters.CODs_norm[H04] = parameters.CODs_norm_H04;
	 parameters.CODs_norm[H05] = parameters.CODs_norm_H05;
	 parameters.CODs_norm[H06] = parameters.CODs_norm_H06;
	 parameters.CODs_norm[H07] = parameters.CODs_norm_H07;
	 parameters.CODs_norm[H08] = parameters.CODs_norm_H08;
	 parameters.CODs_norm[H09] = parameters.CODs_norm_H09;
	 parameters.CODs_norm[H10] = parameters.CODs_norm_H10;
	 parameters.CODs_norm[H11] = parameters.CODs_norm_H11;
	 parameters.CODs_norm[H12] = parameters.CODs_norm_H12;
	 parameters.CODs_norm[H13] = parameters.CODs_norm_H13;
	 parameters.CODs_norm[H14] = parameters.CODs_norm_H14;
	 parameters.CODs_norm[H15] = parameters.CODs_norm_H15;
	 parameters.CODs_norm[H16] = parameters.CODs_norm_H16;
	 parameters.CODs_norm[H17] = parameters.CODs_norm_H17;
	 parameters.CODs_norm[H18] = parameters.CODs_norm_H18;
	 parameters.CODs_norm[H19] = parameters.CODs_norm_H19;
	 parameters.CODs_norm[H20] = parameters.CODs_norm_H20;
	 parameters.CODs_norm[H21] = parameters.CODs_norm_H21;
	 parameters.CODs_norm[H22] = parameters.CODs_norm_H22;
	 parameters.CODs_norm[H23] = parameters.CODs_norm_H23;
	 
	 parameters.PO4_norm[H00] = parameters.PO4_norm_H00;
	 parameters.PO4_norm[H01] = parameters.PO4_norm_H01;
	 parameters.PO4_norm[H02] = parameters.PO4_norm_H02;
	 parameters.PO4_norm[H03] = parameters.PO4_norm_H03;
	 parameters.PO4_norm[H04] = parameters.PO4_norm_H04;
	 parameters.PO4_norm[H05] = parameters.PO4_norm_H05;
	 parameters.PO4_norm[H06] = parameters.PO4_norm_H06;
	 parameters.PO4_norm[H07] = parameters.PO4_norm_H07;
	 parameters.PO4_norm[H08] = parameters.PO4_norm_H08;
	 parameters.PO4_norm[H09] = parameters.PO4_norm_H09;
	 parameters.PO4_norm[H10] = parameters.PO4_norm_H10;
	 parameters.PO4_norm[H11] = parameters.PO4_norm_H11;
	 parameters.PO4_norm[H12] = parameters.PO4_norm_H12;
	 parameters.PO4_norm[H13] = parameters.PO4_norm_H13;
	 parameters.PO4_norm[H14] = parameters.PO4_norm_H14;
	 parameters.PO4_norm[H15] = parameters.PO4_norm_H15;
	 parameters.PO4_norm[H16] = parameters.PO4_norm_H16;
	 parameters.PO4_norm[H17] = parameters.PO4_norm_H17;
	 parameters.PO4_norm[H18] = parameters.PO4_norm_H18;
	 parameters.PO4_norm[H19] = parameters.PO4_norm_H19;
	 parameters.PO4_norm[H20] = parameters.PO4_norm_H20;
	 parameters.PO4_norm[H21] = parameters.PO4_norm_H21;
	 parameters.PO4_norm[H22] = parameters.PO4_norm_H22;
	 parameters.PO4_norm[H23] = parameters.PO4_norm_H23;
	 
	 parameters.TSS_norm[H00] = parameters.TSS_norm_H00;
	 parameters.TSS_norm[H01] = parameters.TSS_norm_H01;
	 parameters.TSS_norm[H02] = parameters.TSS_norm_H02;
	 parameters.TSS_norm[H03] = parameters.TSS_norm_H03;
	 parameters.TSS_norm[H04] = parameters.TSS_norm_H04;
	 parameters.TSS_norm[H05] = parameters.TSS_norm_H05;
	 parameters.TSS_norm[H06] = parameters.TSS_norm_H06;
	 parameters.TSS_norm[H07] = parameters.TSS_norm_H07;
	 parameters.TSS_norm[H08] = parameters.TSS_norm_H08;
	 parameters.TSS_norm[H09] = parameters.TSS_norm_H09;
	 parameters.TSS_norm[H10] = parameters.TSS_norm_H10;
	 parameters.TSS_norm[H11] = parameters.TSS_norm_H11;
	 parameters.TSS_norm[H12] = parameters.TSS_norm_H12;
	 parameters.TSS_norm[H13] = parameters.TSS_norm_H13;
	 parameters.TSS_norm[H14] = parameters.TSS_norm_H14;
	 parameters.TSS_norm[H15] = parameters.TSS_norm_H15;
	 parameters.TSS_norm[H16] = parameters.TSS_norm_H16;
	 parameters.TSS_norm[H17] = parameters.TSS_norm_H17;
	 parameters.TSS_norm[H18] = parameters.TSS_norm_H18;
	 parameters.TSS_norm[H19] = parameters.TSS_norm_H19;
	 parameters.TSS_norm[H20] = parameters.TSS_norm_H20;
	 parameters.TSS_norm[H21] = parameters.TSS_norm_H21;
	 parameters.TSS_norm[H22] = parameters.TSS_norm_H22;
	 parameters.TSS_norm[H23] = parameters.TSS_norm_H23;
  };

  equations <-
  {
   state.Q_in = interface.Q_Meas;   
	 // state.Q_in = interface.Q_Meas / 1000000; // not sure why division by 1000000 is necessary, so adapted according to previous line
   DERIV(state.Q_integral,[independent.t]) = state.Q_in;
	 state.Q_DWF_UB = parameters.Q_95_av * parameters.Q_95_norm[state.Timestep];
	 state.Qsw = IF (state.Q_in < state.Q_DWF_UB)
	 						THEN 0
	 						ELSE state.Q_in - state.Q_DWF_UB;
	 state.Help_Time = independent.t - floor(independent.t);
   state.Daytime = state.Help_Time*24; 
   state.Timestep = floor(state.Daytime) + 1;
	 DERIV(state.Q_mean,[independent.t]) = (state.Q_in - state.Q_mean) / parameters.T_Average;
	 
	 //events
	 state.event = IF (state.Q_in < state.Q_DWF_UB)
	 							THEN 0
	 							ELSE IF (state.Q_in > parameters.Q_FD_event)
	 							 		THEN 3
	 									 ELSE IF ((state.Qsw > parameters.Qsw_event9) && (state.Q_mean > previous(state.Q_mean)))
	 												THEN 9
	 									 		 ELSE 0;
	 
	 state.event8_h = IF ((state.Qsw > parameters.Qsw_event8) && (state.event < 3) && (state.proc4_NH4 > 0.6))
	 								 THEN 1
	 								 ELSE 0;
	 state.event8 = IF (((state.event8_h == 1) || ((independent.t - state.t_end_event8_h) < 0.25)) && (state.event < 3) && (state.t_event39 > 0.25))
	 							 THEN 1
	 							 ELSE 0;
	 state.t_start_event8 = IF ((previous(state.event8) == 0) && (state.event8 == 1))
	 										   THEN independent.t
				   				 		  ELSE previous(state.t_start_event8);
	 state.t_end_event8_h = IF ((previous(state.event8_h) == 1) && (state.event8_h == 0))
	 										   THEN independent.t
				   				 		  ELSE previous(state.t_end_event8_h);
	 
	 //NH4
	 state.proc1_NH4 = parameters.NH4_av * parameters.NH4_norm[state.Timestep];
   
   state.proc2_NH4 = IF (state.event == 3)
   			    	 		 THEN (parameters.alpha_NH4 * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;	
	 
	 state.proc3_NH4 = IF (state.event == 9)
   			    	 		 THEN (parameters.beta_NH4 * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;		
   
	 state.t_proc4 = independent.t - previous(state.t_start_proc4);
	 state.t_start_proc4 = IF ((previous(state.proc4_NH4) == 1) && (state.proc4_NH4 < 1))
	 										  	  THEN independent.t
				   				 		 		ELSE previous(state.t_start_proc4);
	 
	 state.proc4_NH4_h = IF ((state.event == 3) || (state.event == 9))
	 									  THEN 1
	 									  ELSE IF (previous(state.event) == 3)
	 											   THEN previous(state.proc2_NH4)
	 											   ELSE IF (previous(state.event) == 9)
	 											 		   THEN previous(state.proc3_NH4)
	 											 		   ELSE IF (state.t_proc4 < parameters.window_proc4_NH4)
	 																   THEN previous(state.proc4_NH4) + parameters.proc4_slope1_NH4 * (independent.t - previous(independent.t))
	 																   ELSE previous(state.proc4_NH4) + parameters.proc4_slope2_NH4 * (independent.t - previous(independent.t));
	 
	 state.proc4_NH4 = IF (state.proc4_NH4_h > 1)
	 									THEN 1
	 									ELSE state.proc4_NH4_h;
	 
	 state.proc5_NH4 = 1 + state.proc5_1_NH4 + state.proc5_2_NH4;
	 state.proc5_1_NH4 = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF ((independent.t - state.t_start_proc5_1) < (parameters.window_proc5_NH4 / 2))
	 												 THEN previous(state.proc5_1_NH4) - parameters.proc5_slope_NH4 * (independent.t - previous(independent.t))
	 												 ELSE IF ((independent.t - state.t_start_proc5_1) < parameters.window_proc5_NH4)
	 															THEN previous(state.proc5_1_NH4) + parameters.proc5_slope_NH4 * (independent.t - previous(independent.t))
	 															ELSE 0;
	 
	 state.proc5_2_NH4 = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF (state.t_start_proc5_2 <= state.t_start_proc5_1)
	 												 THEN 0
	 												 ELSE IF ((independent.t - state.t_start_proc5_2) < (parameters.window_proc5_NH4 / 2))
	 												 		 THEN previous(state.proc5_2_NH4) - parameters.proc5_slope_NH4 * (independent.t - previous(independent.t))
	 												 		 ELSE IF ((independent.t - state.t_start_proc5_2) < parameters.window_proc5_NH4)
	 																	 THEN previous(state.proc5_2_NH4) + parameters.proc5_slope_NH4 * (independent.t - previous(independent.t))
	 																	 ELSE 0;
   				
   state.t_start_proc5_1 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && (previous(state.t_start_proc5_2) == state.t_start_proc5_2))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_1);
	 
	 state.t_start_proc5_2 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && ((independent.t - previous(state.t_start_proc5_1)) < parameters.window_proc5_NH4) && (previous(state.proc5_2_NH4) == 0))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_2);
	 
	 state.NH4 = state.proc1_NH4 * state.proc2_NH4 * state.proc3_NH4 * state.proc4_NH4 * state.proc5_NH4;
	 
	 //CODs
	 state.proc1_CODs = parameters.CODs_av * parameters.CODs_norm[state.Timestep];
   
   state.proc2_CODs = IF (state.event == 3)
   			    	 		 THEN (parameters.alpha_CODs * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;	
	 
	 state.proc3_CODs = IF (state.event == 9)
   			    	 		 THEN (parameters.beta_CODs * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;		
   
	 state.t_proc4 = independent.t - previous(state.t_start_proc4);
	 state.t_start_proc4 = IF ((previous(state.proc4_CODs) == 1) && (state.proc4_CODs < 1))
	 										  	  THEN independent.t
				   				 		 		ELSE previous(state.t_start_proc4);
	 
	 state.proc4_CODs_h = IF ((state.event == 3) || (state.event == 9))
	 									  THEN 1
	 									  ELSE IF (previous(state.event) == 3)
	 											   THEN previous(state.proc2_CODs)
	 											   ELSE IF (previous(state.event) == 9)
	 											 		   THEN previous(state.proc3_CODs)
	 											 		   ELSE IF (state.t_proc4 < parameters.window_proc4_CODs)
	 																   THEN previous(state.proc4_CODs) + parameters.proc4_slope1_CODs * (independent.t - previous(independent.t))
	 																   ELSE previous(state.proc4_CODs) + parameters.proc4_slope2_CODs * (independent.t - previous(independent.t));
	 
	 state.proc4_CODs = IF (state.proc4_CODs_h > 1)
	 									THEN 1
	 									ELSE state.proc4_CODs_h;
	 
	 state.proc5_CODs = 1 + state.proc5_1_CODs + state.proc5_2_CODs;
	 state.proc5_1_CODs = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF ((independent.t - state.t_start_proc5_1) < (parameters.window_proc5_CODs / 2))
	 												 THEN previous(state.proc5_1_CODs) - parameters.proc5_slope_CODs * (independent.t - previous(independent.t))
	 												 ELSE IF ((independent.t - state.t_start_proc5_1) < parameters.window_proc5_CODs)
	 															THEN previous(state.proc5_1_CODs) + parameters.proc5_slope_CODs * (independent.t - previous(independent.t))
	 															ELSE 0;
	 
	 state.proc5_2_CODs = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF (state.t_start_proc5_2 <= state.t_start_proc5_1)
	 												 THEN 0
	 												 ELSE IF ((independent.t - state.t_start_proc5_2) < (parameters.window_proc5_CODs / 2))
	 												 		 THEN previous(state.proc5_2_CODs) - parameters.proc5_slope_CODs * (independent.t - previous(independent.t))
	 												 		 ELSE IF ((independent.t - state.t_start_proc5_2) < parameters.window_proc5_CODs)
	 																	 THEN previous(state.proc5_2_CODs) + parameters.proc5_slope_CODs * (independent.t - previous(independent.t))
	 																	 ELSE 0;
   				
   state.t_start_proc5_1 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && (previous(state.t_start_proc5_2) == state.t_start_proc5_2))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_1);
	 
	 state.t_start_proc5_2 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && ((independent.t - previous(state.t_start_proc5_1)) < parameters.window_proc5_CODs) && (previous(state.proc5_2_CODs) == 0))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_2);
	 
	 state.CODs = state.proc1_CODs * state.proc2_CODs * state.proc3_CODs * state.proc4_CODs * state.proc5_CODs;
	 
	 //PO4
	 state.proc1_PO4 = parameters.PO4_av * parameters.PO4_norm[state.Timestep];
   
   state.proc2_PO4 = IF (state.event == 3)
   			    	 		 THEN (parameters.alpha_PO4 * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;	
	 
	 state.proc3_PO4 = IF (state.event == 9)
   			    	 		 THEN (parameters.beta_PO4 * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;		
   
	 state.t_proc4 = independent.t - previous(state.t_start_proc4);
	 state.t_start_proc4 = IF ((previous(state.proc4_PO4) == 1) && (state.proc4_PO4 < 1))
	 										  	  THEN independent.t
				   				 		 		ELSE previous(state.t_start_proc4);
	 
	 state.proc4_PO4_h = IF ((state.event == 3) || (state.event == 9))
	 									  THEN 1
	 									  ELSE IF (previous(state.event) == 3)
	 											   THEN previous(state.proc2_PO4)
	 											   ELSE IF (previous(state.event) == 9)
	 											 		   THEN previous(state.proc3_PO4)
	 											 		   ELSE IF (state.t_proc4 < parameters.window_proc4_PO4)
	 																   THEN previous(state.proc4_PO4) + parameters.proc4_slope1_PO4 * (independent.t - previous(independent.t))
	 																   ELSE previous(state.proc4_PO4) + parameters.proc4_slope2_PO4 * (independent.t - previous(independent.t));
	 
	 state.proc4_PO4 = IF (state.proc4_PO4_h > 1)
	 									THEN 1
	 									ELSE state.proc4_PO4_h;
	 
	 state.proc5_PO4 = 1 + state.proc5_1_PO4 + state.proc5_2_PO4;
	 state.proc5_1_PO4 = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF ((independent.t - state.t_start_proc5_1) < (parameters.window_proc5_PO4 / 2))
	 												 THEN previous(state.proc5_1_PO4) - parameters.proc5_slope_PO4 * (independent.t - previous(independent.t))
	 												 ELSE IF ((independent.t - state.t_start_proc5_1) < parameters.window_proc5_PO4)
	 															THEN previous(state.proc5_1_PO4) + parameters.proc5_slope_PO4 * (independent.t - previous(independent.t))
	 															ELSE 0;
	 
	 state.proc5_2_PO4 = IF (state.event8 == 0)
	 									  THEN 0
	 									  ELSE IF (state.t_start_proc5_2 <= state.t_start_proc5_1)
	 												 THEN 0
	 												 ELSE IF ((independent.t - state.t_start_proc5_2) < (parameters.window_proc5_PO4 / 2))
	 												 		 THEN previous(state.proc5_2_PO4) - parameters.proc5_slope_PO4 * (independent.t - previous(independent.t))
	 												 		 ELSE IF ((independent.t - state.t_start_proc5_2) < parameters.window_proc5_PO4)
	 																	 THEN previous(state.proc5_2_PO4) + parameters.proc5_slope_PO4 * (independent.t - previous(independent.t))
	 																	 ELSE 0;
   				
   state.t_start_proc5_1 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && (previous(state.t_start_proc5_2) == state.t_start_proc5_2))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_1);
	 
	 state.t_start_proc5_2 = IF ((previous(state.event8) == 0) && (state.event8 == 1) && ((independent.t - previous(state.t_start_proc5_1)) < parameters.window_proc5_PO4) && (previous(state.proc5_2_PO4) == 0))
	 										 	 THEN independent.t
				   				 			 ELSE previous(state.t_start_proc5_2);
	 
	 state.PO4 = state.proc1_PO4 * state.proc2_PO4 * state.proc3_PO4 * state.proc4_PO4 * state.proc5_PO4;
	 
	 //COD
	 state.proc1_COD = parameters.COD_av * parameters.COD_norm[state.Timestep];
   
   state.proc2_COD = IF (state.event == 3)
   			    	 		 THEN (parameters.alpha_COD * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;	
	 
	 state.proc3_COD = IF (state.event == 9)
   			    	 		 THEN (parameters.beta_COD * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;		
   
	 state.proc4_COD = IF ((state.event == 3) || (state.event == 9))
	 									THEN 1
	 									ELSE IF (previous(state.event) == 3)
	 											 THEN previous(state.proc2_COD)
	 											 ELSE IF (previous(state.event) == 9)
	 											 		 THEN previous(state.proc3_COD)
	 											 		 ELSE IF (previous(state.proc4_COD) >= 1)
	 																 THEN 1
	 																 ELSE IF (state.t_proc4 < parameters.window_proc4_COD)
	 																 		 THEN previous(state.proc4_COD) + parameters.proc4_slope1_COD * (independent.t - previous(independent.t))
	 																 		 ELSE previous(state.proc4_COD) + parameters.proc4_slope2_COD * (independent.t - previous(independent.t));
	 
	 state.proc6_COD_h = IF (((state.event == 3) || (state.event == 9)) && (previous(state.event) < 3))
	 									  THEN IF (state.t_event39 < parameters.proc6_t1_COD)
	 											   THEN 0
	 											   ELSE IF (state.t_event39 < parameters.proc6_t2_COD)
	 														  THEN parameters.peak_COD_low
	 														  ELSE parameters.peak_COD_high
	 									  ELSE IF (((state.event == 3) || (state.event == 9)) && (state.Q_in > parameters.Q_proc6))
	 											   THEN previous(state.proc6_COD_h) - parameters.proc6_slope1_COD * (independent.t - previous(independent.t))
	 											   ELSE previous(state.proc6_COD_h) - parameters.proc6_slope2_COD * (independent.t - previous(independent.t));
	 
	 state.proc6_COD = IF (state.proc6_COD_h < 0)
	 									THEN 0
	 									ELSE state.proc6_COD_h;
	 
	 state.t_end_event39 = IF (((previous(state.event) == 3) || (previous(state.event) == 9)) && (state.event < 3))
	 											THEN independent.t
				   				 		 ELSE previous(state.t_end_event39);
	 state.t_event39 = independent.t - state.t_end_event39;
	 
	 state.proc7_COD_h = IF (((state.event == 3) || (state.event == 9)) || (state.t_event39 < 1.5))
	 										THEN 0
	 										ELSE IF (state.event8 == 1)
	 												 THEN IF ((independent.t - state.t_start_event8) < 0.1333)
	 															THEN previous(state.proc7_COD_h) + parameters.proc7_slope1_COD * (independent.t - previous(independent.t))
	 															ELSE previous(state.proc7_COD_h) - parameters.proc7_slope2_COD * (independent.t - previous(independent.t))
	 												 ELSE 0;
	 
	 state.proc7_COD = IF (state.proc7_COD_h < 0)
	 									THEN 0
	 									ELSE state.proc7_COD_h;
	 
	 state.COD = state.proc1_COD * state.proc2_COD * state.proc3_COD * state.proc4_COD + state.proc6_COD + state.proc7_COD;
	 
	 //TSS
	 state.proc1_TSS = parameters.TSS_av * parameters.TSS_norm[state.Timestep];
   
   state.proc2_TSS = IF (state.event == 3)
   			    	 		 THEN (parameters.alpha_TSS * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;	
	 
	 state.proc3_TSS = IF (state.event == 9)
   			    	 		 THEN (parameters.beta_TSS * (state.Q_DWF_UB / state.Q_in - 1) + 1)
							  		 ELSE 1;		
   
	 state.proc4_TSS = IF ((state.event == 3) || (state.event == 9))
	 									THEN 1
	 									ELSE IF (previous(state.event) == 3)
	 											 THEN previous(state.proc2_TSS)
	 											 ELSE IF (previous(state.event) == 9)
	 											 		 THEN previous(state.proc3_TSS)
	 											 		 ELSE IF (previous(state.proc4_TSS) >= 1)
	 																 THEN 1
	 																 ELSE IF (state.t_proc4 < parameters.window_proc4_TSS)
	 																 		 THEN previous(state.proc4_TSS) + parameters.proc4_slope1_TSS * (independent.t - previous(independent.t))
	 																 		 ELSE previous(state.proc4_TSS) + parameters.proc4_slope2_TSS * (independent.t - previous(independent.t));
	 
	 state.proc6_TSS_h = IF (((state.event == 3) || (state.event == 9)) && (previous(state.event) < 3))
	 									  THEN IF (state.t_event39 < parameters.proc6_t1_TSS)
	 											   THEN 0
	 											   ELSE IF (state.t_event39 < parameters.proc6_t2_TSS)
	 														  THEN parameters.peak_TSS_low
	 														  ELSE parameters.peak_TSS_high
	 									  ELSE IF (((state.event == 3) || (state.event == 9)) && (state.Q_in > parameters.Q_proc6))
	 											   THEN previous(state.proc6_TSS_h) - parameters.proc6_slope1_TSS * (independent.t - previous(independent.t))
	 											   ELSE previous(state.proc6_TSS_h) - parameters.proc6_slope2_TSS * (independent.t - previous(independent.t));
	 
	 state.proc6_TSS = IF (state.proc6_TSS_h < 0)
	 									THEN 0
	 									ELSE state.proc6_TSS_h;
	 
	 state.t_end_event39 = IF (((previous(state.event) == 3) || (previous(state.event) == 9)) && (state.event < 3))
	 											THEN independent.t
				   				 		 ELSE previous(state.t_end_event39);
	 state.t_event39 = independent.t - state.t_end_event39;
	 
	 state.proc7_TSS_h = IF (((state.event == 3) || (state.event == 9)) || (state.t_event39 < 1.5))
	 										THEN 0
	 										ELSE IF (state.event8 == 1)
	 												 THEN IF ((independent.t - state.t_start_event8) < 0.1333)
	 															THEN previous(state.proc7_TSS_h) + parameters.proc7_slope1_TSS * (independent.t - previous(independent.t))
	 															ELSE previous(state.proc7_TSS_h) - parameters.proc7_slope2_TSS * (independent.t - previous(independent.t))
	 												 ELSE 0;
	 
	 state.proc7_TSS = IF (state.proc7_TSS_h < 0)
	 									THEN 0
	 									ELSE state.proc7_TSS_h;
	 
	 state.TSS = state.proc1_TSS * state.proc2_TSS * state.proc3_TSS * state.proc4_TSS + state.proc6_TSS + state.proc7_TSS;

   interface.Outflow[H2O_sew] = -interface.Q_Meas/parameters.SewSpecificVolume[H2O_sew];
   interface.Outflow[COD_part] = -(state.COD - state.CODs) * state.Q_in;
   interface.Outflow[COD_sol] = -state.CODs * state.Q_in;
   interface.Outflow[X_TSS_sew] = -state.TSS * state.Q_in;
   interface.Outflow[NH4_sew] = -state.NH4 * state.Q_in;
   interface.Outflow[PO4_sew] = -state.PO4 * state.Q_in;
   
 };

:};

#endif // WWTP_BASE_INFLUENT_QEVENTS