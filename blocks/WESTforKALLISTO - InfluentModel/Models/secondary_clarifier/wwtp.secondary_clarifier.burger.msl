/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 8$ EURE
 * $Date: 15. maj 2012 13:31:54$
 *
 ******************************************************************************/
 
// The model was develped by Burger et al. (2012) and implemented at BIOMATH (Ghent University).

#ifndef WWTP_SECONDARY_CLARIFIER_BURGER
#define WWTP_SECONDARY_CLARIFIER_BURGER

#ifdef StandardCategoryModels

CLASS Burger
  (* icon = "secondary_clarifier" *)
  "Layered clarifier model by Burger with Vesilind settling function" SPECIALISES PhysicalDAEModelType :=
  {:
    comments <- "A model for a secondary settler by Burger with Vesilind settling";
    interface <-
    {
		OBJ Inflow (* terminal = "in_1" *) "Inflow" : InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
		OBJ Overflow (* terminal = "out_1" *) "Overflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
		OBJ Underflow (* terminal = "out_2" *) "Underflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
		OBJ Sludge_Blanket_Height (* terminal = "out_3" *) "Height of the sludge blanket" : Length := {: causality <- "COUT" ; group <- "Measurement data" :};
		OBJ TSS(* terminal = "out_3" *) "Total suspended solids concentration" : Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
		OBJ V_Clarifier (* terminal = "out_3" *)"Volume measurement data" : Volume := {: causality <- "COUT" ; group <- "Measurement data" :};
		OBJ PumpingEnergy (* terminal = "out_3" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
		// manipulated vars
		OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : FlowRate := {: causality <- "CIN" ; value <- 200 ; group <- "Operational" :}; 
    };
    parameters <-
    {
		OBJ WWTPSpecificVolume (* hidden = "1" *) "Vector containing specific volume for all the components" : SpecificVolumeVector;
		OBJ g (* hidden = "1" *) "Gravity acceleration on earth (m/d2)": Acceleration := {: value <- 7.32312576e10 :};
		OBJ PI (* hidden = "1" *) "PI": Real := {: value <- 3.141592653 :};
		OBJ A "Surface area of the clarifier" : Area := {: value <- 1500 ; group <- "Dimension" :};
		OBJ H "Height of the clarifier" : Length := {: value <- 4 ; group <- "Dimension" :};
		OBJ F_TSS_COD "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
		OBJ X_Lim "Minimum concentration in sludge blanket" : Concentration := {: value <- 900 ; group <- "Settling" :};
		//Vesilind settling parameters
		OBJ v0 "Maximum theoretical settling velocity" : Velocity := {: value <- 474 ; group <- "Settling" :};
		OBJ r_V "Settling parameter" : SpecificVolume := {: value <- 0.000576 ; group <- "Settling" :};
		//Pumping Energy
		OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate" : Ratio := {: value <- 0.04 ; group <- "Energy":};
		//~~~ NEW PARAMETERS FOR THE BURGER MODEL
		// Compression
		OBJ Comp_ON "Switch on/off compression": Integer :={: value <- 0 ; group <- "Compression" :};
		OBJ Alpha "Effective solids stress parameter" : BurgerSolidsStress := {: value <- 0.8 ; group <- "Compression" :};
		OBJ Rhos "Solid density": Density := {: value <- 1050000 ; group <- "Compression" :};
		OBJ Rhof "Fluid density": Density := {: value <- 998000 ; group <- "Compression" :};
		OBJ C_crit "Gel point" : Concentration := {: value <- 6000 ; group <- "Compression" :};
		//Godunov flux
		OBJ C_min (* hidden = "1" *) "Minimum packing concentration" : Concentration := {: value <- 0 ; group <- "Settling" :};
		OBJ C_max (* hidden = "1" *) "Maximum packing concentration" : Concentration := {: value <- 20000 ; group <- "Settling" :};
		OBJ TOL (* hidden = "1" *) "Tolerance level to calculate concentration with maximum settling flux" : Fraction := {: value <- 1e-10 ; group <- "Settling" :};
		//Dispersion
		OBJ Disp_ON "Switch on/off dispersion": Integer :={: value <- 0 ; group <- "Dispersion" :};
		OBJ a_mix "Dispersion parameter" : Length := {: value <- 0.4 ; group <- "Dispersion" :};
		OBJ b_mix "Dispersion parameter" : BurgerDispersion := {: value <- 0.00001 ; group <- "Dispersion" :}; 
    };
    state <-
    {
		//New vector classes created (in wwtp.general.msl): BurgerConcentrationVector, BurgerVelocityVector, BurgerArealFluxVector, BurgerLengthFluxVextor
		OBJ IndexOfSludgeBlanket (* hidden = "1" *) "Index of top layer of sludge blanket" : Integer ;
		OBJ v_Up (* hidden = "1" *) "Upward bulk velocity" : Velocity ;
		OBJ v_Dn (* hidden = "1" *) "Downward bulk velocity" : Velocity ;
		OBJ v_S (* hidden = "1" *) "Static settling velocity" : BurgerVelocityVector;
		OBJ J_Up (* hidden = "1" *) "Upward sludge flux" : BurgerArealFluxVector;
		OBJ J_Dn (* hidden = "1" *) "Downward sludge flux" : BurgerArealFluxVector;
		OBJ J_G (* hidden = "1" *) "Static sludge flux" : BurgerArealFluxVector;
		OBJ J_G_Help (* hidden = "1" *) "Static sludge flux": BurgerArealFluxVector;
		OBJ InFluxPerComponent (* hidden = "1" *) "Vector containing incoming fluxes for all the components" : MassFluxVector;
		OBJ SolidFlux_In (* hidden = "1" *) "Sum of massfluxes of particulates" : MassFlux ;
		OBJ SolidConcentration (* hidden = "1" *) "Sum of concentrations of particulates" : Concentration ;
		OBJ V_Layer (* hidden = "1" *)	"Volume of the layer" : Volume ;
		OBJ H_Layer (* hidden = "1" *) "Height of layer" : Length ;
		OBJ SolidFlux_Out (* hidden = "1" *) "Fraction of influx that goes to the effluent" : MassFlux ;
		OBJ SolidFlux_Under (* hidden = "1" *) "Fraction of influx that goes to the underflow" : MassFlux ;
		//
		OBJ Q_In "Influent flow rate" : FlowRate := {: group <- "Operational" :};
		OBJ Q_Out "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
		OBJ Q_Under_Actual "Actual underflow rate" : FlowRate := {: group <- "Operational" :};
		OBJ H_S "Height of sludge blanket" : Length := {: group <- "Settling" :};
		OBJ X_In "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
		OBJ X_Out "Effluent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
		OBJ X_Under "Underflow suspended solids concentration" : Concentration := {: group <- "Concentration" :};
		OBJ X_Layer "Vector containing concentration of particulates for all the layers" : BurgerConcentrationVector := {: group <- "Concentration" :};
		//Pumping Energy
		OBJ Integ_PE (* hidden = "1" *)"Integral Pumping energy" : ElectricalEnergy ;
		//~~~ NEW STATE VARS FOR THE BURGER MODEL
		// Compression
		OBJ D_comp (* hidden = "1" *) "Primitive of compression function" : BurgerLengthFluxVector;
		//Godunov flux
		OBJ Fbk_max (* hidden = "1" *) "Maximum flux" : ArealFlux := {: group <- "Settling" :};
		OBJ C_fbk_max (* hidden = "1" *) "Concentration corresponding to maximal settling flux" : Concentration := {: group <- "Settling" :};
		//Dispersion
		OBJ d_mix (* hidden = "1" *) "Dispersion function" : BurgerDiffusivityVector;
		OBJ z "Height in clarifier" : BurgerLengthVector;
    };
    initial <-
    {
		parameters.WWTPSpecificVolume[IndexOfSolvent] := 1e-6;
		state.V_Layer = parameters.A * (parameters.H / NrOfLayersBurger);
		state.H_Layer = parameters.H / (NrOfLayersBurger);
		//Godunov flux
		//Compute maximum of batch settling flux (for Veslind settling function)
		state.C_fbk_max = MSLUBurgerCHat(parameters.v0, parameters.r_V, parameters.C_min, parameters.C_max, parameters.TOL) ;
		state.Fbk_max = parameters.v0 * exp(-parameters.r_V * state.C_fbk_max) * state.C_fbk_max ;
		//Dispersion
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusFourBurger}: state.z[Layer_Index] =
		  	fabs(state.H_Layer * (Layer_Index - IndexOfFeedLayerBurger)) ; };
    };
    independent <-
    {
		OBJ t "Time" : Time := {: group <- "Time" :}; 
    };
    equations <-
    {
		state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under) THEN state.Q_In
			ELSE interface.Q_Under ;
		state.v_Dn = state.Q_Under_Actual / parameters.A ;
		
		{ FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}: state.InFluxPerComponent[Comp_Index] =
		  	SUMOVER In_Terminal IN {SelectByType(interface,InWWTPTerminal)}: In_Terminal[Comp_Index] ; };

		state.Q_In = (parameters.WWTPSpecificVolume[IndexOfSolvent] * state.InFluxPerComponent[IndexOfSolvent]);
		state.Q_Out = state.Q_In - state.Q_Under_Actual ;

		#ifdef CalculateTSSComponent
		{ state.SolidFlux_In = SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
		  	state.InFluxPerComponent[Comp_Index] * parameters.F_TSS_COD ; };
		#endif

		#ifdef UseTSSComponent
		state.SolidFlux_In =  state.InFluxPerComponent[IndexOfTSSComponent];
		#endif

		state.X_In = IF (state.Q_In == 0) THEN 0
			ELSE state.SolidFlux_In / state.Q_In ;
		{state.SolidConcentration = ( SUMOVER Layer_Index IN {3 .. NrOfLayersPlusTwoBurger}:
			state.X_Layer[Layer_Index]) / NrOfLayersBurger; };
		state.v_Up = state.Q_Out / parameters.A ;
		
		//Settling velocity (calculated with Vesilind function)
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusFourBurger}: state.v_S[Layer_Index] =
		  	parameters.v0 * exp(-parameters.r_V * state.X_Layer[Layer_Index]) ; }; 
		//Calculate flux limitation: Godunov flux limitation instead of Takacs flux limitation
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusFourBurger}: state.J_G_Help[Layer_Index] =
		  	state.v_S[Layer_Index] * state.X_Layer[Layer_Index] ; };
	
		//Algorithm 3.1
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusThreeBurger}: state.J_G[Layer_Index] =
		  	IF (state.X_Layer[Layer_Index]<state.X_Layer[Layer_Index+1]) THEN MSLUGetMin2(state.J_G_Help[Layer_Index],state.J_G_Help[Layer_Index+1])
			   ELSE IF (((state.C_fbk_max-state.X_Layer[Layer_Index])*(state.C_fbk_max-state.X_Layer[Layer_Index+1]))<0) THEN state.Fbk_max
			   ELSE MSLUGetMax2(state.J_G_Help[Layer_Index],state.J_G_Help[Layer_Index+1]) ; };
	
		//Calculate convective fluxes
		{ FOREACH Layer_Index IN {2 .. IndexOfFeedLayerBurger}: state.J_Up[Layer_Index] =
		  	state.v_Up * state.X_Layer[Layer_Index] ; };
		{ FOREACH Layer_Index IN {IndexOfFeedLayerBurger .. NrOfLayersPlusFourBurger}: state.J_Dn[Layer_Index] =
		  	state.v_Dn * state.X_Layer[Layer_Index] ; };

		//Compression
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusFourBurger}: state.D_comp[Layer_Index] =
		       IF (state.X_Layer[Layer_Index] < parameters.C_crit) THEN 0
		 	   ELSE
			   parameters.Comp_ON * parameters.Alpha * pow(24*3600,2) *parameters.Rhos * parameters.v0 *
			   (exp(-parameters.r_V * state.X_Layer[Layer_Index])-exp(-parameters.r_V * parameters.C_crit)) /
			   (-parameters.r_V * parameters.g * (parameters.Rhos-parameters.Rhof)) ; };

		//Dispersion
		{ FOREACH Layer_Index IN {1 .. NrOfLayersPlusFourBurger}: state.d_mix[Layer_Index] =
		  	IF (state.z[Layer_Index] < (parameters.b_mix*state.Q_In))
			THEN parameters.Disp_ON * parameters.a_mix/parameters.A * state.Q_In *
			  pow(cos(parameters.PI*state.z[Layer_Index]/(2*parameters.b_mix*state.Q_In)),2)
			ELSE 0 ; };

		// Differential equations - 4 extra layers: 2 in effluent zone + 2 in underflow zone
		//Extra layers in effluent zone
		{ DERIV(state.X_Layer[1],[independent.t]) = (1 / state.H_Layer) * (state.J_Up[2]) - (state.Q_Out / state.V_Layer) * state.X_Layer[1] ; };
		{ DERIV(state.X_Layer[2],[independent.t]) = (1 / state.H_Layer) * (state.J_Up[3] - state.J_Up[2] - state.J_G[2] + (1 / state.H_Layer) *(state.D_comp[3]- state.D_comp[2])); };
		
		//First layer IN the settler
		{ DERIV(state.X_Layer[3],[independent.t]) = IF (3 == IndexOfFeedLayerBurger)
		  	THEN (1 / state.H_Layer) * (- state.J_Up[3] - state.J_Dn[3] + state.J_G[2] - state.J_G[3] +
			(1 / state.H_Layer) *(state.d_mix[3]*(state.X_Layer[4]-state.X_Layer[3]) + state.D_comp[4]+state.D_comp[2]-2*state.D_comp[3])) + 
			(1 / state.V_Layer) * state.SolidFlux_In
			ELSE (1 / state.H_Layer) * (state.J_Up[4] - state.J_Up[3] + state.J_Dn[2] - state.J_Dn[3] + state.J_G[2] -
			state.J_G[3] + (1 / state.H_Layer) *(state.d_mix[3]*((state.X_Layer[4]-state.X_Layer[3])) + state.D_comp[4]+state.D_comp[2] -
			2*state.D_comp[3])); };
		
		//Layers 2 to N-1 IN settler
		{ FOREACH Layer_Index IN {4 .. NrOfLayersPlusOneBurger}: DERIV(state.X_Layer[Layer_Index],[independent.t]) =
		  	IF (Layer_Index == IndexOfFeedLayerBurger) THEN (1 / state.H_Layer) * (- state.J_Up[Layer_Index] - state.J_Dn[Layer_Index] +
			   state.J_G[Layer_Index-1] - state.J_G[Layer_Index] + (1 / state.H_Layer) *(
			   state.d_mix[Layer_Index] *(state.X_Layer[Layer_Index+1] - state.X_Layer[Layer_Index]) 
			   - state.d_mix[Layer_Index-1] * (state.X_Layer[Layer_Index] - state.X_Layer[Layer_Index-1]) + 
			   state.D_comp[Layer_Index+1] + state.D_comp[Layer_Index-1] - 2*state.D_comp[Layer_Index])) +
			   (1 / state.V_Layer) * state.SolidFlux_In
			   ELSE (1 / state.H_Layer) * (state.J_Up[Layer_Index+1] - state.J_Up[Layer_Index] + state.J_Dn[Layer_Index-1] - state.J_Dn[Layer_Index] +
			   state.J_G[Layer_Index-1] - state.J_G[Layer_Index] + (1 / state.H_Layer) *(
				state.d_mix[Layer_Index]*(state.X_Layer[Layer_Index+1] - 
			   state.X_Layer[Layer_Index]) - state.d_mix[Layer_Index-1] *(state.X_Layer[Layer_Index]-state.X_Layer[Layer_Index-1]) +
			   state.D_comp[Layer_Index+1]+state.D_comp[Layer_Index-1]-2*state.D_comp[Layer_Index])) ; };

		//Last layer IN settler
		{ DERIV(state.X_Layer[NrOfLayersPlusTwoBurger],[independent.t]) = (1 / state.H_Layer) * (state.J_Dn[NrOfLayersPlusOneBurger] - state.J_Dn[NrOfLayersPlusTwoBurger] +
		  		state.J_G[NrOfLayersPlusOneBurger] - state.J_G[NrOfLayersPlusTwoBurger] + (1 / state.H_Layer) * (
				-state.d_mix[NrOfLayersPlusOneBurger] * (state.X_Layer[NrOfLayersPlusTwoBurger] - state.X_Layer[NrOfLayersPlusOneBurger]) + 
				state.D_comp[NrOfLayersPlusThreeBurger] + state.D_comp[NrOfLayersPlusOneBurger] - 2*state.D_comp[NrOfLayersPlusTwoBurger])) ; };
		
		//Extra layers in underflow zone
		{ DERIV(state.X_Layer[NrOfLayersPlusThreeBurger],[independent.t]) = (1 / state.H_Layer) * (state.J_Dn[NrOfLayersPlusTwoBurger] - state.J_Dn[NrOfLayersPlusThreeBurger] +
		  		state.J_G[NrOfLayersPlusTwoBurger] + (1 / state.H_Layer) *(state.D_comp[NrOfLayersPlusTwoBurger]-state.D_comp[NrOfLayersPlusThreeBurger])) ; };
		{ DERIV(state.X_Layer[NrOfLayersPlusFourBurger],[independent.t]) = (1 / state.H_Layer) * (state.J_Dn[NrOfLayersPlusThreeBurger] - state.J_Dn[NrOfLayersPlusFourBurger]); };

		state.X_Out = IF (state.Q_Out == 0)	THEN 0 ELSE state.X_Layer[1] ;
		state.X_Under = IF (state.Q_Under_Actual == 0) THEN 0 ELSE state.X_Layer[NrOfLayersPlusFourBurger] ;
		
		// Calculation of the height of the sludge blanket
		state.IndexOfSludgeBlanket = MSLUFindThreshold(ref(state.X_Layer[1]),NrOfLayersPlusFourBurger,parameters.X_Lim) ;
		state.H_S = (NrOfLayersPlusTwoBurger - state.IndexOfSludgeBlanket + 1) * state.H_Layer ;

		// Calculation of the fluxes of all components in the effluent
		state.SolidFlux_Out = state.X_Out * state.Q_Out ;
		{ FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent} : interface.Overflow[Comp_Index] =
		  		IF (state.Q_In == 0) THEN 0	ELSE - state.InFluxPerComponent[Comp_Index] * (state.Q_Out / state.Q_In) ; };
		{ FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}: interface.Overflow[Comp_Index] =
		  		IF (state.SolidFlux_In == 0) THEN 0 ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Out ; };

		// Calculation of the fluxes of all components in the underflow
		state.SolidFlux_Under = state.X_Under * state.Q_Under_Actual;
		interface.Underflow[IndexOfSolvent] = - state.Q_Under_Actual / parameters.WWTPSpecificVolume[IndexOfSolvent] ;
		{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. IndexOfLastSolubleComponent}: interface.Underflow[Comp_Index] =
		  		- state.InFluxPerComponent[Comp_Index] - interface.Overflow[Comp_Index] ; };
		{ FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}: interface.Underflow[Comp_Index] =
		  		IF (state.Q_In == 0) THEN 0 ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Under ; };

		// Here the assumption is made that if state.Q_In differs from zero that also state.SolidFlux_In differs from zero (i.e. The water always contains particulate COD)
		// calculation of DataTerminal
		interface.Sludge_Blanket_Height = state.H_S ;
		interface.TSS = state.SolidConcentration ;
		interface.V_Clarifier = parameters.A * parameters.H ;  
		//
		// Pumping Energy
		DERIV(state.Integ_PE,[independent.t])=  state.Q_Under_Actual;
		interface.PumpingEnergy = parameters.F_Energy_FlowRate * state.Integ_PE ;
    };

 :};
#endif // StandardCategoryModels

#endif // WWTP_SECONDARY_CLARIFIER_BURGER

