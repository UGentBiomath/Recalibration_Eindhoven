/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 * This model is the same as the OnOff_FF_aer model in the IUWS model library, 
 * and was developed by Lorenzo Benedetti
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_DO_FFCONTROL
#define WWTP_BASE_CONTROLLERS_DO_FFCONTROL

 CLASS OnOff_FF_aer
  (* icon = "controller" *)
  "On-off controller for feed-forward aeration control"
  SPECIALISES
  PhysicalDAEModelType :=
  {:
    comments <- "A model for an on-off feed-forward controller";
    interface <-
    {
      OBJ y_M (* terminal = "in_1" *) "Sensor measured output" : 
               Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1" *) "Controlled variable" : 
               Real := {: causality <- "COUT" ; group <- "Control action" :};
	    OBJ ON (* terminal = "in_2"; manip = "1" *) "Additional criterion for on/off" :
	 					  Real := {: causality <- "CIN"  ; group <- "Operational":};
    };

    parameters <-
    {
    OBJ y_S "Threshold for on/off" : Real := {: value <- 7000000  ; group <- "Operational":};
    OBJ u_max	"Max out"	: Real := {: value <- 10000 ; group <- "Operational" :};
    OBJ u_min	"Min out"	: Real := {: value <- 0 ; group <- "Operational" :};
	  OBJ change_rate "Rate of change" : Real := {: value <- 1000000 ; group <- "Operational" :};
    };

    independent <- 
    { 
     OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
    {
     OBJ TS (* hidden = "1" *) "Time step" : Time := {: group <- "Operational" :};  
	   OBJ help_u (* hidden = "1" *) "Previous u help variable" : Real;
	   OBJ help_u_h (* hidden = "1" *) "Previous u help variable" : Real;
    };

    equations <-
    {
    state.TS = independent.t - previous(independent.t); 
	  state.help_u = interface.u;
    state.help_u_h = IF ((interface.y_M > parameters.y_S) && (interface.ON == 1))
                     THEN previous(state.help_u) + parameters.change_rate * state.TS
                     ELSE previous(state.help_u) - parameters.change_rate * state.TS;
	  interface.u = IF (state.help_u_h > parameters.u_max)
				  			  THEN parameters.u_max
				  			  ELSE IF (state.help_u_h < parameters.u_min)
				  	   				THEN parameters.u_min
					   				  ELSE state.help_u_h;
    };
 :};
 
 #endif //WWTP_BASE_CONTROLLERS_DO_FFCONTROL