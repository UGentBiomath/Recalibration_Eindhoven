/*******************************************************************************
 *
 * Developped by BIOMATH for Kallisto
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_PIDANTIWINDUPSATURATION
#define WWTP_BASE_CONTROLLERS_PIDANTIWINDUPSATURATION

CLASS PID_AntiWindup_Saturation
  (* icon = "controller" *)
  "PID controller with anti-windup and saturation"
  SPECIALISES
  PhysicalDAEModelType :=
  {:
    comments <- "A model for a proportional-integral controller with anti-windup and saturation";
    interface <-
    {
      OBJ y_M (* terminal = "in_1" *) "Sensor measured output" : 
               Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1" *) "Controlled variable" : 
               Real := {: causality <- "COUT" ; group <- "Control action" :};
      OBJ y_S  (* terminal = "in_2"; manip = "1" *) "Setpoint value for controlled variable" : 
     				Real := {: causality <- "CIN" ; value <- 2 ; group <- "Operational" :};
      OBJ K_P  (* terminal = "in_2"; manip = "1" *) "Factor of proportionality" : 
     				Real := {: causality <- "CIN" ; value <- 25 ; group <- "Operational" :};
      OBJ T_I  (* terminal = "in_2"; manip = "1" *) "Integral time" : 
      			 Time := {: causality <- "CIN" ; value <- 0.1 ; group <- "Operational" :};
      OBJ T_D (* terminal = "in_2"; manip = "1" *) "Derivative time" : 
						 Time := {: causality <- "CIN" ; value <- 0.2531080923 ; group <- "Operational" :};
      OBJ T_t (* terminal = "in_2"; manip = "1" *) "Tracking time (anti-windup)" : 
						 Time := {: causality <- "CIN" ; value <- 0.1 ; group <- "Operational" :};
      OBJ u0 (* terminal = "in_2"; manip = "1" *) "No error action" : 
     				Real := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};
      OBJ u_Min  (* terminal = "in_2"; manip = "1" *) "Minimum control action" : 
     				Real := {: causality <- "CIN" ;value <- 0 ; group <- "Operational" :};
      OBJ u_Max  (* terminal = "in_2"; manip = "1" *) "Maximum control action" : 
     				Real := {: causality <- "CIN" ;value <- 1000 ; group <- "Operational" :};

    };

    parameters <-
    {
//     OBJ y_S "Setpoint value for controlled variable" : Real := {: value <- 2 ; group <- "Operational" :};
//     OBJ K_P "Factor of proportionality" : Real := {: value <- 25 ; group <- "Operational" :};
//     OBJ T_I "Integral time" : Time := {: value <- 0.1 ; group <- "Operational" :};
//     OBJ T_D "Derivative time" : Time := {: value <- 0.2531080923 ; group <- "Operational" :};
//     OBJ T_t "Tracking time (anti-windup)" : Time := {: value <- 0.1 ; group <- "Operational" :};
//     OBJ u0 "No error action" : Real := {: value <- 50 ; group <- "Operational" :};
//     OBJ u_Min "Minimum control action" : Real := {: value <- 0 ; group <- "Operational" :};
//     OBJ u_Max "Maximum control action" : Real := {: value <- 1000 ; group <- "Operational" :};
    };

    independent <- 
    { 
     OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
    {
     OBJ e "Error" : PhysicalQuantityType := {: group <- "Operational" :};
     OBJ Integ_e "Integral of error": PhysicalQuantityType := {: group <- "Operational" :};
     OBJ help (* hidden = "1" *) " Previous time help variable" : Time;
     OBJ u_Unsat (* hidden = "1" *) "Unsaturated output of the proportional-integral control action" : Real;
     OBJ u_Sat (* hidden = "1" *) "Saturated output of the proportional-integral control action" : Real;
     OBJ Deriv_e  "Derivative of error" : Real := {: group <- "Operational" :};
//     OBJ Prev_t (* hidden = "1" *) : Time;
    };

    equations <-
    {
     state.e = interface.y_S - interface.y_M;

     state.help = independent.t;

	 state.Deriv_e = IF (previous(state.help) != state.help)
				   	 THEN (previous(state.e) - state.e) / (previous(state.help) - state.help)
				   	 ELSE previous(state.Deriv_e);	

     DERIV(state.Integ_e, [independent.t]) = (interface.K_P * state.e / interface.T_I) + ((state.u_Sat - state.u_Unsat) / interface.T_t) ;

     state.u_Unsat = interface.u0 + interface.K_P * state.e + state.Integ_e + interface.K_P * interface.T_D * state.Deriv_e; 

	 state.u_Sat = IF(state.u_Unsat < interface.u_Min)
                   THEN (interface.u_Min)
                   ELSE
                     IF (state.u_Unsat > interface.u_Max)
                     THEN interface.u_Max
                     ELSE state.u_Unsat;
	 
     interface.u = state.u_Sat;
    };
  :};

 
#endif // WWTP_BASE_CONTROLLERS_PIDANTIWINDUPSATURATION

