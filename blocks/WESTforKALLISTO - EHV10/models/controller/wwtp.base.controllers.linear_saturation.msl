/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_LINEARSATURATION
#define WWTP_BASE_CONTROLLERS_LINEARSATURATION

CLASS linear_Saturation
  (* icon = "controller" *)
  "Linear controller with saturation"
  SPECIALISES
  PhysicalDAEModelType :=
  {:
    comments <- "A model for a linear controller with saturation";
    interface <-
    {
      OBJ y_M (* terminal = "in_1" *) "Sensor measured output" : 
               Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1" *) "Controlled variable" : 
               Real := {: causality <- "COUT" ; group <- "Control action" :};
    };

    parameters <-
    {
     OBJ a "u=a+b*y_M" : Real := {: value <- 0 ; group <- "Operational" :};
     OBJ b "u=a+b*y_M" : Real := {: value <- 1 ; group <- "Operational" :};
     OBJ u_Min "Minimum control action" : Real := {: value <- 0 ; group <- "Operational" :};
     OBJ u_Max "Maximum control action" : Real := {: value <- 1000 ; group <- "Operational" :};
    };

    independent <- 
    { 
     OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
    {
     OBJ uhelp (* hidden = "1" *) "Help variable to calculate the proportional-integral control action" : Real;
    };

    equations <-
    {
     state.uhelp = parameters.a + parameters.b * interface.y_M; 

     interface.u = IF(state.uhelp < parameters.u_Min)
                   THEN (parameters.u_Min)
                   ELSE
                     IF (state.uhelp > parameters.u_Max)
                     THEN parameters.u_Max
                     ELSE state.uhelp;
    };
  :};

 
#endif // WWTP_BASE_CONTROLLERS_LINEARSATURATION

