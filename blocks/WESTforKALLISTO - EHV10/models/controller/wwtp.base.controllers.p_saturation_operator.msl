/*******************************************************************************
 *
 * Developped by BIOMATH and Lorenzo Benedetti for Kallisto
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_PSATURATION_OPERATOR
#define WWTP_BASE_CONTROLLERS_PSATURATION_OPERATOR

CLASS Operator
    (* icon = "controller" ; is_default = "" *)
    "P controller with saturation"
  
  // Purpose:	
  // Limit excursion of a signal.	
  // Description:	
  // block mimicking the behaviour of an operator
  // between the set point limits the operator does nothing
  // outside the set point limits the operator acts proportional to the error
  // the actions are limited by the saturation limits (physical constraints)
  
  
    SPECIALISES
    PhysicalDAEModelType :=
    {:
      comments <- "A model for a proportional controller with saturation";
      interface <-
      {
        OBJ y_M (* terminal = "in_1" *) "Sensor measured output" : 
                 Concentration := {: causality <- "CIN" ; group <- "Measurement data" :};
		    //OBJ y_S_Lower (* terminal = "in_2" *) "Lower limit setpoint value for controlled variable" : 
        //         Concentration := {: causality <- "CIN" ; group <- "Operational" :};
		    //OBJ y_S_Upper (* terminal = "in_2" *) "Upper limit setpoint value for controlled variable" : 
        //         Concentration := {: causality <- "CIN" ; group <- "Operational" :};
        OBJ u (* terminal = "out_1" *) "Controlled variable" : 
                 FlowRate := {: causality <- "COUT" ; group <- "Control action" :};
      };
  
      parameters <-
      {
       OBJ K_P " Factor of proportionality" : Real := {: value <- 1 ; group <- "Operational" :};
       OBJ u0 "No error action" : FlowRate := {: value <- 1 ; group <- "Operational" :};
       OBJ u_Min "Minimum control action" : FlowRate := {: value <- 0 ; group <- "Operational" :};
       OBJ u_Max "Maximum control action" : FlowRate := {: value <- 1000 ; group <- "Operational" :};
       // u_Max >= u_Min
       OBJ y_S "Setpoint value for controlled variable" : Concentration := {: value <- 3500 ; group <- "Operational" :};
       OBJ t_win "Control window" : Time := {: value <- 0.04166666667 ; group <- "Operational" :};
	     OBJ t_ini "Initial time" : Time := {: value <- 0 ; group <- "Control" :};
	     OBJ gain "Multiplyer of set-points, for GSA" : Real := {: value <- 1 ; group <- "Operational" :};
      };
  
      independent <- 
      { 
      OBJ t "Time" : Time := {: group <- "Time" :}; 
      };
  
      state <-
      {
       OBJ uhelp (* hidden = "0" *) "Help variable to calculate the proportional control action" : Real;
	     OBJ uhelp_h (* hidden = "0" *) "Help variable to calculate the proportional control action" : Real;
       OBJ Prev_t (* hidden = "0" *) "Help variable to calculate the begin of each period" : Time ;
      };
  
      initial <-
      {
      state.Prev_t = parameters.t_ini;
      };
   
      equations <-
      {
  
       state.Prev_t = IF	(independent.t - previous(state.Prev_t) < (parameters.t_win))
  			 	 				 THEN previous(state.Prev_t)
  			 						ELSE previous(state.Prev_t) + parameters.t_win;
  
       state.uhelp_h = IF (previous(state.uhelp) < 0)
  	 			   				 THEN 0
  				   					ELSE IF (independent.t - previous(state.Prev_t) < parameters.t_win)
  	 			   	 					 THEN previous(state.uhelp)
  				   	 						ELSE IF(interface.y_M < parameters.y_S * parameters.gain)
                     	   			 THEN previous(state.uhelp) - parameters.K_P * (parameters.y_S * parameters.gain - interface.y_M)
                     	   			 ELSE IF (interface.y_M > parameters.y_S * parameters.gain)
                         	 				  THEN previous(state.uhelp) + parameters.K_P * (interface.y_M - parameters.y_S * parameters.gain)
                         	 					ELSE previous(state.uhelp);
                         	
                          //ELSE IF(interface.y_M < interface.y_S_Lower * parameters.gain)
                     	   	//		 THEN previous(state.uhelp) - parameters.K_P * (interface.y_S_Lower * parameters.gain - interface.y_M)
                     	   	//		 ELSE IF (interface.y_M > interface.y_S_Upper * parameters.gain)
                         	// 				  THEN previous(state.uhelp) + parameters.K_P * (interface.y_M - interface.y_S_Upper * parameters.gain)
                         	// 					ELSE previous(state.uhelp);
  
      state.uhelp = IF(state.uhelp_h < parameters.u_Min)
                    THEN (parameters.u_Min)
                    ELSE IF (state.uhelp_h > parameters.u_Max)
                      	 THEN parameters.u_Max
                        ELSE state.uhelp_h;
					   
	    interface.u = state.uhelp;
     };
  
   :};
   
#endif // WWTP_BASE_CONTROLLERS_PSATURATION_OPERATOR