/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 * Author Youri Amerlinck
 *
 ******************************************************************************/

#ifndef WWTP_BASE_PRIMARY_CLARIFIER_SimpleRemovalFractions
#define WWTP_BASE_PRIMARY_CLARIFIER_SimpleRemovalFractions

// #ifdef ASM2dChemTemp
 CLASS SimpleRemovalFractions
 (* icon = "primary_clarifier" *)
 "Simple model for primary clarifiers with different removal efficiencies for different fractions"

// The model of Tay (1982) is based on a relation between the difference in particulate matter 
// between influent and effluent depending on the hydraulic retention time.	
// X_Out = X_i / ( 1 + V / ( Q_In * T_A ) ) ;	
// with T_A : Half removal time (i.e. the necessary retention time to remove half of the incoming 
// particulate matter. Attention should be paid to the calculation of the retention time : 
// it should not be the instantaneous retention time but the averaged retention time.	
//
// The model was modified to allow different removal efficiencies for different COD fractions
//
// Literature :	
// Tay J. (1982), Development of a settling model for primary settling tanks, Wat. Res. 16, 1413 - 1417.	

 EXTENDS WWTPAtomicModelWithoutVolume WITH
 {:
   comments <- "A model for a primary settler by Tay";
   interface <-
   { 
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "Underflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : 
    		 FlowRate := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};  
    OBJ E_R_SI_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_I at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.0; group <- "Settling" :};
    OBJ E_R_SA_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_A at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.0; group <- "Settling" :};
    OBJ E_R_SF_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_F at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.0; group <- "Settling" :};
    OBJ E_R_SNO_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_NO at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.0; group <- "Settling" :};
    OBJ E_R_SNH_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_NH at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.0; group <- "Settling" :};
    OBJ E_R_SPO_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for S_PO at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XS_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_S at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XI_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_I at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XH_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_H at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XAUT_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_AUT at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XPAO_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_PAO at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XPP_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_PP at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XPHA_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for X_PHA at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XII_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for inert inorganic particulates at dry weather flows" : 
	 		Real := {: causality <- "CIN" ; value <- 0.90; group <- "Settling" :};
};

  parameters <- 
   { 
//    OBJ T_A "Half removal time" : Time := {: value <- 0.125 ; group <- "Settling" :};
   // note that the volume used here is NOT based on any mass balance
   // hence, it is declared as a parameter
    OBJ V_Clar "Volume of the clarifier" : Volume := {: value <- 500 ; group <- "Dimension" :};
// Calculation of outflow TSS
	OBJ i_TSS_X_I	"TSS to X_I ratio"
	: ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
	OBJ i_TSS_X_S	"TSS to X_S ratio"
	: ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
	OBJ i_TSS_BM	"TSS to biomass ratio for X_H, X_PAO, X_AUT"
	: ConversionFactor	:= {: value <- 0.9 ; group <- "Composition parameters" :}; 
	 
// buffer for averaging retention time
   };

  state <-
   {
    OBJ Q_Out "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Under_Actual "Underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ f_Out_DW (* hidden = "1" *) "Fraction of the influent flux going to the overflow during dry weather" : Fraction;
    OBJ Help_X_In (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Out (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Under (* hidden = "1" *) "" : MassFlux;
//    OBJ thelp (* hidden = "1" *) "Previous time help variable" : Time;
    OBJ E_R_COD "Removal efficiency for COD" : Fraction := {: group <- "Settling" :};
    OBJ E_R_XCOD "Removal efficiency for XCOD" : Fraction := {: group <- "Settling" :};
    OBJ E_R_TSS "Removal efficiency for TSS" : Fraction := {: group <- "Settling" :};

    OBJ X_In "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_In_Calc "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Out "Effluent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Under "Underflow suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ f_Out (* hidden = "0" *) "Fraction of the influent flux going to the overflow" : Fraction ;
    OBJ COD_In (* hidden = "1" *) "Incoming flux of COD" : MassFlux;
    OBJ COD_Out (* hidden = "1" *) "Outgoing flux of COD" : MassFlux;
    OBJ XCOD_In (* hidden = "1" *) "Incoming flux of XCOD" : MassFlux;
    OBJ XCOD_Out (* hidden = "1" *) "Outgoing flux of XCOD" : MassFlux;
// buffer for averaging retention time
//    OBJ Avg_Q (* hidden = "0" *) "Average influent flow rate" : MassFlux;
   };

    initial <-  
    {
   };
   
  equations <-
   {


     // Soluble components (including water itself) are split into the two
     // streams (effluent and underflow)

    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under)
				   		   THEN 0
//				   		   THEN state.Q_In
				   		   ELSE interface.Q_Under; 

    state.Q_Out = state.Q_In - state.Q_Under_Actual;

	
//    state.f_Out := IF (state.Q_In <= parameters.Q_Under)
    state.f_Out := IF (state.Q_In <= 0)
                   THEN 0
 			 	   ELSE (state.Q_In - state.Q_Under_Actual) / state.Q_In ;



   		
#ifdef ASM2dChemTemp
      interface.Outflow[H2O] = - state.InFluxPerComponent[H2O] * state.f_Out ;
      interface.Outflow[S_I] = - state.InFluxPerComponent[S_I] * state.f_Out *(1.0 - interface.E_R_SI_DW);
	      interface.Outflow[S_O] = - state.InFluxPerComponent[S_O] * state.f_Out ;
      interface.Outflow[S_N2] = - state.InFluxPerComponent[S_N2] * state.f_Out ;
      interface.Outflow[S_F] = - state.InFluxPerComponent[S_F] * state.f_Out *(1.0 - interface.E_R_SF_DW);
      interface.Outflow[S_A] = - state.InFluxPerComponent[S_A] * state.f_Out *(1.0 - interface.E_R_SA_DW);
      interface.Outflow[S_Al] = - state.InFluxPerComponent[S_Al] * state.f_Out ;
      interface.Outflow[S_NO] = - state.InFluxPerComponent[S_NO] * state.f_Out *(1.0 - interface.E_R_SNO_DW);
      interface.Outflow[S_PO] = - state.InFluxPerComponent[S_PO] * state.f_Out *(1.0 - interface.E_R_SPO_DW);
      interface.Outflow[S_NH] = - state.InFluxPerComponent[S_NH] * state.f_Out *(1.0 - interface.E_R_SNH_DW);
      interface.Outflow[S_ALK] = - state.InFluxPerComponent[S_ALK] * state.f_Out ;
	 #endif // ASM2dChemTemp

    {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
     interface.Underflow[Comp_Index] = - (state.InFluxPerComponent[Comp_Index]
     + interface.Outflow[Comp_Index]) ;};

     // X_Out = X_i / (1 + V / (Qmean * T_A)) has to be transformed to an equation using fluxes !!
     // Outflow = Q_Out * X_Out = a flux 
     //         = Q_Out * X_i / (1 + V_Clar / (Qmean * T_A))
     //         = Q_Out * (Inflow / Q_In) / (1 + V_Clar / (Qmean * T_A))
     //         = Inflow * Q_Out / (Q_In * (1 + V_Clar / (Qmean * T_A)))  ==> see equations below
     // Underflow = Inflow - Outflow

// outflow calculated per component
// first all the COD components + X_PP as this is an internal storage of phosphate in the biomass.	
	 
	#ifdef ASM2dChemTemp
      interface.Outflow[X_I] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_I] * state.f_Out *(1.0 - interface.E_R_XI_DW);
      interface.Outflow[X_S] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_S] * state.f_Out *(1.0 - interface.E_R_XS_DW);
      interface.Outflow[X_H] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_H] * state.f_Out *(1.0 - interface.E_R_XH_DW);
      interface.Outflow[X_PAO] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_PAO] * state.f_Out *(1.0 - interface.E_R_XPAO_DW);
      interface.Outflow[X_PP] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_PP] * state.f_Out *(1.0 - interface.E_R_XPP_DW);
      interface.Outflow[X_PHA] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_PHA] * state.f_Out *(1.0 - interface.E_R_XPHA_DW);
      interface.Outflow[X_AUT] = IF (state.Q_In == 0)
															 THEN 0
															 ELSE - state.InFluxPerComponent[X_AUT] * state.f_Out *(1.0 - interface.E_R_XAUT_DW);
	 #endif // ASM2dChemTemp


// then the non-COD components	 
// At this point X_MEOH and X_MEP get the same removal efficiency as X_I_i
// this might be OK for X_MEP but is questionable for X_MEOH but at this point we don't model P dosing before the PST
    {FOREACH Comp_Index IN {X_MEOH .. X_I_i}:
      interface.Outflow[Comp_Index] = 
			IF (state.Q_In == 0)
			THEN 0
			ELSE - state.InFluxPerComponent[Comp_Index] * state.f_Out *(1.0 - interface.E_R_XII_DW);
     };

	interface.Outflow[X_TSS] = interface.Outflow[X_I] * parameters.i_TSS_X_I
							  + interface.Outflow[X_S] * parameters.i_TSS_X_S
							  + interface.Outflow[X_H] * parameters.i_TSS_BM
							  + interface.Outflow[X_PAO] * parameters.i_TSS_BM
							  + interface.Outflow[X_PP] * 3.23
							  + interface.Outflow[X_PHA] * 0.6
							  + interface.Outflow[X_AUT] * parameters.i_TSS_BM
							  + interface.Outflow[X_MEOH] * 1.0
							  + interface.Outflow[X_MEP] * 1.0
							  + interface.Outflow[X_I_i] * 1.0;
	 
    {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
     interface.Underflow[Comp_Index] = - (state.InFluxPerComponent[Comp_Index] 
     + interface.Outflow[Comp_Index]);};

     // Calculation of suspended solids concentrations
     // in the effluent and underflow streams
#ifdef CalculateTSSComponent
    state.Help_X_In = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
                     (interface.Inflow[Comp_Index]));

    {state.X_In = IF (state.Q_In == 0)
			THEN 0
			ELSE state.Help_X_In / state.Q_In * parameters.F_TSS_COD;
     };

     state.Help_X_Out = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:(- interface.Outflow[Comp_Index]));

    {state.X_Out = IF (state.Q_In <= interface.Q_Under)
			 	   THEN state.Help_X_Out * parameters.F_TSS_COD / state.Q_In
//			 	   THEN 0
	 		 	   ELSE state.Help_X_Out * parameters.F_TSS_COD / (state.Q_In - interface.Q_Under);
     };

     state.Help_X_Under = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:(- interface.Underflow[Comp_Index]));
 
     {state.X_Under = 
    		IF (state.Q_Under_Actual <= 0)
			THEN 0
			ELSE state.Help_X_Under / state.Q_Under_Actual * parameters.F_TSS_COD ;
     };
/*
    {state.X_Under = 
    		IF (state.Q_In <= parameters.Q_Under)
			THEN
		  		IF (state.Q_In == 0)
		  		THEN 0
		  		ELSE
               state.Help_X_Under / state.Q_In * parameters.F_TSS_COD
			ELSE 
		  		 IF (parameters.Q_Under == 0)
		  		 THEN 0
		  		 ELSE
               state.Help_X_Under / parameters.Q_Under * parameters.F_TSS_COD ;
     };
*/
#endif // CalculateTSSComponent

#ifdef UseTSSComponent

    state.X_In = IF (state.Q_In == 0)
			   	 THEN 0
				 ELSE interface.Inflow[IndexOfTSSComponent] / state.Q_In;

    state.X_In_Calc = (interface.Inflow[X_I] * parameters.i_TSS_X_I
							  + interface.Inflow[X_S] * parameters.i_TSS_X_S
							  + interface.Inflow[X_H] * parameters.i_TSS_BM
							  + interface.Inflow[X_PAO] * parameters.i_TSS_BM
							  + interface.Inflow[X_PP] * 3.23
							  + interface.Inflow[X_PHA] * 0.6
							  + interface.Inflow[X_AUT] * parameters.i_TSS_BM
							  + interface.Inflow[X_MEOH] * 1.0
							  + interface.Inflow[X_MEP] * 1.0
							  + interface.Inflow[X_I_i] * 1.0) / state.Q_In;
				 
    state.X_Out = IF (state.Q_In <= interface.Q_Under)
				  THEN - interface.Outflow[IndexOfTSSComponent] / (state.Q_In)
//				  THEN 0
				  ELSE - interface.Outflow[IndexOfTSSComponent] / (state.Q_In - interface.Q_Under);

     state.X_Under = 
    		IF (state.Q_Under_Actual <= 0)
			THEN 0
			ELSE - interface.Underflow[IndexOfTSSComponent] / state.Q_Under_Actual;
     
/*
    state.X_Under = IF (state.Q_In <= parameters.Q_Under) 
			  THEN
  			   IF (state.Q_In == 0)
  		         THEN 0
		   	   ELSE - interface.Underflow[IndexOfTSSComponent] / (state.Q_In)
			  ELSE 
  			   IF (parameters.Q_Under == 0)
  		         THEN 0
		   	   ELSE - interface.Underflow[IndexOfTSSComponent] / (parameters.Q_Under);
*/
#endif // UseTSSComponent

// check for removal efficiencies of TSS and COD
	   // state.E_R_TSS = (1 - state.X_Out / state.X_In);
	   state.E_R_TSS = (1 - state.X_Out / state.X_In_Calc);
	   
       state.COD_Out = - interface.Outflow[S_I] - interface.Outflow[S_A] - interface.Outflow[S_F]
	   				   - interface.Outflow[X_I] - interface.Outflow[X_S] - interface.Outflow[X_H]
	   				   - interface.Outflow[X_PAO] - interface.Outflow[X_PAO] - interface.Outflow[X_AUT];
       state.COD_In = interface.Inflow[S_I] + interface.Inflow[S_A] + interface.Inflow[S_F]
	   				   + interface.Inflow[X_I] + interface.Inflow[X_S] + interface.Inflow[X_H]
	   				   + interface.Inflow[X_PAO] + interface.Inflow[X_PAO] + interface.Inflow[X_AUT];
	  
	   state.E_R_COD = (1 - state.COD_Out / state.COD_In);

       state.XCOD_Out = - interface.Outflow[X_I] - interface.Outflow[X_S] - interface.Outflow[X_H]
	   				   - interface.Outflow[X_PAO] - interface.Outflow[X_PAO] - interface.Outflow[X_AUT];
       state.XCOD_In = interface.Inflow[X_I] + interface.Inflow[X_S] + interface.Inflow[X_H]
	   				   + interface.Inflow[X_PAO] + interface.Inflow[X_PAO] + interface.Inflow[X_AUT];
	  
	   state.E_R_XCOD = (1 - state.XCOD_Out / state.XCOD_In);

    }; 
  :};



//#endif // ASM2dChemTemp

#endif // WWTP_BASE_PRIMARY_CLARIFIER_SimpleRemovalFractions
