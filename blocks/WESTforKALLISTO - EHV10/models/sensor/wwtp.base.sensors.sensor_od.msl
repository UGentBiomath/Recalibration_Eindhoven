/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SENSORS_SENSOROD
#define WWTP_BASE_SENSORS_SENSOROD

#if (defined ASM1Temp || defined ASM2dModTemp || defined ASM2dChemTemp || defined ASM3Temp || defined ASM3P_EAWAG)

CLASS OD
  (* icon = "sensor_od" *)
  "sensor"
  EXTENDS Sensor WITH 
  {:
    comments <- "A model for a sensor measuring Oxygen Demand - only implemented for ASM2dTemp";

    interface <-
    {
      OBJ y_M (* terminal = "out_2" *) "Sensor measured output" :
         Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
    };
    
	  state <-
    {
      OBJ OD_C  "Oxygen demand for carbon" : ChemOxDemand := {: group <- "Influent characterization" :};
	    OBJ OD_NH  "oxygen demand for ammonia" : ChemOxDemand := {: group <- "Influent characterization" :};	 
	};
	
    parameters <-
    {
#ifdef ASM1Temp
     OBJ f_P      "Fraction Of Biomass Converted To Inert Matter"
      : FractOfBiomassLeadingToPartProd := {:value<- 0.20 ; group <- "Stoichiometry" :};
#endif // ASM1Temp
#if (defined ASM2dModTemp || defined ASM2dChemTemp)
     OBJ f_X_I "Fraction of inert COD generated in biomass lysis"
      : Fraction := {:value <- 0.10 ; group <- "Stoichiometry" :};
#endif // ASM2dModTemp or ASM2dChemTemp
#if (defined ASM3Temp || defined ASM3P_EAWAG)
     OBJ f_X_I      "Production of X_I in aerobic endogenous respiration" 
      : FractOfBiomassLeadingToPartProd := {:value <- 0.2 ; group <- "Stoichiometry" :};
#endif // ASM3Temp or ASM3P_EAWAG
     OBJ F_BOD_COD "Conversion factor BOD/COD" : Fraction := {:value<- 0.65 ; group <- "Conversion factors":};
     };

    equations <-
    {
#ifdef ASM1Temp
	   interface.y_M = IF (state.Q_In == 0)
			     THEN 0
			     ELSE parameters.F_BOD_COD * 
				    (interface.Inflow[S_S] + interface.Inflow[X_S] 
				     + (1 - parameters.f_P) * (interface.Inflow[X_BH] + interface.Inflow[X_BA]) )
				    / state.Q_In ; 
	 
#endif // ASM1Temp

#if (defined ASM2dModTemp || defined ASM2dChemTemp)
	  state.OD_C = (interface.Inflow[S_A] + interface.Inflow[S_F] + interface.Inflow[X_S] + interface.Inflow[X_PHA])/ state.Q_In ;
	  state.OD_NH = 4.57*interface.Inflow[S_NH]/ state.Q_In;
	  
	  interface.y_M = IF (state.Q_In == 0)
			      	  THEN 0
			      	  ELSE (state.OD_C + state.OD_NH);
	     
	
#endif // ASM2dModTemp or ASM2dChemTemp

#ifdef ASM3Temp
	  interface.y_M = IF (state.Q_In == 0)
			      THEN 0
			      ELSE parameters.F_BOD_COD *
				     (interface.Inflow[S_S] + interface.Inflow[X_S] + interface.Inflow[X_STO]
					+ (1 - parameters.f_X_I) * (interface.Inflow[X_A] + interface.Inflow[X_H])) 
				     / state.Q_In ; 
	
#endif // ASM3Temp

#ifdef ASM3P_EAWAG
	  interface.y_M = IF (state.Q_In == 0)
			      THEN 0
			      ELSE parameters.F_BOD_COD *
				     (interface.Inflow[S_S] + interface.Inflow[X_S] + interface.Inflow[X_STO] + interface.Inflow[X_PHA]
					+ (1 - parameters.f_X_I) * (interface.Inflow[X_A] + interface.Inflow[X_H] + interface.Inflow[X_PAO])) 
				     / state.Q_In ; 
	
#endif // ASM3P_EAWAG
	};
    :};
#endif // (defined ASM1Temp || defined ASM2dModTemp || defined ASM2dChemTemp || defined ASM3Temp || defined ASM3P_EAWAG)


#endif // WWTP_BASE_SENSORS_SENSOROD
