/*******************************************************************************
 *
 * Developped by BIOMATH in the frame of the Kallisto project
 *
 ******************************************************************************/

#ifndef WWTP_BASE_BUFFERTANK_PUMPEDVOLUMEBUFFERTANKEINDHOVEN
#define WWTP_BASE_BUFFERTANK_PUMPEDVOLUMEBUFFERTANKEINDHOVEN

 CLASS PumpedVolumeBuffer_Eindhoven
 (* icon = "buffer_tank" ; is_default = "true" *)
 "A class for buffertanks with a pumped variable volume"
 EXTENDS WWTPAtomicModelWithVolume WITH
 {:
  interface <-
   {
     OBJ Inflow (* terminal = "in_1" *) "Inflow" : 
       InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
     OBJ Outflow (* terminal = "out_1" *) "Outflow" : 
       OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
     OBJ Q_Pump (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Desired effluent flow rate" : 
	 	  FlowRate := {: causality <- "CIN" ; value <- 100; group <- "Operational" :} ;   
		};

  parameters <-
   {
     OBJ V_Max "Maximum volume of the tank" : Volume := {: group <- "Operational" :};
     OBJ V_Min "Minimum volume of the tank" : Volume := {: group <- "Operational" :}; 
   };

  state <-
   {
     OBJ Q_Out "Actual effluent flow rate" : FlowRate := {: group <- "Operational" :};
   };

  equations <-
   {
    state.V = SUMOVER Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
    (parameters.WWTPSpecificVolume[Comp_Index]*state.M[Comp_Index]);

    // The concentration of each component is just the mass
    // of that component divided by the total volume

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
     state.C[Comp_Index] = IF (state.V == 0)
				   THEN 0
				   ELSE state.M[Comp_Index]/state.V;
     };

    state.Q_Out = IF (state.V < parameters.V_Min)
                  THEN 0
                  ELSE IF ((state.V < parameters.V_Max) && (state.Q_In == 0))
                       THEN interface.Q_Pump
                       ELSE IF ((state.V < parameters.V_Max) && (state.Q_In > 0))
                            THEN 0
                            ELSE IF ((state.V >= parameters.V_Max) && (state.Q_In > 0))
							     THEN state.Q_In
								 ELSE interface.Q_Pump;    

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow[Comp_Index] =
       - state.C[Comp_Index] * state.Q_Out ;};
   };
 :};

#endif // WWTP_BASE_BUFFERTANK_PUMPEDVOLUMEBUFFERTANKEINDHOVEN

// ***********************************************************************
