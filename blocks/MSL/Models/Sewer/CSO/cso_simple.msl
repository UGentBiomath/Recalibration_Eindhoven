/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 2. december 2016 14:37:28$
 *
 ******************************************************************************/


#ifndef SEWER_CSO_CSO_SIMPLE
#define SEWER_CSO_CSO_SIMPLE


CLASS CSO_Simple (* icon = "two_splitter" *) "CSO"
EXTENDS SewerAtomicModelNoVolume WITH
{:

  comments <- "..";

  interface <-
  {
    OBJ Outflow1 (* terminal = "out_1" *) "Outflow1": OutSewTerminal := {: causality <- "COUT"; group <- "Outflow":};
    OBJ Outflow2 (* terminal = "out_2" *) "Outflow2": OutSewTerminal := {: causality <- "COUT"; group <- "Outflow":};
  };

  parameters <-
  {
    OBJ SplittingPotential "" : Real:= {: value <- 1.1:} ;
    OBJ Q_Out2 "Outflow 2 rate" : FlowRate := {: value <- 5000.0:} ;
  };

  state <-
  {
    OBJ Q_Out1 "Outflow 1 rate" : FlowRate ;
    OBJ f_Out2 (* hidden = "1" *) "Fraction of the influent flux going to outflow2" : Fraction ;
    OBJ Q_Out2_Help (* hidden = "1" *) "Help variable for outflow2 rate" : FlowRate ;
  };

  equations <-
  {
    state.Q_Out2_Help = IF(parameters.Q_Out2 > state.Q_In) THEN state.Q_In
      ELSE ((parameters.SplittingPotential - 1.0) / 4.0) * state.Q_In
      + ((5.0 - parameters.SplittingPotential) / 4.0) 
      * parameters.Q_Out2 ;
  
    state.Q_Out1 = IF(parameters.Q_Out2 > state.Q_In) THEN 0
      ELSE (state.Q_In - state.Q_Out2_Help);
    
    state.f_Out2 = IF (state.Q_In == 0) THEN 0
      ELSE state.Q_Out2_Help / state.Q_In ;
    
    interface.Outflow2[H2O] = - state.Q_Out1 / 1E-06 ;
    
    interface.Outflow1[H2O] = - state.Q_Out2_Help / 1E-06 ;
    
    {FOREACH Comp_Index IN {2 .. Kosim1NrOfComponents}:
        interface.Outflow2[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (1.0 - state.f_Out2) ;};
    
    {FOREACH Comp_Index IN {2 .. Kosim1NrOfComponents}:
        interface.Outflow1[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * state.f_Out2 ;};
  };

:};
   

#endif // SEWER_CSO_CSO_SIMPLE