/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 2. december 2016 14:37:27$
 *
 ******************************************************************************/

#ifndef SEWER_SENSORS
#define SEWER_SENSORS


CLASS SensorSewer SPECIALISES PhysicalDAEModelType :=
{:

  interface <-
  {
  	OBJ Inflow (* terminal = "in_1" *) "Inflow" : InSewTerminal := {: causality <- "CIN" ; group <- "Influent":};
  	OBJ Outflow (* terminal = "out_1" *) "Outflow" : OutSewTerminal := {: causality <- "COUT" ; group <- "Effluent":};
  };
  
  independent <- 
  {
    OBJ t "Time": Time ;
  };
  
  state <-
  {
    OBJ InFluxPerComponent (* hidden = "1" *) "Vector containing incoming fluxes for all the components" : Kosim1MassFluxVector;
    OBJ Q_In (* is_favorite = "1" *) "Influent flow rate" : FlowRate := {: group <- "Operational" :};
  };
  
  equations <-
  {
    {FOREACH Comp_Index IN {1 .. Kosim1NrOfComponents}: state.InFluxPerComponent[Comp_Index] =
      SUMOVER sew_term_index IN {SelectByType(interface,InSewTerminal)}: (sew_term_index[Comp_Index]) ;};
    
    {FOREACH Comp_Index IN {1 .. Kosim1NrOfComponents}: interface.Outflow[Comp_Index] =
      - state.InFluxPerComponent[Comp_Index] ;}; 
    
    state.Q_In = 0.000001 * state.InFluxPerComponent[H2O]
  };

:};


#include "Sewer/sensors/sensor.flow.msl"
#include "Sewer/sensors/sensor.multi.msl"


#endif //SEWER_SENSORS