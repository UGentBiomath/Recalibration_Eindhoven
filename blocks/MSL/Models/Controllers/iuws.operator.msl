/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 2. december 2016 15:21:58$
 *
 ******************************************************************************/

#ifndef IUWS_CONTROLLERS_OPERATOR
#define IUWS_CONTROLLERS_OPERATOR

CLASS Operator
  (* icon = "Controller" *)
  "P controller with saturation"
  // Purpose: Limit excursion of a signal	
  // Description: block mimicking the behaviour of an operator
  // Between the lower- and upper limits, the operator does nothing;
  // outside of the range, the operator acts proportionally to the error
  // Actions are limited by the saturation limits (physical constraints)
  EXTENDS SewerControllers_Base WITH 
  {:

  comments <- "A model for a proportional controller with saturation";

  interface <-
  {
   OBJ y_S_Lower (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Lower limit for the setpoint of the controlled variable" : Real := {: causality <- "CIN" ; value <- 1.0; group <- "Operational" :};
   OBJ y_S_Upper (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Upper limit for the setpoint of the controlled variable" : Real := {: causality <- "CIN" ; value <- 3.0; group <- "Operational" :};
  };

  parameters <-
  {
   OBJ K_P (* is_favorite = "1" *) "Factor of proportionality" : Real := {: value <- 1.0 ; group <- "Operational" :};
   OBJ u0 "No error action": Real := {: value <- 1.0 ; group <- "Operational" :};
   OBJ u_Min "Minimum control action" : Real := {: value <- 0.0 ; group <- "Operational" :};
   OBJ u_Max "Maximum control action" : Real := {: value <- 1000.0 ; group <- "Operational" :}; // u_Max >= u_Min
   OBJ t_win "Control window" : Time := {: value <- 0.04166666667 ; group <- "Operational" :};
   OBJ t_ini "Initial time" : Time := {: value <- 0.0 ; group <- "Control" :};
   OBJ gain "Multiplier of set-points, for GSA" : Real := {: value <- 1.0 ; group <- "Operational" :};
  };

  state <-
  {
   OBJ uhelp (* hidden = "1" *) "Help variable to calculate the proportional control action" : Real;
   OBJ uhelp_h (* hidden = "1" *) "Help variable to calculate the proportional control action" : Real;
   OBJ Prev_t (* hidden = "1" *) "Help variable to calculate the begin of each period" : Time ;
  };

  initial <-
  {
   state.Prev_t = parameters.t_ini;
  };
  
  equations <-
  {
   state.Prev_t = IF (independent.t - previous(state.Prev_t) < (parameters.t_win))
   		THEN previous(state.Prev_t)
		ELSE previous(state.Prev_t) + parameters.t_win ;
  
   state.uhelp_h = IF (previous(state.uhelp) < 0.0) THEN 0.0
		ELSE IF (independent.t - previous(state.Prev_t) < parameters.t_win)
			 THEN previous(state.uhelp)
			 ELSE IF(interface.y_M < interface.y_S_Lower * parameters.gain)
			 	  THEN previous(state.uhelp) - parameters.K_P * (interface.y_S_Lower * parameters.gain - interface.y_M)
				  ELSE IF (interface.y_M > interface.y_S_Upper * parameters.gain)
				  	   THEN previous(state.uhelp) + parameters.K_P * (interface.y_M - interface.y_S_Upper * parameters.gain)
					   ELSE previous(state.uhelp) ;
  
   state.uhelp = IF(state.uhelp_h < parameters.u_Min)
   		THEN (parameters.u_Min)
		ELSE IF (state.uhelp_h > parameters.u_Max)
			 THEN parameters.u_Max
			 ELSE state.uhelp_h ;
					   
   interface.u = state.uhelp;
 };
  
  :};

#endif // IUWS_CONTROLLERS_OPERATOR
