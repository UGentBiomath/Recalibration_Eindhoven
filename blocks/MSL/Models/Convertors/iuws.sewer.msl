/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 2. december 2016 15:21:58$
 *
 ******************************************************************************/

 
#ifndef IUWS_CONVERTORS_SEWER
#define IUWS_CONVERTORS_SEWER


 CLASS SewCtoF
 (* icon = "Connector" *)
 "Concentration to Flux conversion model"
 EXTENDS Convertors_Sewer_Base WITH
 {:
 
  comments <- "Concentration to Flux conversion model" ;

  interface <-
  {
   OBJ Inflow (* terminal = "in_1" *) "Inflow" : SewerConcTerminal := {: causality <- "CIN"; group <- "Influent" :};
   OBJ Outflow (* terminal = "out_1" *) "Outflow" : OutSewTerminal := {: causality <- "COUT"; group <- "Effluent" :};
  };

  equations <-
  {
   interface.Outflow[H2O] = - interface.Inflow[H2O] / parameters.SewSpecificVolume[H2O] ;
   
   {FOREACH Comp_Index IN {2 .. Kosim1NrOfComponents}:
   		interface.Outflow[Comp_Index] = - interface.Inflow[Comp_Index] * interface.Inflow[H2O] ; };
  };
      
 :};


 CLASS SewFtoC
 (* icon = "Connector" *)
 "Flux to Concentration conversion model"
 EXTENDS Convertors_Sewer_Base WITH
 {:
 
  comments <- "Flux to Concentration conversion model" ;

  interface <-
  {
   OBJ Inflow (* terminal = "in_1" *) "Inflow" : InSewTerminal := {: causality <- "CIN"; group <- "Influent" :};
   OBJ Outflow (* terminal = "out_1" *) "Outflow" : SewerConcTerminal := {: causality <- "COUT"; group <- "Effluent" :};
  };

  state <-
  {
   OBJ Q_In "Influent flow rate" : FlowRate := {: group <- "Operational" :};
   OBJ InFluxPerComponent (* hidden = "1" *) "Vector containing incoming fluxes for all components" : Kosim1MassFluxVector;
  };

  equations <-
  {
   interface.Outflow[H2O] = interface.Inflow[H2O] * parameters.SewSpecificVolume[H2O] ; 
   
   {FOREACH Comp_Index IN {1 .. Kosim1NrOfComponents}: state.InFluxPerComponent[Comp_Index] = 
// original		SUMOVER SewerTerminal IN {SelectByType(interface,SewerTerminal)}: (SewerTerminal[Comp_Index]) ; };
		SUMOVER sew_term_index IN {SelectByType(interface,InSewTerminal)}: (sew_term_index[Comp_Index]) ; };
		
   state.Q_In = state.InFluxPerComponent[H2O] * parameters.SewSpecificVolume[H2O] ; 
   
   {FOREACH Comp_Index IN {2 .. Kosim1NrOfComponents}:
		interface.Outflow[Comp_Index] = IF (state.Q_In == 0) THEN 0.0
			ELSE interface.Inflow[Comp_Index] / state.Q_In ;};

  };

 :};

 
#endif // IUWS_CONVERTORS_SEWER