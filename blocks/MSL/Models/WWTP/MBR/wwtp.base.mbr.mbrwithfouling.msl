/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 22. september 2020 14:54:01$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_INTERNAL_MEMBRANEMBRWITHFOULING
#define WWTP_BASE_INTERNAL_MEMBRANE_MBRWITHFOULING

 CLASS MBRWithFouling
 (* icon = "mbr"; is_default = "true" *)
 "MBR model extended with the computation of the TMP"
 EXTENDS InternalFoulingMembraneVolumeClass WITH
 {:
  comments <- "A model for an MBR unit, subjected to fouling (the trans-membrane pressure is computed)";
  interface <-  
  {
   OBJ Kla (* terminal = "in_2"; manip = "1" *) "Oxygen transfer coefficient" : OxygenTransferCoefficient 
     := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};   
    OBJ OTR_Energy (* terminal = "in_2"; manip = "1" *) "Oxygen transfer rate per energy input" : TransferRateEnergy := {: causality <- "CIN" ; value <- 1800 ; group <- "Operational" :}; 
   OBJ Temp (* terminal = "in_2"; manip = "1"; is_favorite = "1" *)  "Temperature of the activated sludge"
  : CelsiusTemperature  := {: causality <- "CIN" ; value <- 15 ; group <- "Operational" :}; 
   OBJ AerationEnergy (* terminal = "out_2" *)"Aeration energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ AerationPower (* terminal = "out_2" *) "Aeration power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
   OBJ MixingEnergy (* terminal = "out_2" *)"Mixing energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ MixingPower (* terminal = "out_2" *) "Mixing power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
   OBJ PumpingEnergy (* terminal = "out_2" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ PumpingPower (* terminal = "out_2" *) "Pumping power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
  };   
  
  parameters <-
  {
    OBJ Period "Period over which the costs are calculated" : Time := {: value <- 1 ; group <- "Miscellaneous":};
// MIXING ENERGY
  OBJ ME_unit "Energy requirement per unit of volume for mixing in a AS tank" : Real := {: value <- 0.005; group <- "Mixing energy":};
  OBJ Kla_Min "Lowest kLa value that ensures adequate mixing" : OxygenTransferCoefficient :={: value <- 20.0; group <- "Mixing energy":};
    OBJ Mixing_When_Aerated "Mixing activity during aeration" : Integer := {: value <- 0 ; interval <- {: lowerBound <- 0; upperBound <- 1:}; group <- "Mixing energy":};
// PUMPING ENERGY
    OBJ n_Pump_Membrane "Pump efficiency of the membrane pump" : Fraction := {: value <- 0.75 ; group <- "Energy":};
    OBJ n_Pump_Backwash "Pump efficiency of the backwash pump" : Fraction := {: value <- 0.75 ; group <- "Energy":};
    OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate for the concentrate pump" : EnergyForPumping := {: value <- 0.04 ; group <- "Energy":};
   };
   state <-
   {
// AERATION ENERGY (through KLa)
    OBJ Integ_AE (* hidden = "1" *)"Integral aeration energy" : Volume ;
// MIXING ENERGY
    OBJ Integ_ME (* hidden = "1" *)"Integral mixing energy" : ElectricalEnergy ;
  OBJ ME_Instant (* hidden = "1" *)"Instantaneous mixing energy" : Real:= {: group <- "Mixing":};
// PUMPING ENERGY
    OBJ Integ_PE_Membrane (* hidden = "1" *)"Integral Pumping energy for the transmembrane pump" : ElectricalEnergy ;
    OBJ Integ_PE_Backwash (* hidden = "1" *)"Integral Pumping energy for the backwash pump" : ElectricalEnergy ;
    OBJ Integ_PE_Concentrate (* hidden = "1" *)"Integral Pumping energy for the concentrate pump" : ElectricalEnergy ;
  };
  
  initial <-
  {
  state.Integ_AE = 0.0 ;
  state.Integ_ME = 0.0 ;
  state.Integ_PE_Membrane = 0.0 ;
  state.Integ_PE_Backwash = 0.0 ;
  state.Integ_PE_Concentrate = 0.0 ;
  };

  equations <-
  {
  state.Temp_Actual = interface.Temp;
  state.K_Temp = interface.Temp + 273 ;
  state.Kla_Actual = interface.Kla;
// AERATION ENERGY
    //(EURE 08/02/2019) [kWh/g O2] * [g O2/m3] * [1/d] * [m3] = [kWh/d]
    interface.AerationPower = (1 / interface.OTR_Energy) * state.S_O_Saturation * state.Kla_Actual * state.V ;
  DERIV(state.Integ_AE,[independent.t])= state.S_O_Saturation * state.Kla_Actual * state.V ;
  interface.AerationEnergy = (1 / interface.OTR_Energy) * state.Integ_AE ; 

// MIXING ENERGY
  state.ME_Instant = IF ((state.Kla_Actual < parameters.Kla_Min) || (state.Kla_Actual == 0))
            THEN parameters.ME_unit * state.V
          ELSE 
            IF (parameters.Mixing_When_Aerated == 1)
            THEN parameters.ME_unit * state.V
            ELSE 0;   

    //(EURE 25/07/2019) [kWh/d]
    interface.MixingPower = state.ME_Instant ;
  DERIV(state.Integ_ME,[independent.t])= state.ME_Instant;
  interface.MixingEnergy = state.Integ_ME ;

// PUMPING ENERGY
  DERIV(state.Integ_PE_Membrane,[independent.t])=  state.Q_Out_Membrane * state.TMP / (3600000.0 * parameters.n_Pump_Membrane);
  DERIV(state.Integ_PE_Backwash,[independent.t])=  state.Q_Backwash * state.TMP / (3600000.0 * parameters.n_Pump_Backwash);
// 3600 conversion h to sec
// 1000 conversion from Pa to kPa 
  DERIV(state.Integ_PE_Concentrate,[independent.t])=  state.Q_Concentrate;
  interface.PumpingEnergy = state.Integ_PE_Membrane + state.Integ_PE_Backwash + parameters.F_Energy_FlowRate * state.Integ_PE_Concentrate;

    //(EURE 26/07/2019) [kWh/m3] * [m3/d] = [kWh/d]
  interface.PumpingPower = (state.Q_Out_Membrane * state.TMP / (3600000.0 * parameters.n_Pump_Membrane) +
    state.Q_Backwash * state.TMP / (3600000.0 * parameters.n_Pump_Backwash) + parameters.F_Energy_FlowRate * state.Q_Concentrate) ;
  };

:};

#endif    // WWTP_BASE_INTERNAL_MEMBRANE_MBRWITHFOULING

