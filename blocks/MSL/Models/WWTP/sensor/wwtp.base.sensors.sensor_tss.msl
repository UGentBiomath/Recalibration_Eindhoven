/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:15:52$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SENSORS_SENSORTSS
#define WWTP_BASE_SENSORS_SENSORTSS

#ifdef StandardCategoryModels
CLASS Sensor_TSS
  (* icon = "sensor_tss" ; is_default = "true" *)
  "Suspended solids sensor"
  EXTENDS Sensor WITH 
  {:
    comments <- "A model for a sensor measuring the particulate concentration";

    interface <-
    {
      OBJ y_M (* terminal = "out_2"; is_favorite = "1" *) "Sensor measured output" :
         Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
    };
    
  parameters <-
  {
    OBJ F_TSS_COD "Fraction TSS/COD" : Ratio := {: value <- 0.75 ; group <- "Conversion factors":};
    #if (defined ASM2dM)
    OBJ i_TSS_BM "TSS to biomass ratio for X_H, X_PAO, X_AUT" : ConversionFactor := {: value <- 0.9; group <- "Composition parameters"; :};
    OBJ i_TSS_XC_B "TSS to XC_B ratio" : ConversionFactor := {: value <- 0.75; group <- "Composition parameters"; :};
    OBJ i_TSS_X_U "TSS to X_U ratio" : ConversionFactor := {: value <- 0.75; group <- "Composition parameters"; :};
    #endif
  };
  
    equations <-
    {
    #if (defined ASM1Temp)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[X_BH] + interface.Inflow[X_BA] + interface.Inflow[X_S] +
      interface.Inflow[X_I] + interface.Inflow[X_P]) * parameters.F_TSS_COD / state.Q_In ; 
    #endif
    #if (defined ASM1_AN)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[X_H] + interface.Inflow[X_NH] + interface.Inflow[X_NO] + interface.Inflow[X_AN] +
      interface.Inflow[X_S] + interface.Inflow[X_I]) * parameters.F_TSS_COD / state.Q_In ; 
    #endif
    #if (defined ASMG1)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[X_BH] + interface.Inflow[X_BA1] + interface.Inflow[X_BA2] +
      interface.Inflow[X_S] + interface.Inflow[X_I] + interface.Inflow[X_P]) * parameters.F_TSS_COD / state.Q_In ; 
    #endif    
    #if (defined ASM2dModTemp || defined ASM3Temp || defined ASM3P_EAWAG || defined ASMG2d || defined IUWS1 || defined IUWS2)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE interface.Inflow[X_TSS] / state.Q_In ; 
    #endif
    #if (defined ASM2dM)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[X_U] * parameters.i_TSS_X_U + interface.Inflow[XC_B] * parameters.i_TSS_XC_B +
      (interface.Inflow[X_OHO] + interface.Inflow[X_PAO] + interface.Inflow[X_ANO]) * parameters.i_TSS_BM +
      interface.Inflow[X_PAO_PP] * 3.23 + interface.Inflow[X_PAO_Stor] * 0.6 + interface.Inflow[X_MEOH] * 1.0 +
      interface.Inflow[X_MEP] * 1.0 + interface.Inflow[X_U_Ig] * 1.0) / state.Q_In ;
    #endif
  };

:};

#endif //

#endif // WWTP_BASE_SENSORS_SENSORTSS

