/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:15:52$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SENSORS_SENSORCOD
#define WWTP_BASE_SENSORS_SENSORCOD

#ifdef StandardCategoryModels
CLASS Sensor_COD
  (* icon = "sensor_cod" ; is_default = "true" *)
  "COD sensor"
  EXTENDS Sensor WITH 
  {:
    comments <- "A model for a sensor measuring the Chemical Oxygen Demand";

    interface <-
    {
      OBJ y_M (* terminal = "out_2"; is_favorite = "1" *) "Sensor measured output" :
         Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
    };
    
    equations <-
    {
    #if (defined ASM1Temp)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_S] + interface.Inflow[X_S] + interface.Inflow[S_I] +
      interface.Inflow[X_I] + interface.Inflow[X_P] + interface.Inflow[X_BH] + interface.Inflow[X_BA]) / state.Q_In ; 
    #endif
    #if (defined ASM1_AN)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_I] + interface.Inflow[S_S] + interface.Inflow[X_I] + interface.Inflow[X_S] +
      interface.Inflow[X_H] + interface.Inflow[X_NH] + interface.Inflow[X_NO] + interface.Inflow[X_AN]) / state.Q_In ; 
    #endif
    #if (defined ASMG1)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_I] + interface.Inflow[S_S] + interface.Inflow[X_I] + interface.Inflow[X_P] + interface.Inflow[X_S] +
      interface.Inflow[X_BH] + interface.Inflow[X_BA1] + interface.Inflow[X_BA2]) / state.Q_In ; 
    #endif
    #if (defined ASM2dModTemp || defined IUWS1 || defined IUWS2)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_A] + interface.Inflow[S_F] + interface.Inflow[X_S] +
      interface.Inflow[S_I] + interface.Inflow[X_I] + interface.Inflow[X_AUT] +
      interface.Inflow[X_H] + interface.Inflow[X_PAO] + interface.Inflow[X_PHA]) / state.Q_In ; 
    #endif
    #if (defined ASMG2d)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_A] + interface.Inflow[S_F] + interface.Inflow[X_S] +
      interface.Inflow[S_I] + interface.Inflow[X_I] + interface.Inflow[X_BA1] + interface.Inflow[X_BA2] +
      interface.Inflow[X_H] + interface.Inflow[X_PAO] + interface.Inflow[X_PHA]) / state.Q_In ; 
    #endif	
    #if (defined ASM2dM)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_VFA] + interface.Inflow[S_F] + interface.Inflow[XC_B] +
      interface.Inflow[S_U] + interface.Inflow[X_U] + interface.Inflow[X_ANO] +
      interface.Inflow[X_OHO] + interface.Inflow[X_PAO] + interface.Inflow[X_PAO_Stor]) / state.Q_In ; 
    #endif
    #if (defined ASM3Temp)
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_S] + interface.Inflow[X_S] + interface.Inflow[S_I] +
      interface.Inflow[X_I] + interface.Inflow[X_A] + interface.Inflow[X_H] + interface.Inflow[X_STO]) / state.Q_In ; 
    #endif
    #ifdef ASM3P_EAWAG
    interface.y_M = IF (state.Q_In == 0) THEN 0
      ELSE (interface.Inflow[S_S] + interface.Inflow[X_S] + interface.Inflow[S_I] +
      interface.Inflow[X_I] + interface.Inflow[X_A] + interface.Inflow[X_H] +
      interface.Inflow[X_PAO] + interface.Inflow[X_STO] + interface.Inflow[X_PHA]) / state.Q_In ; 
    #endif
};

:};
#endif // (defined ASM1Temp || defined ASM2dModTemp || defined ASM3Temp || defined ASM3P_EAWAG)

#endif // WWTP_BASE_SENSORS_SENSORCOD

