/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:11:45$
 *
 ******************************************************************************/

#ifndef N_TANKS_FIXVOLUMETWOTANK
#define N_TANKS_FIXVOLUMETWOTANK

CLASS  FixVolumeTwoTank SPECIALISES CoupledModelType :=
{:
 interface <-
 {
  OBJ Inflow (* terminal = "in_1" *) "Inflow" : InWWTPTerminal := {:causality <- "CIN" ; group <- "Influent" :},
  OBJ Outflow (* terminal = "out_1" *) "Outflow" : OutWWTPTerminal := {:causality <- "COUT" ; group <- "Effluent" :},
#if (defined ASM1Temp || defined ASM2dModTemp || defined ASM2dM || defined ASM3Temp || defined ASM3P_EAWAG || defined IUWS1 || defined IUWS2)
  OBJ Temp (* terminal = "in_2"; manip = "1" *) "Temperature of the activated sludge" : CelsiusTemperature := {: causality <- "CIN" ; value <- 15 ; group <- "Operational" :}; 
#endif
  OBJ Kla1 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Oxygen transfer coefficient in ASU1" : OxygenTransferCoefficient := {: causality <- "CIN" ; value <- 0 ; group <- "Operational" :};   
  OBJ Kla2 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Oxygen transfer coefficient in ASU2" : OxygenTransferCoefficient := {: causality <- "CIN" ; value <- 0 ; group <- "Operational" :};   
  OBJ AerationEnergy1 (* terminal = "out_2" *)"Aeration energy for ASU1" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ AerationPower1 (* terminal = "out_2" *) "Aeration power for ASU1" : Power := {: causality <- "COUT"; group <- "Energy" :};
  OBJ MixingEnergy1 (* terminal = "out_2" *)"Mixing energy for ASU1" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ MixingPower1 (* terminal = "out_2" *) "Mixing power for ASU1" : Power := {: causality <- "COUT"; group <- "Energy" :};
  OBJ AerationEnergy2 (* terminal = "out_2" *)"Aeration energy for ASU2" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ AerationPower2 (* terminal = "out_2" *) "Aeration power for ASU2" : Power := {: causality <- "COUT"; group <- "Energy" :};
  OBJ MixingEnergy2 (* terminal = "out_2" *)"Mixing energy for ASU2" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ MixingPower2 (* terminal = "out_2" *) "Mixing power for ASU2" : Power := {: causality <- "COUT"; group <- "Energy" :};
#define ASU_TWO_TANK
#include "WWTP/activated_sludge_unit/wwtp.n_tanks_interface.msl"
#undef ASU_TWO_TANK
 };

 parameters <-
 {
#include "WWTP/wwtp.VolumeConversionModel.parameters.msl"
  OBJ Vol1 (* is_favorite = "1" *) "Volume of ASU1" : Volume := {: value <- 1000 ; group <- "Dimension" :};   
  OBJ Vol2 (* is_favorite = "1" *) "Volume of ASU2" : Volume := {: value <- 1000 ; group <- "Dimension" :};   
 };

 sub_models <-
 {
  OBJ ASU1 : FixVolumeASU,
  OBJ ASU2 : FixVolumeASU,
 };

 coupling <-
 {
  // parameter coupling
  sub_models.ASU1.parameters.Vol.value := parameters.Vol1.value,
  sub_models.ASU2.parameters.Vol.value := parameters.Vol2.value,

#define ASU_TWO_TANK
#include "WWTP/activated_sludge_unit/wwtp.n_tanks_parameters_coupling.msl"
#include "WWTP/activated_sludge_unit/wwtp.n_tanks_sensor_coupling.msl"
#undef ASU_TWO_TANK

#if (defined ASM1Temp || defined ASM2dModTemp || defined ASM2dM || defined ASM3Temp || defined ASM3P_EAWAG || defined IUWS1 || defined IUWS2)
  sub_models.ASU1.parameters.Temp_Ref.value := parameters.Temp_Ref.value,
  sub_models.ASU2.parameters.Temp_Ref.value := parameters.Temp_Ref.value,
#endif

  // sub-model coupling
  connect(interface.Inflow, sub_models.ASU1.interface.Inflow),
  connect(sub_models.ASU1.interface.Outflow, sub_models.ASU2.interface.Inflow),
  connect(interface.Kla1, sub_models.ASU1.interface.Kla),
  connect(interface.Kla2, sub_models.ASU2.interface.Kla),
  connect(sub_models.ASU1.interface.AerationPower, interface.AerationPower1),
  connect(sub_models.ASU2.interface.AerationPower, interface.AerationPower2),
  connect(sub_models.ASU1.interface.AerationEnergy, interface.AerationEnergy1),
  connect(sub_models.ASU2.interface.AerationEnergy, interface.AerationEnergy2),
  connect(sub_models.ASU1.interface.MixingEnergy, interface.MixingEnergy1),
  connect(sub_models.ASU2.interface.MixingEnergy, interface.MixingEnergy2),
  connect(sub_models.ASU1.interface.MixingPower, interface.MixingPower1),
  connect(sub_models.ASU2.interface.MixingPower, interface.MixingPower2),
#if (defined ASM1Temp || defined ASM2dModTemp || defined ASM2dM || defined ASM3Temp || defined ASM3P_EAWAG || defined IUWS1 || defined IUWS2)
  connect(interface.Temp, sub_models.ASU1.interface.Temp),
  connect(interface.Temp, sub_models.ASU2.interface.Temp),
#endif
 };
:};

#endif // N_TANKS_FIXVOLUMETWOTANK
