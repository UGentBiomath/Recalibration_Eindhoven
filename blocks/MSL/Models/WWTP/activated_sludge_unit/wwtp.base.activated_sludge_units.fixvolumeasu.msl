/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 22. september 2020 14:54:01$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_ACTIVATED_SLUDGE_UNITS_FIXVOLUMEASU
#define WWTP_BASE_ACTIVATED_SLUDGE_UNITS_FIXVOLUMEASU


CLASS FixVolumeASU (* icon = "activated_sludge_unit" ; is_default = "true" *)
SPECIALISES FixVolumeASMConversionModel :=
{:

  comments <- "Model for an activated sludge unit with a fixed volume";
  
  interface <-  
  {
    OBJ Kla (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Oxygen transfer coefficient" : OxygenTransferCoefficient := {: causality <- "CIN" ; value <- 0 ; group <- "Operational" :};   
    OBJ OTR_Energy (* terminal = "in_2"; manip = "1" *) "Oxygen transfer rate per energy input" : TransferRateEnergy := {: causality <- "CIN" ; value <- 1800 ; group <- "Operational" :}; 
    #ifdef StandardCategoryModels
    OBJ Temp (* terminal = "in_2"; manip = "1"; is_favorite = "1" *)  "Temperature of the activated sludge" : CelsiusTemperature  := {: causality <- "CIN" ; value <- 15 ; group <- "Operational" :}; 
    #endif
    OBJ AerationEnergy (* terminal = "out_2" *)"Aeration energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ AerationPower (* terminal = "out_2" *) "Aeration power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
    OBJ MixingEnergy (* terminal = "out_2" *)"Mixing energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ MixingPower (* terminal = "out_2" *) "Mixing power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
    
    #if (defined ASM2dModTemp)
    OBJ VSSc (* terminal = "out_2"; is_favorite = "1" *) "COD-based VSS concentration" : Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
    OBJ TSSc (* terminal = "out_2"; is_favorite = "1" *) "COD-based TSS concentration" : Concentration := {: causality <- "COUT" ; group <- "Measurement data" :};
    #endif
  };   
  
  parameters <- 
  {
    // MIXING ENERGY
    OBJ ME_unit "Energy requirement per unit of volume for mixing in a AS tank" : EnergyForMixing := {: value <- 0.005; group <- "Mixing energy":};
    OBJ Kla_Min "Lowest kLa value that ensures adequate mixing" : OxygenTransferCoefficient :={: value <- 20.0; group <- "Mixing energy":};
    OBJ Mixing_When_Aerated "Mixing activity during aeration" : Integer := {: value <- 0 ; interval <- {: lowerBound <- 0; upperBound <- 1:}; group <- "Mixing energy":}; //EnergyIndex
  };
  
  state <-
  {
    OBJ HRT (* is_favorite = "1" *) "Retention time" : Time := {: group <- "Operational":};
    // AERATION ENERGY (through KLa)
    OBJ Integ_AE (* hidden = "1" *)"Integral aeration energy" : Volume ;
    // MIXING ENERGY
    OBJ Integ_ME (* hidden = "1" *)"Integral mixing energy" : ElectricalEnergy ;
    OBJ ME_Instant (* hidden = "1" *)"Instantaneous mixing energy" : EnergyIndex := {: group <- "Mixing":};
  };
  
  initial <-
  {
    state.Integ_AE = 0.0 ;
    state.Integ_ME = 0.0 ;
  };
  
  equations <- 
  {
    state.Kla_Actual = interface.Kla;
    #ifdef StandardCategoryModels
    state.Temp_Actual = interface.Temp;
    #endif //
    
    // AERATION ENERGY
    //(EURE 08/02/2019) [kWh/g O2] * [g O2/m3] * [1/d] * [m3] = [kWh/d]
    interface.AerationPower = (1 / interface.OTR_Energy) * state.S_O_Saturation * state.Kla_Actual * state.V ;
    DERIV(state.Integ_AE,[independent.t])= state.S_O_Saturation * state.Kla_Actual * state.V ;
    interface.AerationEnergy = (1 / interface.OTR_Energy) * state.Integ_AE ; 
    
    // MIXING ENERGY
    state.ME_Instant = IF ((state.Kla_Actual < parameters.Kla_Min) || (state.Kla_Actual == 0)) THEN parameters.ME_unit * state.V
      ELSE IF (parameters.Mixing_When_Aerated == 1) THEN parameters.ME_unit * state.V
      ELSE 0 ;    
    
    //(EURE 25/07/2019) [kWh/d]
    interface.MixingPower = state.ME_Instant ;
    DERIV(state.Integ_ME,[independent.t])= state.ME_Instant;
    interface.MixingEnergy = state.Integ_ME ;
    
    // Total Suspended solids (TSSc)
    #if (defined ASM2dModTemp)
    interface.TSSc = IF (state.Q_In <= 0.0) THEN 0.0
      ELSE (interface.Inflow[X_I] * parameters.i_TSS_X_I + interface.Inflow[X_S] * parameters.i_TSS_X_S +
      (interface.Inflow[X_H] + interface.Inflow[X_PAO] + interface.Inflow[X_AUT]) * parameters.i_TSS_BM +
      interface.Inflow[X_PP] * 3.23 + interface.Inflow[X_PHA] * 0.6 + interface.Inflow[X_MEOH] * 1.0 +
      interface.Inflow[X_MEP] * 1.0) / state.Q_In ;

    interface.VSSc = IF (state.Q_In <= 0.0) THEN 0.0
      ELSE (interface.Inflow[X_S] * parameters.i_TSS_X_S +
      (interface.Inflow[X_H] + interface.Inflow[X_PAO] + interface.Inflow[X_AUT]) * parameters.i_TSS_BM +
      interface.Inflow[X_PP] * 3.23 + interface.Inflow[X_PHA] * 0.6 + interface.Inflow[X_MEOH] * 1.0 +
      interface.Inflow[X_MEP] * 1.0) / state.Q_In ;
    #endif
    
    state.HRT = IF (state.Q_In <= 0.0) THEN 0.0 ELSE state.V / state.Q_In ;
  };   

:};


#endif // WWTP_BASE_ACTIVATED_SLUDGE_UNITS_FIXVOLUMEASU
