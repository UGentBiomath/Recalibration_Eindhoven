/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$ EURE
 * $Date: 30. september 2019 12:19:55$
 *
 ******************************************************************************/
 
//  The model was implemented at BIOMATH (Ghent University) by:
//  Salvatore Plano, Thomas Maere, Youri Amerlinck and Ingmar Nopens.

#ifndef WWTP_IRVINE_CARBON_FOOTPRINT
#define WWTP_IRVINE_CARBON_FOOTPRINT

  // The model computes the Kla values that are needed in the ASM models.
  // The actuator is airflow. A description of every parameter can be found in the code.
CLASS Irvine_wCarbon_Footprint
  (* icon = "aerator" ; is_default = "true" *)
  "Irvine aeration model with carbon footprint" SPECIALISES PhysicalDAEModelType :=
  {:
    comments <- "A model that computes the Kla based on airflow rate, aerator design and other parameters";
    interface <-
    {
		OBJ O2_tank (* terminal = "in_1" *) "Actual oxygen concentration in the aeration tank" : Concentration := {: causality <- "CIN" ; group <- "Measurement data" :};
		OBJ Vol_tank (* terminal = "in_1" *) "Volume of the aeration tank" : Volume := {: causality <- "CIN" ; group <- "Measurement data" :};
		OBJ Kla (* terminal = "out_1" *) "Oxygen Transfer Coefficient" : OxygenTransferCoefficient := {: causality <- "COUT" ; group <- "Control action" :};
		OBJ O2_rsat_ave (* terminal = "out_1" *) "Average oxygen saturation f(T_water; Depth) for fine bubble aeration" : Concentration := {: causality <- "COUT" ; group <- "Control action" :};
		OBJ SRT (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Sludge age" : Time := {: causality <- "CIN" ; value <- 6.5 ; group <- "Operational" :};   
		OBJ Q_air (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Air flow rate under Standard Conditions": FlowRate := {: causality <- "CIN" ; value <- 1000 ; group <- "Operational" :};
    };
    parameters <- 
    {
		OBJ g (* hidden = "1" *) "Gravity acceleration on earth (m/s2)": Real := {: value <- 9.82 :};
		OBJ R_gas (* hidden = "1" *) "Universal gas constant (J/(mol*K))" : Real := {: value <- 8.314510 :};
		OBJ M_air (* hidden = "1" *) "Molar mass of air (g/mol)" : Real := {: value <- 28.97 :};

		OBJ T_water "Temperature of the water": CelsiusTemperature := {: value <- 15.0 ; group <- "Operational" :};
		OBJ T_air "Temperature of the air": CelsiusTemperature := {: value <- 15.0 ; group <- "Operational" :};
		OBJ H "Altitude": Length := {: value <- 10 ; group <- "Operational" :};
		OBJ Rho_air "Air density": Concentration := {: value <- 1230 ; group <- "Operational" :};
		OBJ O2_sat20 "Oxygen saturation of water under Standard Conditions and no salts": Concentration := {: value <- 10.50 ; group <- "Operational" :};
		OBJ SOTE "Standard Oxygen Transfer Efficiency per unit depth": Real := {: value <- 6 ; group <- "Operational"; interval <- {: lowerBound <- 0; upperBound <- 10 ; :}; :};

		OBJ Rho_sludge "Sludge density": Concentration := {: value <- 1000000 ; group <- "Sludge" :};//{: value <- 9880000 ; group <- "Sludge" :};
		OBJ Beta "Empirical factor": Real := {: value <- 0.98 ; group <- "Sludge" :};
		OBJ Phi "Empirical factor": Real := {: value <- 1.024 ; group <- "Sludge" :};

		OBJ P_st_atm (* hidden = "1" *) "Standard atmospheric pressure": Pressure := {: value <- 101325; group <- "Local conditions" :};
		OBJ P_vapour_ref "Vapour pressure": Pressure := {: value <- 2334; group <- "Local conditions" :};
		OBJ O2_air "O2 conc. in the atmosphere (%)": Real := {: value <- 20.85 ; group <- "Local conditions"; interval <- {: lowerBound <- 0; upperBound <- 100; :}; :};
		OBJ CO2_air "CO2 conc. in the atmosphere (%)": Real := {: value <- 0.03 ; group <- "Local conditions"; interval <- {: lowerBound <- 0; upperBound <- 100; :}; :};

		OBJ Depth "Depth of the (fine bubble) aerator": Length := {: value <- 6 ; group <- "Tank geometry" :};
		OBJ A_sp "Specific area of the diffusers": Area := {: value <- 2 ; group <- "Tank geometry" :};
		OBJ Nd "Number of diffusers": Real := {: value <- 504 ; group <- "Tank geometry"; interval <- {: lowerBound <- 0; upperBound <- PLUS_INF; :}; :};
		
		OBJ A "Empirical factor": Real := {: value <- 5.717 ; group <- "Aeration model" :};
		OBJ B "Empirical factor": Real := {: value <- 6.815 ; group <- "Aeration model" :};
		OBJ f "Fraction of tank depth (from surface) at which pressure corresponds to the average saturation concentration": Real := {: value <- 0.44 ; group <- "Aeration model" :};
		// Power consumption and Energy FootPrint
		OBJ P_out "Total pressure loss in the aeration system": Pressure := {: value <- 80000; group <- "Power consumption" :};
		OBJ Lambda "Empirical constant for air": Real := {: value <- 1.395 ; group <- "Power consumption" :};
		OBJ Epsilon "Efficiency of the motor": Real := {: value <- 0.58 ; group <- "Power consumption"; interval <- {: lowerBound <- 0; upperBound <- 1; :}; :};
		OBJ fCO2 "CO2 production per unit of energy (kg/kWh)": Real := {: value <- 0.718 ; group <- "Power consumption" :};
		OBJ T_in "Inlet temperature": CelsiusTemperature := {: value <- 20 ; group <- "Power consumption" :};
    };
    independent <- 
    {
		OBJ t "Time" : Time := {: group <- "Time" :}; 
    };
    state <- 
    {
		OBJ P_atm "Atmospheric pressure": Pressure := {: group <- "Local conditions" :};
		OBJ P_vapour "Vapour pressure": Pressure := {: group <- "Local conditions" :};
		OBJ O2_rsat "Oxygen saturation at the water temperature": Concentration := {: group <- "Local conditions" :};

		OBJ help_SOTE (* hidden = "1" *) "Standard Oxygen Transfer Efficiency (%)": Real := {: group <- "Operational"; interval <- {: lowerBound <- 0; upperBound <- 100; :}; :};
		
		OBJ Alpha "Empirical factor ": Real := {: group <- "Operational" :};
		OBJ AlphaSOTE "Oxygen transfer efficiency for new aerators": Real := {: group <- "Aeration" :};
		OBJ SOTR "Standard Oxygen Transfer Rate": MassFlux := {: group <- "Aeration" :};
		OBJ OTR "Oxygen Transfer Rate (under field conditions)": MassFlux := {: group <- "Aeration" :};
		OBJ	OTR_sp "Specific Oxygen Transfer Rate": OxygenUptakeRate := {: group <- "Aeration" :};
		OBJ OTE "Oxygen Transfer Efficiency (under field conditions)": Real := {: group <- "Aeration"; interval <- {: lowerBound <- 0; upperBound <- 1; :}; :};
		OBJ MRi "Mole ratio of oxygen that enters air and off gas (%)": Real := {: group <- "Aeration" :};
		OBJ MRe "Mole ratio of oxygen that leaves aeration tank (%)": Real := {: group <- "Aeration" :};
		OBJ Qn "Normalized air flow": Real := {: group <- "Aeration" :};
		OBJ help_P_bottom (* hidden = "1" *) "Pressure differential at the bottom of the tank": Pressure := {: group <- "Site" :};

		//Power consumption and Energy footprint
		OBJ Load_CO2 "CO2 production": MassFlux := {: group <- "Power consumption" :};
		OBJ Power_blowers "Power of the blowers" : Power := {: group <- "Power consumption" :};
		OBJ Emission_CO2 "Overall CO2 emission" : Mass := {: group <- "Power consumption" :} ;
		OBJ Consumption "Overall electrical energy (kWh)" : ElectricalEnergy := {: group <- "Power consumption" :} ;
		OBJ Chi (* hidden = "1" *) "Characteristic number": Real ;
    };

    initial <- 
    {
		state.P_atm = -12 * parameters.H + parameters.P_st_atm ;
		state.help_SOTE = parameters.SOTE * parameters.Depth ;
		state.MRi = parameters.O2_air/(100.0 - parameters.O2_air - parameters.CO2_air);
		state.P_vapour = pow(10, 0.6979 + 0.02618 * parameters.T_air)* 133.33;
    };
	
    equations <- 
    {
		// Diego Rosso et al.
		state.Qn = interface.Q_air / (24*3600*(parameters.A_sp * parameters.Nd * parameters.Depth)) ;
		state.Chi = IF (state.Qn == 0.0) THEN 0.0 ELSE interface.SRT/state.Qn ;
	
		state.AlphaSOTE = IF (state.Chi == 0.0) THEN 0.0 ELSE (parameters.A * log10(state.Chi) - parameters.B)/100.0 ;
		// Alpha (-) = AlphaSOTE (-) / help_SOTE (%)
		state.Alpha = state.AlphaSOTE / state.help_SOTE * 100 ;

		// Off gas test ASCE.
		state.MRe =  state.MRi*(1-state.OTE);
		state.OTE = state.AlphaSOTE *
			(parameters.Beta * interface.O2_rsat_ave - interface.O2_tank) / parameters.O2_sat20 * pow(parameters.Phi,(parameters.T_water-20));

		// Local conditions.
		state.help_P_bottom = (parameters.Rho_sludge/1000.0) * parameters.g * parameters.Depth;
		state.O2_rsat = 14.65 - 0.41 * (parameters.T_water) + 0.00799 * pow(parameters.T_water,2) - 0.0000778 * pow(parameters.T_water,3);
		interface.O2_rsat_ave = parameters.O2_sat20 * (state.help_P_bottom * parameters.f + state.P_atm - state.P_vapour)/ (parameters.P_st_atm - parameters.P_vapour_ref);

		// Oxygen Transfer and Aeration Efficiency.
		state.SOTR =  interface.Q_air * (parameters.Rho_air)  * (state.help_SOTE/100) * (parameters.O2_air/100);
		state.OTR = state.Alpha * state.SOTR * (parameters.Beta * interface.O2_rsat_ave - interface.O2_tank) /parameters.O2_sat20 * pow(parameters.Phi,(parameters.T_water-20));

    interface.Kla = IF ((parameters.Beta * interface.O2_rsat_ave - interface.O2_tank) * interface.Vol_tank <= 0.0) THEN (0.0)
      ELSE state.OTR/((parameters.Beta * interface.O2_rsat_ave - interface.O2_tank) * interface.Vol_tank) ;

		state.OTR_sp = state.OTR /(interface.Vol_tank);
		
		// Power consumption and Energy footprint
		state.Power_blowers = (parameters.Rho_air * (interface.Q_air/(24.0*3600.0)) * parameters.R_gas * (parameters.T_in + 273.15))/(parameters.M_air * parameters.Epsilon) * (parameters.Lambda/(parameters.Lambda-1)) * (pow(((parameters.P_out + parameters.P_st_atm)/parameters.P_st_atm),((parameters.Lambda-1)/parameters.Lambda)) - 1) ;
		state.Load_CO2 = state.Power_blowers * parameters.fCO2 ;
		DERIV(state.Consumption, [independent.t]) = 24 * state.Power_blowers / 1000 ;
		DERIV(state.Emission_CO2, [independent.t]) = state.Load_CO2 ;
    };

  :};

#endif // WWTP_IRVINE_CARBON_FOOTPRINT
