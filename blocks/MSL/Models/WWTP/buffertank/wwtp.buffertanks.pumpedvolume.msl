/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 26. juli 2019 23:27:23$
 *
 ******************************************************************************/


#ifndef WWTP_BUFFERTANKS_PUMPEDVOLUME
#define WWTP_BUFFERTANKS_PUMPEDVOLUME


CLASS BufferTank_Pumped2 (* icon = "buffer_tank2" *) "Storm tank with a pump-regulated volume (when V>Vmax)"
EXTENDS VolumeBuffer_Pumped2 WITH
{:

  comments <- "Storm tank with a pump-regulated volume (when V>Vmax)" ;

  interface <-
  {
    OBJ MixingEnergy (* terminal = "out_2" *) "Mixing energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ PumpingEnergy (* terminal = "out_2" *) "Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
    OBJ MixingPower (* terminal = "out_2" *) "Mixing power" : Real := {: causality <- "COUT"; unit <- "kWh/d" ; group <- "Energy" :};
    OBJ PumpingPower (* terminal = "out_2" *) "Pumping power" : Real := {: causality <- "COUT"; unit <- "kWh/d"; group <- "Energy" :};
    OBJ V_Buffer (* terminal = "out_2" *) "Volume of the tank" : Volume := {: causality <- "COUT" ; group <- "Measurement data" :};
  };
  
  parameters <- 
  {
    // MIXING ENERGY
    OBJ ME_unit "Energy requirement per unit of volume for mixing in the tank" : Real := {: value <- 0.005; group <- "Mixing energy":};
    // PUMPING ENERGY
    OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate" : EnergyForPumping := {: value <- 0.04 ; group <- "Energy":};
  };
  
  state <-
  {
    // MIXING ENERGY
    OBJ Integ_ME (* hidden = "1" *)"Integral mixing energy" : ElectricalEnergy ;
    OBJ ME_Instant (* hidden = "1" *)"Instantaneous mixing energy" : Real:= {: group <- "Mixing":};
    // PUMPING ENERGY
    OBJ Integ_PE (* hidden = "1" *)"Integral Pumping energy" : ElectricalEnergy ;
  };
  
  initial <-
  {
    state.Integ_ME = 0.0 ;
    state.Integ_PE = 0.0 ;
  };
  
  equations <-
  {
    interface.V_Buffer = state.V;
    
    // MIXING ENERGY
    //(EURE 25/07/2019) [kWh/d]
    interface.MixingPower = state.ME_Instant ;
    state.ME_Instant = parameters.ME_unit * state.V;    
    DERIV(state.Integ_ME,[independent.t])= state.ME_Instant;
    interface.MixingEnergy = state.Integ_ME ;
    
    // PUMPING ENERGY
    //(EURE 26/07/2019) [kWh/m3] * [m3/d] = [kWh/d]
  interface.PumpingPower = parameters.F_Energy_FlowRate * state.Q_Out ;
    DERIV(state.Integ_PE,[independent.t])=  state.Q_Out;
    interface.PumpingEnergy = parameters.F_Energy_FlowRate * state.Integ_PE ;
  };

:};


CLASS VolumeBuffer_Pumped2 EXTENDS WWTPAtomicModelWithVolume WITH
{:

  interface <-
  {
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Overflow (* terminal = "out_3" *) "Overflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Overflow" :};
    OBJ Q_Pump (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Pump flow rate" : FlowRate := {: causality <- "CIN" ; value <- 100; group <- "Operation" :} ;
  };

  parameters <-
  {
    OBJ V_Max (* is_favorite = "1" *) "Maximum volume of the tank" : Volume := {: group <- "Operation" :};
    OBJ V_Min (* is_favorite = "1" *) "Minimum volume of the tank" : Volume := {: group <- "Operation" :}; 
    OBJ Q_Min (* hidden = "1" *) "Min overflow" : FlowRate := {: value <- 10 ; group <- "Operation" :};
  };

  state <-
  {
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Over (* is_favorite = "1" *) "Overflow" : FlowRate := {: group <- "Operational" :};
  };
  
  initial <-
  {
    state.M[H2O] = parameters.V_Min * 1E06 ; 
  };  

  equations <-
  {
    state.V = SUMOVER Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      (parameters.WWTPSpecificVolume[Comp_Index] * state.M[Comp_Index]) ;
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      state.C[Comp_Index] = IF (state.V <= 0) THEN 0.0 ELSE state.M[Comp_Index] / state.V ; };

    state.Q_Out = IF (state.V < parameters.V_Min) THEN 0.0
      ELSE IF (state.V < parameters.V_Max) THEN
        // [A] if V<Vmax & is receiving flow: the pump will not start
        IF (state.Q_In <= 0.0) THEN interface.Q_Pump ELSE 0.0
// [B]        interface.Q_Pump
          ELSE interface.Q_Pump ;

    //(EURE 08/01/2019) it really depends on how over- and outflow are handled
    // Here it is assumed that they are on separate pipes, i.e. Q_Pump regulates the outflow and the remaining flow results in overflow
    state.Q_Over = IF (state.V < parameters.V_Max) THEN 0.0
      ELSE IF (interface.Q_Pump <= 0.0) THEN parameters.Q_Min    // min (over)flow to avoid numerical inconsistency, vol > max
      ELSE IF (state.Q_In < interface.Q_Pump) THEN 0.0    // Q_Pump is sufficient to lower the level
        ELSE state.Q_In - interface.Q_Pump ;              // Q_Pump is insufficient, overflow is present

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow[Comp_Index] = - state.C[Comp_Index] * state.Q_Out ; };

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Overflow[Comp_Index] = - state.C[Comp_Index] * state.Q_Over ; };
  };

:};


#endif // WWTP_BUFFERTANKS_PUMPEDVOLUME
