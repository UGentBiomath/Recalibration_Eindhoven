/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:15:54$
 *
 ******************************************************************************/

#ifndef WWTP_SPLITTERS_COMBINERS_REL
#define WWTP_SPLITTERS_COMBINERS_REL


CLASS CombiSplit_Rel (* icon = "Link"; is_default = "true" *)  
"Relative multi combiner/splitter (valve)"
EXTENDS CombiSplit_Rel_Base WITH
{:
  comments <- "Relative multi combiner/splitter (valve)";

  interface <-
  {
    OBJ Q_Out_01 (* terminal = "out_2" *) "Flow rate #1" : FlowRate := {: causality <- "COUT" ; group <- "Sensor" :};
    OBJ Q_Out_02 (* terminal = "out_2" *) "Flow rate #2" : FlowRate := {: causality <- "COUT" ; group <- "Sensor" :};
    OBJ Q_Out_03 (* terminal = "out_2" *) "Flow rate #3" : FlowRate := {: causality <- "COUT" ; group <- "Sensor" :};
    OBJ Q_Out_04 (* terminal = "out_2" *) "Flow rate #4" : FlowRate := {: causality <- "COUT" ; group <- "Sensor" :};
  };
  
  equations <-
  {
    state.weight = interface.f01 + interface.f02 + interface.f03 + interface.f04 + interface.f05 +
      interface.f06 + interface.f07 + interface.f08 + interface.f09 + interface.f10 ;
      
    state.Q_Out = state.Q_Out01 + state.Q_Out02 + state.Q_Out03 + state.Q_Out04 + state.Q_Out05 +
      state.Q_Out06 + state.Q_Out07 + state.Q_Out08 + state.Q_Out09 + state.Q_Out10 ;
    
    interface.Q_Out_01 = state.Q_Out01 ;
    interface.Q_Out_02 = state.Q_Out02 ;
    interface.Q_Out_03 = state.Q_Out03 ;
    interface.Q_Out_04 = state.Q_Out04 ;
    // complete
  }; 

:};


// here can add other classes with 11+ terminals



// Rel_Base class:

CLASS CombiSplit_Rel_Base EXTENDS CombiSplit_Base WITH
{:

  interface <-
  { 
    OBJ f01 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the influent going to outflow #1" : WeightPos
      := {: causality <- "CIN" ; value <- 1.0; group <- "Operational" :};
    OBJ f02 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the influent going to outflow #2" : WeightPos
      := {: causality <- "CIN" ; value <- 1.0; group <- "Operational" :};
    OBJ f03 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the influent going to outflow #3" : WeightPos
      := {: causality <- "CIN" ; value <- 1.0; group <- "Operational" :};
    OBJ f04 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #4" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f05 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #5" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f06 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #6" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f07 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #7" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f08 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #8" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f09 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #9" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
    OBJ f10 (* terminal = "in_2"; manip = "1"; *) "Fraction of the influent going to outflow #10" : WeightPos
      := {: causality <- "CIN" ; value <- 0.0; group <- "Operational" :};
  };

  state <-  
  {
    OBJ weight (* hidden = "1" *) "sum of weights" : WeightPos ;
  };   

  equations <-
  {
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow01[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f01 / state.weight) ;  
    };   
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow02[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f02 / state.weight) ;  
    };   
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow03[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f03 / state.weight) ;  
    };
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow04[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f04 / state.weight) ;  
    };   
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow05[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f05 / state.weight) ;  
    };   

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow06[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f06 / state.weight) ;  
    };   

    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow07[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f07 / state.weight) ;  
    };
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow08[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f08 / state.weight) ;  
    };
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow09[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f09 / state.weight) ;  
    };   
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow10[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * (interface.f10 / state.weight) ;  
    };   
  }; 

:};


#endif // WWTP_SPLITTERS_COMBINERS_REL