/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:11:47$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_PIDSATURATION
#define WWTP_BASE_CONTROLLERS_PIDSATURATION

CLASS BasePIDSaturation
  "PID controller with saturation"
  SPECIALISES
  PhysicalDAEModelType :=
  {:

    interface <-
    {
      OBJ y_M (* terminal = "in_1"; is_favorite = "1" *) "Sensor measured output" : Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1"; is_favorite = "1" *) "Controlled variable" : Real := {: causality <- "COUT" ; group <- "Control action" :};
      OBJ K_P (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Factor of proportionality" : Real := {: causality <- "CIN" ; value <- 25.0 ; group <- "Operational" :};
      OBJ T_I (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Integral time" : Time := {: causality <- "CIN" ; value <- 0.1 ; group <- "Operational" :};
      OBJ T_D (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Derivative time" : Time := {: causality <- "CIN" ; value <- 0.1 ; group <- "Operational" :};
      OBJ y_S (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Setpoint value for controlled variable" : Real := {: causality <- "CIN" ; value <- 2 ; group <- "Operational" :};
      OBJ u0  (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "No error action" : Real := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};
      OBJ u_Min (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Minimum control action" : Real := {: causality <- "CIN" ; value <- 0 ; group <- "Operational" :};
      OBJ u_Max (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Maximum control action" : Real := {: causality <- "CIN" ; value <- 1000 ; group <- "Operational" :};
    };

    independent <- 
    { 
     OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
    {
	  OBJ Integ_e "Integral of error": PhysicalQuantityType := {: group <- "Operational" :};
	  OBJ e (* is_favorite = "1" *) "Error" : PhysicalQuantityType := {: group <- "Operational" :};
	  OBJ help (* hidden = "1" *) " Previous time help variable" : Time;
	  // "uhelp" until W2014
	  OBJ help_u_Unsat (* hidden = "1" *) "Help variable to calculate the proportional-integral-derivative control action" : Real;
	  OBJ Deriv_e (* hidden = "1" *) "Derivative of error" : Real := {: group <- "Operational" :};
	  OBJ Prev_t (* hidden = "1" *) : Time;
	  OBJ help_u_Sat (* hidden = "1" *) "Working variable for the output signal" : Real;
    };

    initial <-
    {
	  state.Integ_e = 0.0 ;
    };

    equations <-
    {
	  state.e = interface.y_S - interface.y_M;	//OK
	  
	  state.help = independent.t;	//OK
	  
	  state.Deriv_e = IF (previous(state.help) != state.help) THEN
	  	(previous(state.e) - state.e) / (previous(state.help) - state.help)
		ELSE previous(state.Deriv_e) ;  //OK

//     DERIV(state.Integ_e, [independent.t]) = state.e ;

//     state.help_u_Unsat = interface.u0 + interface.K_P * (state.e + interface.T_D * state.Deriv_e + state.Integ_e / interface.T_I) ;	//OK
	  state.help_u_Sat = IF(state.help_u_Unsat < interface.u_Min) THEN (interface.u_Min)
		ELSE IF (state.help_u_Unsat > interface.u_Max)
			 THEN interface.u_Max
			 ELSE state.help_u_Unsat ;

	  interface.u = state.help_u_Sat ;
    };

  :};


CLASS PID_Saturation
  (* icon = "controller_pid"; is_default = "true" *)
  "PID controller with saturation"
  EXTENDS BasePIDSaturation WITH
  {:
    comments <- "A model for a proportional-integral-derivative controller with saturation";

    equations <-
    {
     DERIV(state.Integ_e, [independent.t]) = state.e ;

     state.help_u_Unsat = interface.u0 + interface.K_P * (state.e + interface.T_D * state.Deriv_e + state.Integ_e / interface.T_I) ;
    };

  :};


CLASS PID_Saturation_AntiWindup
  (* icon = "controller_pid" *)
  "PID controller with saturation and anti-windup"
  EXTENDS BasePIDSaturation WITH
  {:
    comments <- "A model for a proportional-integral-derivative controller with saturation and anti-windup";

    interface <-
    {
      OBJ T_t (* terminal = "in_2"; manip = "1" *) "Tracking time (anti-windup)" : Time := {: causality <- "CIN" ; value <- 0.1 ; group <- "Operational" :};
    };

    equations <-
    {
     DERIV(state.Integ_e, [independent.t]) = (interface.K_P * state.e / interface.T_I) + ((state.help_u_Sat - state.help_u_Unsat) / interface.T_t) ;

     state.help_u_Unsat = interface.u0 + interface.K_P * state.e + state.Integ_e + interface.K_P * interface.T_D * state.Deriv_e; 
    };

  :};

 
#endif // WWTP_BASE_CONTROLLERS_PIDSATURATION

