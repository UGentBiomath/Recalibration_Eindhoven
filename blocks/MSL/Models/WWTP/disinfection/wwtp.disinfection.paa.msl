/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. maj 2019 21:01:18$
 *
 ******************************************************************************/

#ifndef WWTP_DISINFECTION_PAA
#define WWTP_DISINFECTION_PAA


// Science of the Total Environment 643 (2018) 936–945 (https://doi.org/10.1016/j.scitotenv.2018.06.219)
CLASS PAA_02 (* icon = "disinfection_unit" *) "Log-inactivation model by Henao et al. (2018) accounting for suspended solids on peracetic acid decay and bacterial inactivation kinetics"
EXTENDS LogInactivation WITH
{:

  comments <- "Log-inactivation model by Henao et al. (2018) accounting for suspended solids on peracetic acid decay and bacterial inactivation kinetics" ;
  
  interface <-
  {
    OBJ C_PAA (* terminal = "in_2"; is_favorite = "1" *) "(initial) PAA concentration" : Concentration := {: causality <- "CIN"; value <- 10 ; group <- "Operation" :};
  };
  
  parameters <-
  {
    OBJ OD "Initial Oxidative Demand" : Concentration := {: value <- 0.01 ; group <- "Model TSS > 5" :};
    OBJ k "Empirical coefficient" : Real := {: value <- 0.005; group <- "Model TSS > 5"; :};
    
    OBJ k1 "Empirical coefficient" : Real := {: value <- 1.851; group <- "Model TSS < 5"; :};
    OBJ h "Empirical coefficient" : Real := {: value <- 6.335; group <- "Model TSS < 5"; :};
    OBJ n "Empirical coefficient" : Real := {: value <- 0.328; group <- "Model TSS < 5"; :};

    #if (defined ASM1Temp || defined ASM1_AN || defined ASMG1)
    OBJ F_TSS_COD "Fraction TSS/COD" : Ratio := {: value <- 0.75 ; group <- "Conversion factors":};
    #endif

    #if (defined ASM2dM)
    OBJ i_TSS_BM "TSS to biomass ratio for X_H, X_PAO, X_AUT" : ConversionFactor := {: value <- 0.9; group <- "Composition parameters"; :};
    OBJ i_TSS_XC_B "TSS to XC_B ratio" : ConversionFactor := {: value <- 0.75; group <- "Composition parameters"; :};
    OBJ i_TSS_X_U "TSS to X_U ratio" : ConversionFactor := {: value <- 0.75; group <- "Composition parameters"; :};
    #endif
  };
  
  state <-
  {
     OBJ D_PAA "Dose of PAA (g/m3.min)" : Real := {: group <- "Operation" :} ;
     OBJ In_TSS (* hidden = "0" *) "Solids concentration" : Concentration := {: group <- "Operation" :} ;
  };
  
  equations <-
  {
    state.In_TSS =
      #if (defined ASM1Temp)
      IF (state.Q_In == 0) THEN 0.0 ELSE (interface.Inflow[X_BH] + interface.Inflow[X_BA] + interface.Inflow[X_S] + interface.Inflow[X_I] + interface.Inflow[X_P]) * parameters.F_TSS_COD / state.Q_In 
      #endif
      #if (defined ASM1_AN)
      IF (state.Q_In == 0) THEN 0.0 ELSE (interface.Inflow[X_H] + interface.Inflow[X_NH] + interface.Inflow[X_NO] + interface.Inflow[X_AN] + interface.Inflow[X_S] + interface.Inflow[X_I]) * parameters.F_TSS_COD / state.Q_In 
      #endif
      #if (defined ASMG1)
      IF (state.Q_In == 0) THEN 0.0 ELSE (interface.Inflow[X_BH] + interface.Inflow[X_BA1] + interface.Inflow[X_BA2] + interface.Inflow[X_S] + interface.Inflow[X_I] + interface.Inflow[X_P]) * parameters.F_TSS_COD / state.Q_In 
      #endif    
      #if (defined ASM2dModTemp || defined ASM3Temp || defined ASM3P_EAWAG || defined ASMG2d || defined IUWS1 || defined IUWS2)
      IF (state.Q_In == 0) THEN 0.0 ELSE interface.Inflow[X_TSS] / state.Q_In 
      #endif
      #if (defined ASM2dM)
      IF (state.Q_In == 0) THEN 0.0
        ELSE (interface.Inflow[X_U] * parameters.i_TSS_X_U + interface.Inflow[XC_B] * parameters.i_TSS_XC_B +
        (interface.Inflow[X_OHO] + interface.Inflow[X_PAO] + interface.Inflow[X_ANO]) * parameters.i_TSS_BM +
        interface.Inflow[X_PAO_PP] * 3.23 + interface.Inflow[X_PAO_Stor] * 0.6 + interface.Inflow[X_MEOH] * 1.0 +
        interface.Inflow[X_MEP] * 1.0 + interface.Inflow[X_U_Ig] * 1.0) / state.Q_In
      #endif
      #if (defined PWM_SA)
      IF (state.Q_In == 0) THEN 0.0 ELSE SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}: interface.Inflow[Comp_Index] / state.Q_In 
      #endif    
      ;

    // TSS < 5: D_PAA = C_PAA * t
    // TSS > 5: D_PAA = (C_PAA - OD) / k * (1- exp(-k * t))
    state.D_PAA = IF (state.In_TSS < 5.0) THEN interface.C_PAA * state.HRT * 60 * 24
      ELSE (interface.C_PAA - parameters.OD) / parameters.k * (1 - exp(- parameters.k * state.HRT * 60 * 24)) ;
    
    // log(N/No) = - (k' * D_PAA^n) * (1 / (1 + exp(h - D_PAA)))
    state.dLog = - parameters.k1 * pow(state.D_PAA, parameters.n) * (1 / (1 + exp(parameters.h - state.D_PAA))) ;
  };

:};


CLASS PAA_01 (* icon = "disinfection_unit" *) "Modified S-Model (Profaizer, 1998)"
EXTENDS LogInactivation WITH
{:

  comments <- "Modified S-Model (Profaizer, 1998)" ;
  
  interface <-
  {
    OBJ C_PAA (* terminal = "out_2"; is_favorite = "1" *) "PAA concentration" : Concentration := {: causality <- "COUT"; group <- "Operation" :};
  };
  
  parameters <-
  {
    OBJ k "Empirical coefficient" : Real := {: value <- 4.0; group <- "Model"; :};
    OBJ h "Empirical coefficient" : Real := {: value <- 4.0; group <- "Model"; :};
    OBJ n "Empirical coefficient" : Real := {: value <- 2.8; group <- "Model"; :};
    OBJ m "Empirical coefficient" : Real := {: value <- 2.8; group <- "Model"; :};
  };
  
  equations <-
  {
    // log(N/No) = - (k * C^n) / (1 + (h / C*t)^m)
    state.dLog = - parameters.k * pow(interface.C_PAA, parameters.n) / (1 + pow(parameters.h / (interface.C_PAA * state.HRT * 60 * 24), parameters.m)) ;
  };

:};


CLASS LogInactivation "Generic log-inactivation model" EXTENDS DisinfectionEfficiency WITH
{:

  comments <- "Generic log-inactivation model" ;
  
  state <-
  {
    OBJ dLog (* hidden="1" *) "log N/No" : Real := {: group <- ".." :};
  };
  
  equations <-
  {
    interface.EColi_Out = IF (state.In_EColi <= 1.0) THEN 1.0 ELSE pow(10, log10(state.In_EColi) + state.dLog) ;                                                 
  };

:};


#endif // WWTP_DISINFECTION_PAA