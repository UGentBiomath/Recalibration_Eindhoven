/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 1. december 2016 22:11:49$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_PRIMARY_CLARIFIER_TAYMODIF
#define WWTP_BASE_PRIMARY_CLARIFIER_TAYMODIF


CLASS Tay (* icon = "primary_clarifier" *) "Modification of the Tay model for primary clarifiers"

// The model of Tay (1982) is based on a relation between the difference in particulate matter 
// between influent and effluent depending on the hydraulic retention time. 
// X_Out = X_i / ( 1 + V / ( Q_In * T_A ) ) ; 
// with T_A : Half removal time (i.e. the necessary retention time to remove half of the incoming 
// particulate matter. Attention should be paid to the calculation of the retention time : 
// it should not be the instantaneous retention time but the averaged retention time. 
//
// Literature : 
// Tay J. (1982), Development of a settling model for primary settling tanks, Wat. Res. 16, 1413 - 1417.  

EXTENDS WWTPAtomicModelWithoutVolume WITH
{:
  comments <- "A model for a primary settler by Tay";

  interface <-
  { 
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Outflow (* terminal = "out_1" *) "Outflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "Underflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : FlowRate := {: causality <- "CIN" ; value <- 10 ; group <- "Operational" :};  
//    OBJ PumpingEnergy (* terminal = "out_3" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
//   OBJ PumpingPower (* terminal = "out_3" *) "Pumping power" : Power := {: causality <- "COUT"; group <- "Energy" :};
    OBJ E_R_XCOD_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for particulate COD at dry weather flows" : Fraction := {: causality <- "CIN" ; value <- 0.50; group <- "Settling" :};
    OBJ E_R_XUIg_DW (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Removal efficiency for inert inorganic particulates at dry weather flows" : Fraction := {: causality <- "CIN" ; value <- 0.90; group <- "Settling" :};
  };
  
  parameters <- 
  { 
    OBJ Delta_t "Time period defining the interval over which the average flow rate is calculated" : Time := {: value <- 0.1 ; group <- "Settling" :};
    OBJ t_Start "Time where the calculation of the average flow rate starts" : Time := {: value <- 0.1 ; group <- "Settling":};
    // note that the volume used here is NOT based on any mass balance: hence, it is declared as a parameter
    OBJ V_Clar (* is_favorite = "1" *) "Volume of the clarifier" : Volume := {: value <- 500 ; group <- "Dimension" :};

    OBJ Q_In_DW "Dry weather flow rate" : FlowRate := {: value <- 20000; group <- "Dimension" :};
    // Calculation of outflow TSS
    OBJ i_TSS_X_U	"TSS to X_U ratio" : ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_XC_B	"TSS to XC_B ratio" : ConversionFactor	:= {: value <- 0.75 ; group <- "Composition parameters" :}; 
    OBJ i_TSS_BM	"TSS to biomass ratio for X_H, X_PAO, X_AUT" : ConversionFactor	:= {: value <- 0.9 ; group <- "Composition parameters" :}; 
    // buffer for averaging retention time
    OBJ T_Average "Averaging time used for the calculation of the average retention time" : Time := {: value <- 0.04167; group <- "Numeric" :};
    OBJ ID_Q (* hidden = "1" *) "ID for a buffer for the calculation of the average retention time" : Time := {: value <- 0.04167; group <- "Numeric" :};
    OBJ Buffer_Fill_Time (* hidden = "1" *) "Time interval for filling up the buffer" : Time := {: value <- 0.000001; group <- "Numeric" :};
    // PUMPING ENERGY
//    OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate" : EnergyForPumping := {: value <- 0.04 ; group <- "Energy":};
  };

  state <-
  {
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Under_Actual (* is_favorite = "1" *) "Underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Help_X_In (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Out (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Under (* hidden = "1" *) "" : MassFlux;

    OBJ Qmean (* hidden = "1" *) "Averaged influent flow rate" : FlowRate;
    OBJ X_In (* is_favorite = "1" *) "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_In_Calc (* hidden = "1" *) "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Out (* is_favorite = "1" *) "Effluent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Under (* is_favorite = "1" *) "Underflow suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ f_Out (* hidden = "1" *) "Fraction of the influent flux going to the overflow" : Fraction ;
    OBJ f_Out_DW (* hidden = "1" *) "Fraction of the influent flux going to the overflow during dry weather" : Fraction;

    OBJ E_Removal "Calculated removal efficiency for each component" : Fraction[NrOfComponents;] := {: group <- "Settling" :};
    OBJ f_ns_XCOD_DW "Non-settlable fraction for particulate COD at dry weather flows" : Fraction := {: group <- "Settling" :};
    OBJ f_ns_XUIg_DW "Non-settlable fraction for inert inorganic particulates at dry weather flows" : Fraction := {: group <- "Settling" :};
    OBJ E_R_COD "Removal efficiency for COD" : Fraction := {: group <- "Settling" :};
    OBJ E_R_XCOD "Removal efficiency for XCOD" : Fraction := {: group <- "Settling" :};
    OBJ E_R_TSS "Removal efficiency for TSS" : Fraction := {: group <- "Settling" :};
    OBJ E_R_TSS2 "Removal efficiency for TSS" : Fraction := {: group <- "Settling" :};
    OBJ T_A_XCOD "Half removal time for X_COD" : Time := {: group <- "Settling" :};
    OBJ T_A_XUIg "Half removal time for inert inorganic particulates" : Time := {: group <- "Settling" :};

    OBJ COD_In (* hidden = "1" *) "Incoming flux of COD" : MassFlux;
    OBJ COD_Out (* hidden = "1" *) "Outgoing flux of COD" : MassFlux;
    OBJ XCOD_In (* hidden = "1" *) "Incoming flux of XCOD" : MassFlux;
    OBJ XCOD_Out (* hidden = "1" *) "Outgoing flux of XCOD" : MassFlux;

    OBJ Buffer_Q (* hidden = "1" *) "buffer for the calculation of the average retention time" : MassFlux;
    // PUMPING ENERGY
//    OBJ Integ_PE (* hidden = "1" *)"Integral Pumping energy" : ElectricalEnergy ;
  };

  initial <-
  {
//    state.Integ_PE = 0.0 ;
    parameters.ID_Q = MSLUBufferCreate(parameters.T_Average,parameters.Buffer_Fill_Time);
  };

  equations <-
  {
    state.f_Out_DW = (parameters.Q_In_DW - interface.Q_Under)/parameters.Q_In_DW ;
    state.f_ns_XCOD_DW = (1.0 - interface.E_R_XCOD_DW) / state.f_Out_DW ;
    state.f_ns_XUIg_DW = (1.0 - interface.E_R_XUIg_DW) / state.f_Out_DW ;
    
    // Soluble components (including water itself) are split into the two
    // streams (effluent and underflow)
    
    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under) THEN 0.0
      ELSE interface.Q_Under; 
    
    state.Q_Out = state.Q_In - state.Q_Under_Actual;

    // buffer for averaging retention time
    state.Buffer_Q = MSLUBufferPut(parameters.ID_Q, independent.t, state.Q_In);
    state.Qmean = MSLUBufferGetMean(parameters.ID_Q);	
	
    state.f_Out = IF (state.Q_In <= 0.0) THEN 0.0
      ELSE (state.Q_In - state.Q_Under_Actual) / state.Q_In ;

    // Calculation of the T_A for XCOD and X_I_i.
    // T_A = V_Clar/Q_In_DW * f_ns/(1-f_ns)
    
    state.T_A_XCOD = (parameters.V_Clar/parameters.Q_In_DW) * (state.f_ns_XCOD_DW/(1-state.f_ns_XCOD_DW));
    state.T_A_XUIg = (parameters.V_Clar/parameters.Q_In_DW) * (state.f_ns_XUIg_DW/(1-state.f_ns_XUIg_DW));
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
      interface.Outflow[Comp_Index] = - state.InFluxPerComponent[Comp_Index] * state.f_Out ;};
    
    {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
      interface.Underflow[Comp_Index] = - (state.InFluxPerComponent[Comp_Index] + interface.Outflow[Comp_Index]) ;};
    
    // X_Out = X_i / (1 + V / (Qmean * T_A)) has to be transformed to an equation using fluxes !!
    // Outflow = Q_Out * X_Out = a flux 
    //         = Q_Out * X_i / (1 + V_Clar / (Qmean * T_A))
    //         = Q_Out * (Inflow / Q_In) / (1 + V_Clar / (Qmean * T_A))
    //         = Inflow * Q_Out / (Q_In * (1 + V_Clar / (Qmean * T_A)))  ==> see equations below
    // Underflow = Inflow - Outflow
    
    // outflow calculated per component
    // first all the COD components + X_PP as this is an internal storage of phosphate in the biomass.	 
    {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. X_ANO}: interface.Outflow[Comp_Index] = 
      IF (state.Q_In == 0 || state.Qmean == 0) THEN 0 
        ELSE - state.InFluxPerComponent[Comp_Index] * state.f_Out / (1 + parameters.V_Clar / (state.Qmean * state.T_A_XCOD)); };

    // then the non-COD components	 
    // At this point X_MEOH and X_MEP get the same removal efficiency as X_I
    // this might be OK for X_MEP but is questionable for X_MEOH but at this point we don't model P dosing before the PST
    {FOREACH Comp_Index IN {X_MEOH .. X_U_Ig}: interface.Outflow[Comp_Index] =
      IF (state.Q_In == 0 || state.Qmean == 0) THEN 0
        ELSE - state.InFluxPerComponent[Comp_Index] * state.f_Out / (1 + parameters.V_Clar / (state.Qmean * state.T_A_XUIg)); };

    {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Underflow[Comp_Index] = - (state.InFluxPerComponent[Comp_Index] + interface.Outflow[Comp_Index]) ; };

    // Calculation of suspended solids concentrations
    // in the effluent and underflow streams
//    #ifdef CalculateTSSComponent
/* (EURE 20/04/2015)
    state.Help_X_In = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}: (interface.Inflow[Comp_Index]));
    state.X_In = IF (state.Q_In == 0) THEN 0
      ELSE state.Help_X_In / state.Q_In * parameters.F_TSS_COD ;
*/
    state.Help_X_In = (interface.Inflow[X_U] * parameters.i_TSS_X_U + interface.Inflow[XC_B] * parameters.i_TSS_XC_B +
      parameters.i_TSS_BM * (interface.Inflow[X_OHO] +  interface.Inflow[X_PAO] + interface.Inflow[X_ANO]) +
      interface.Inflow[X_PAO_PP] * 3.23 + interface.Inflow[X_PAO_Stor] * 0.6 +
      interface.Inflow[X_MEOH] * 1.0 + interface.Inflow[X_MEP] * 1.0 + interface.Inflow[X_U_Ig] * 1.0) ;
    
    state.X_In = IF (state.Q_In == 0) THEN 0
      ELSE state.Help_X_In / state.Q_In ;
    
/* (EURE 20/04/2015)
    state.Help_X_Out = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:(- interface.Outflow[Comp_Index]));
    state.X_Out = IF (state.Q_In <= interface.Q_Under) THEN state.Help_X_Out * parameters.F_TSS_COD / state.Q_In
      ELSE state.Help_X_Out * parameters.F_TSS_COD / (state.Q_In - interface.Q_Under);
*/
    state.Help_X_Out = - (interface.Outflow[X_U] * parameters.i_TSS_X_U + interface.Outflow[XC_B] * parameters.i_TSS_XC_B +
      parameters.i_TSS_BM * (interface.Outflow[X_OHO] +  interface.Outflow[X_PAO] + interface.Outflow[X_ANO]) +
      interface.Outflow[X_PAO_PP] * 3.23 + interface.Outflow[X_PAO_Stor] * 0.6 +
      interface.Outflow[X_MEOH] * 1.0 + interface.Outflow[X_MEP] * 1.0 + interface.Outflow[X_U_Ig] * 1.0) ;

    state.X_Out = IF (state.Q_In <= interface.Q_Under) THEN state.Help_X_Out / state.Q_In
      ELSE state.Help_X_Out / (state.Q_In - interface.Q_Under);

/* (EURE 20/04/2015)
    state.Help_X_Under = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:(- interface.Underflow[Comp_Index]));
    state.X_Under = IF (state.Q_Under_Actual <= 0) THEN 0
      ELSE state.Help_X_Under / state.Q_Under_Actual * parameters.F_TSS_COD ;
*/    
    state.Help_X_Under = - (interface.Underflow[X_U] * parameters.i_TSS_X_U + interface.Underflow[XC_B] * parameters.i_TSS_XC_B +
      parameters.i_TSS_BM * (interface.Underflow[X_OHO] +  interface.Underflow[X_PAO] + interface.Underflow[X_ANO]) +
      interface.Underflow[X_PAO_PP] * 3.23 + interface.Underflow[X_PAO_Stor] * 0.6 +
      interface.Underflow[X_MEOH] * 1.0 + interface.Underflow[X_MEP] * 1.0 + interface.Underflow[X_U_Ig] * 1.0) ;

    state.X_Under = IF (state.Q_Under_Actual <= 0) THEN 0
      ELSE state.Help_X_Under / state.Q_Under_Actual ;
//    #endif // CalculateTSSComponent
/* EURE 20/04/2015 currently restricted to ASM2dM only: so, no need for this
    #ifdef UseTSSComponent
    
    state.X_In =  IF (state.Q_In == 0) THEN 0
      ELSE interface.Inflow[IndexOfTSSComponent] / state.Q_In;
    
    state.X_In_Calc = (interface.Inflow[X_I] * parameters.i_TSS_X_I + interface.Inflow[X_S] * parameters.i_TSS_X_S +
      (interface.Inflow[X_H] + interface.Inflow[X_PAO] + interface.Inflow[X_AUT])* parameters.i_TSS_BM +
      interface.Inflow[X_PP] * 3.23 + interface.Inflow[X_PHA] * 0.6 + interface.Inflow[X_MEOH] * 1.0 +
      interface.Inflow[X_MEP] * 1.0 + interface.Inflow[X_I_i] * 1.0) / state.Q_In;

    state.X_Out = IF (state.Q_In <= interface.Q_Under) THEN - interface.Outflow[IndexOfTSSComponent] / (state.Q_In)
      ELSE - interface.Outflow[IndexOfTSSComponent] / (state.Q_In - interface.Q_Under);
    
    state.X_Under = IF (state.Q_Under_Actual <= 0) THEN 0
      ELSE - interface.Underflow[IndexOfTSSComponent] / state.Q_Under_Actual;
    #endif // UseTSSComponent
*/
    // check for removal efficiencies of TSS and COD
    state.E_R_TSS = (1 - state.X_Out / state.X_In);
    state.E_R_TSS2 = (1 - state.X_Out / state.X_In_Calc);
    
    state.COD_Out = - (interface.Outflow[S_U] + interface.Outflow[S_VFA] + interface.Outflow[S_F] +
      interface.Outflow[X_U] + interface.Outflow[XC_B] + interface.Outflow[X_OHO] + interface.Outflow[X_PAO] + interface.Outflow[X_ANO]) ;

    state.COD_In = interface.Inflow[S_U] + interface.Inflow[S_VFA] + interface.Inflow[S_F] +
      interface.Inflow[X_U] + interface.Inflow[XC_B] + interface.Inflow[X_OHO] + interface.Inflow[X_PAO] + interface.Inflow[X_ANO];
    
    state.E_R_COD = (1 - state.COD_Out / state.COD_In);
    
    state.XCOD_Out = - (interface.Outflow[X_U] + interface.Outflow[XC_B] + interface.Outflow[X_OHO] + interface.Outflow[X_PAO] - interface.Outflow[X_ANO]);

    state.XCOD_In = interface.Inflow[X_U] + interface.Inflow[XC_B] + interface.Inflow[X_OHO] + interface.Inflow[X_PAO] + interface.Inflow[X_ANO];
    
    state.E_R_XCOD = (1 - state.XCOD_Out / state.XCOD_In);

// PUMPING ENERGY
//  interface.PumpingPower = 1E3 * parameters.F_Energy_FlowRate * state.Q_Under_Actual / 24 ;
//    DERIV(state.Integ_PE,[independent.t])=  state.Q_Under_Actual;
//    interface.PumpingEnergy = parameters.F_Energy_FlowRate * state.Integ_PE ;
  }; 

:};


#endif // WWTP_BASE_PRIMARY_CLARIFIER_TAYMODIF
