/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 15. april 2019 16:57:39$
 *
 ******************************************************************************/

#ifndef WWTP_BASIC_BASE_CLARIFIER
#define WWTP_BASIC_BASE_CLARIFIER

#ifdef StandardCategoryModels
CLASS PointSettler "Pointsettler"

// The modelling of a settler by means of a pointsettler is a large 
// simplification of the actual process. The settler is only a phase 
// separator, and has no real volume. Hence, the model does not take into 
// account the retention time in the settler. It is not a dynamical model 
// but only based on mass balances.       
// 
// The effluent particulate concentration is calculated as a fraction of the 
// influent concentration to the settler. The central equation is : X_Out = f_ns * X_i
// To calculate the underflow 
// concentration a mass balance over the settler is solved.           

 EXTENDS WWTPAtomicModelWithoutVolume WITH
 {:
  interface <-
   { 
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Outflow (* terminal = "out_1" *) "Overflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "Underflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : 
    FlowRate := {: causality <- "CIN" ; value <- 10 ; group <- "Operational" :};  
   OBJ PumpingEnergy (* terminal = "out_3" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
   OBJ PumpingPower (* terminal = "out_3" *) "Pumping power" : Power := {: causality <- "COUT"; group <- "Energy" :};
   };

  parameters <- 
   { 
    OBJ F_TSS_COD "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
// PUMPING ENERGY
    OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate" : EnergyForPumping := {: value <- 0.04 ; group <- "Energy":};
   };

  state <-
   {
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Under_Actual (* is_favorite = "1" *) "Underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Help_X_In (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Out (* hidden = "1" *) "" : MassFlux;
    OBJ Help_X_Under (* hidden = "1" *) "" : MassFlux;
    OBJ f_Out (* hidden = "1" *) "Fraction of the influent flux going to the overflow" : Fraction ;
    OBJ f_Under (* hidden = "1" *) "Fraction of the influent flux going to the underflow" : Fraction ;
    OBJ X_In (* is_favorite = "1" *) "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Out (* is_favorite = "1" *) "Effluent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Under (* is_favorite = "1" *) "Underflow suspended solids concentration" : Concentration := {: group <- "Concentration" :};
// PUMPING ENERGY
    OBJ Integ_PE (* hidden = "1" *)"Integral Pumping energy" : ElectricalEnergy ;
    OBJ f_ns_help (* hidden = "1" *) "Non-settleable fraction of suspended solids" : Fraction ;
   };

   initial <-
   {
   state.Integ_PE = 0.0 ;
   };

  equations <-
   {
     // The underflow rate is a parameter, so the effluent flow rate has to
     // be calculated as a state variable
  
     // Soluble components (including water itself) are splitted into the two
     // streams (effluent and underflow) according to the ratio between
     // the flow rates.

    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under)
                 THEN state.Q_In
                 ELSE interface.Q_Under; 

    state.Q_Out = state.Q_In - state.Q_Under_Actual;

    state.f_Out = IF  (state.Q_In <= interface.Q_Under)
              THEN 0
              ELSE (state.Q_In - interface.Q_Under) / state.Q_In ;
    state.f_Under = IF (state.Q_In <= interface.Q_Under)
                THEN 1
              ELSE interface.Q_Under/state.Q_In ;

    {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
      interface.Outflow[Comp_Index] =
      - state.InFluxPerComponent[Comp_Index] * state.f_Out ;};

    interface.Underflow[IndexOfSolvent] = IF  (state.Q_In <= interface.Q_Under)
                   THEN - state.Q_In / parameters.WWTPSpecificVolume[IndexOfSolvent]
                   ELSE - interface.Q_Under / parameters.WWTPSpecificVolume[IndexOfSolvent] ;

    {FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. IndexOfLastSolubleComponent}:
     interface.Underflow[Comp_Index] = 
     - state.InFluxPerComponent[Comp_Index]* state.f_Under ;};

     // Particulate components are splitted according to the non settleable
     // fraction f_ns.
     // X_Out = f_ns * X_i has to be transformed to an equation using fluxes !!
     // Outflow = Q_Out * X_Out = a flux 
     //         = Q_Out * f_ns * X_i
     //         = Q_Out * f_ns * Inflow / Q_In
     //         = Inflow * Q_Out / Q_In * f_ns  ==> see equations below
     // Underflow = Inflow - Outflow

    {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Outflow[Comp_Index] =
      - state.InFluxPerComponent[Comp_Index] * state.f_Out * 
        state.f_ns_help ;};   

    {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Underflow[Comp_Index] = IF (state.Q_In <= interface.Q_Under)
			THEN IF (state.Q_In == 0)
				 THEN 0
				 ELSE - state.InFluxPerComponent[Comp_Index]
			ELSE - (state.InFluxPerComponent[Comp_Index] + interface.Outflow[Comp_Index]);};

#ifdef CalculateTSSComponent
    state.Help_X_In = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
                     (interface.Inflow[Comp_Index]));

    {state.X_In = IF (state.Q_In == 0)
          THEN 0
          ELSE state.Help_X_In / state.Q_In * parameters.F_TSS_COD;
     };

    state.Help_X_Out = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
                     (- interface.Outflow[Comp_Index]));

    {state.X_Out = IF (state.Q_In <= interface.Q_Under)
           THEN 0
           ELSE state.Help_X_Out / (state.Q_In - interface.Q_Under) * parameters.F_TSS_COD;
     };

     state.Help_X_Under = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:(- interface.Underflow[Comp_Index]));

    {state.X_Under = 
        IF (state.Q_In <= interface.Q_Under)
      THEN
          IF (state.Q_In == 0)
          THEN 0
          ELSE
               state.Help_X_Under / state.Q_In * parameters.F_TSS_COD
      ELSE 
          IF (interface.Q_Under == 0)
          THEN 0
          ELSE
               state.Help_X_Under / interface.Q_Under * parameters.F_TSS_COD ;
     };

#endif // CalculateTSSComponent

#ifdef UseTSSComponent
    state.X_In =  IF (state.Q_In == 0)
            THEN 0
          ELSE interface.Inflow[IndexOfTSSComponent] / state.Q_In;

    state.X_Out =  IF (state.Q_In <= interface.Q_Under)
           THEN 0
           ELSE (- interface.Outflow[IndexOfTSSComponent] / (state.Q_In - interface.Q_Under) );

    state.X_Under = IF (state.Q_In <= interface.Q_Under) 
              THEN
                IF (state.Q_In == 0)
                  THEN 0
                ELSE - interface.Underflow[IndexOfTSSComponent] / (state.Q_In)
            ELSE 
                IF (interface.Q_Under == 0)
                  THEN 0
                ELSE - interface.Underflow[IndexOfTSSComponent] / (interface.Q_Under);
#endif // UseTSSComponent

// PUMPING ENERGY
  interface.PumpingPower = 1E3 * parameters.F_Energy_FlowRate * state.Q_Under_Actual / 24 ;
  DERIV(state.Integ_PE,[independent.t])=  state.Q_Under_Actual;
  interface.PumpingEnergy = parameters.F_Energy_FlowRate * state.Integ_PE ;

   };
 :};


CLASS SettlingTank_TakacsSVI "Base class for a non-reactive Takacs model with SVI correlation"
EXTENDS SettlingTank_Takacs_NonReactive WITH
{:

  interface <-
  {
    OBJ SVI (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Sludge Volume Index in mL/g" : Real := {: causality <- "CIN" ; value <- 100 ; group <- "Settling" :};
  };

  state <-
  {
    OBJ r_H "Settling parameter (hindered settling)" : SpecificVolume := {: group <- "Settling" :}; 
  };

  equations <-
  {
    state.Help_r_H = (0.148 + 0.00210 * interface.SVI) / 1000 ;
    state.r_H = state.Help_r_H ;
  };

:};


CLASS SettlingTank_TakacsNonSVI "Base class for a non-reactive Takacs model with constant r_H"
EXTENDS SettlingTank_Takacs_NonReactive WITH
{:

  parameters <-
  {
    OBJ r_H "Settling parameter (hindered settling)" : SpecificVolume := {: value <- 0.00019 ; group <- "Settling" :}; 
    #ifdef CalculateTSSComponent
    OBJ F_TSS_COD "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
    #endif
  };

  initial <-
  {
    state.Help_r_H = parameters.r_H ;
    
    #ifdef CalculateTSSComponent
    parameters.Help_F_TSS_COD := parameters.F_TSS_COD  ;
    #endif
  };

:};


CLASS SettlingTank_Takacs_NonReactive "Base class for a non-reactive Takacs model"
EXTENDS SettlingTank_Takacs WITH
{:
  
  equations <-
  {
    DERIV(state.X_Layer[1],[independent.t]) =
      (1 / state.H_Layer) * (state.J_Up[2] - state.J_G[1]) - (state.Q_Out / state.V_Layer) * state.X_Layer[1] ;

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
      DERIV(state.X_Layer[Layer_Index],[independent.t]) = IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) * (- state.J_Up[Layer_Index] - state.J_Dn[Layer_Index] + state.J_G[Layer_Index-1] - state.J_G[Layer_Index]) +
          (1 / state.V_Layer) * state.SolidFlux_In
        ELSE (1 / state.H_Layer) * (state.J_Up[Layer_Index+1] - state.J_Up[Layer_Index] + state.J_Dn[Layer_Index-1] - state.J_Dn[Layer_Index] +
          state.J_G[Layer_Index-1] - state.J_G[Layer_Index]) ; };

    DERIV(state.X_Layer[NrOfLayers],[independent.t]) =
      (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne]) - (interface.Q_Under / state.V_Layer) * state.X_Layer[NrOfLayers];

    { FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
      interface.Overflow[Comp_Index] = IF (state.Q_In <= 0) THEN 0.0
        ELSE - state.InFluxPerComponent[Comp_Index] * (state.Q_Out / state.Q_In) ; };

    { FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Overflow[Comp_Index] = IF (state.SolidFlux_In <= 0) THEN 0.0
        ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Out ; };

    { FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. IndexOfLastSolubleComponent}:
      interface.Underflow[Comp_Index] = - state.InFluxPerComponent[Comp_Index] - interface.Overflow[Comp_Index] ; };

    { FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Underflow[Comp_Index] = IF (state.Q_In <= 0) THEN 0.0
        ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Under ; };
  };

:};


CLASS SettlingTank_Takacs "Base class for a Takacs model"
EXTENDS SettlingTank_Base WITH
{:

  interface <-
  { 
    OBJ Sludge_Blanket_Height (* terminal = "out_3"; is_favorite = "1"*) "Height of the sludge blanket" : Length := {: causality <- "COUT" ; group <- "Measurement data":};
  };

  parameters <- 
  {
    OBJ A (* is_favorite = "1" *) "Surface area of the clarifier" : Area := {: value <- 1500 ; group <- "Dimension" :};
    OBJ H (* is_favorite = "1" *) "Height of the clarifier" : Length := {: value <- 4 ; group <- "Dimension" :};
    OBJ v0 "Maximum theoretical settling velocity" : Velocity := {: value <- 474 ; group <- "Settling" :};
    OBJ v00 "Maximum practical settling velocity" : Velocity := {: value <- 250 ; group <- "Settling" :}; 
    OBJ r_P "Settling parameter (low concentration)" : SpecificVolume := {: value <- 0.00286 ; group <- "Settling" :};
    OBJ X_Lim "Minimal concentration in sludge blanket" : Concentration := {: value <- 900 ; group <- "Settling" :};
    OBJ X_T "Threshold suspended solids concentration" : Concentration := {: value <- 3000 ; group <- "Settling" :};
  };

  state <-
  {
    // I = 0.0024   II = 0.00228
    OBJ Help_f_ns (* hidden = "1" *) "Non-settleable fraction of suspended solids" : Fraction := {: group <- "Settling" :};
    OBJ V_Layer (* hidden = "1" *) "Volume of each layer" : Volume ;  
    OBJ H_Layer (* hidden = "1" *) "Height of each layer" : Length ;
    OBJ v_Up (* hidden = "1" *) "Upward bulk velocity" : Velocity ; 
    OBJ v_Dn (* hidden = "1" *) "Downward bulk velocity" : Velocity ;
    OBJ v0_P (* hidden = "1" *) "Correction term for non-settleables" : Velocity ;
    OBJ v0_H (* hidden = "1" *) "Correction term for non-settleables" : Velocity ; 
    OBJ Help_r_H (* hidden = "1" *) "Settling parameter (hindered settling)" : SpecificVolume ; 
    OBJ v_S (* hidden = "1" *) "Static settling velocity" : LayerVelocityVector; // formerly: TakacsVelocityVector
    OBJ v_S_Help (* hidden = "1" *) "Static settling velocity help variable": LayerVelocityVector; // formerly: TakacsVelocityVector
    OBJ IndexOfSludgeBlanket (* hidden = "1" *) "Index of top layer of sludge blanket" : Integer ;
    OBJ J_G_Help (* hidden = "1" *) "Static sludge flux": LayerArealFluxVector;
    OBJ J_Up (* hidden = "1" *) "Upward sludge flux" : LayerArealFluxVector;
    OBJ J_Dn (* hidden = "1" *) "Downward sludge flux" : LayerArealFluxVector;
    OBJ J_G (* hidden = "1" *) "Static sludge flux" : LayerArealFluxVector;
    // preferable: SolidConcentration -> C_TSS
    OBJ SolidConcentration (* hidden = "1" *) "Sum of concentrations of particulates" : Concentration ;
    //
    OBJ X_Min "Non-settleable sludge concentration" : Concentration := {: group <- "Settling" :}; 
    OBJ X_Layer "Vector containing concentration of particulates for all the layers" : LayerConcentrationVector := {: group <- "Concentration : Solids" :}; // formerly: TakacsConcentrationVector
    OBJ H_S "Height of sludge blanket" : Length := {: group <- "Settling" :}; 
  };

  initial <-
  {
    // Calculation of the volume and the height of a single layer
    state.V_Layer = parameters.A * (parameters.H / NrOfLayers) ; 
    state.H_Layer = parameters.H / NrOfLayers ;
  };
  
  equations <-
  {
    state.v_Up = state.Q_Out / parameters.A; 
    state.v_Dn = state.Q_Under_Actual / parameters.A; 
    state.v0_P = parameters.v0 * exp(parameters.r_P * state.X_Min);
    state.v0_H = parameters.v0 * exp(state.Help_r_H * state.X_Min); 

    state.SolidConcentration =
      (SUMOVER Layer_Index IN {1 .. NrOfLayers}: state.X_Layer[Layer_Index]) / NrOfLayers ;

    state.X_Min = IF (state.Q_In <= 0) THEN state.Help_f_ns * state.SolidConcentration
      ELSE state.Help_f_ns * state.SolidFlux_In / state.Q_In ;

    state.X_Out = IF (state.Q_Out <= 0) THEN 0.0
      ELSE state.X_Layer[1];
    
    state.X_Under = IF (state.Q_Under_Actual <= 0) THEN 0.0
      ELSE state.X_Layer[NrOfLayers];
    
    // Settling velocities in each layer
    { FOREACH Layer_Index IN {1 .. NrOfLayers}: state.v_S_Help[Layer_Index] =
      IF (state.X_Layer[Layer_Index] < state.X_Min) THEN 0.0 
        ELSE (state.v0_H * exp(- state.Help_r_H * state.X_Layer[Layer_Index]) - state.v0_P * exp(- parameters.r_P * state.X_Layer[Layer_Index])) ; };
    
    { FOREACH Layer_Index IN {1 .. NrOfLayers}: state.v_S[Layer_Index] =
      IF (state.v_S_Help[Layer_Index] > parameters.v00) THEN parameters.v00
        ELSE state.v_S_Help[Layer_Index] ; };

    // Fluxes
    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
      state.J_G_Help[Layer_Index] = state.v_S[Layer_Index] * state.X_Layer[Layer_Index] ; };
    
    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
      state.J_Up[Layer_Index] = state.v_Up * state.X_Layer[Layer_Index] ; };
    
    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
      state.J_Dn[Layer_Index] = state.v_Dn * state.X_Layer[Layer_Index] ; };
    
    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
      state.J_G[Layer_Index-1] = IF (state.X_Layer[Layer_Index] < parameters.X_T) THEN state.J_G_Help[Layer_Index-1]
        ELSE IF (state.J_G_Help[Layer_Index-1] > state.J_G_Help[Layer_Index]) THEN state.J_G_Help[Layer_Index]
          ELSE state.J_G_Help[Layer_Index-1] ; };
    
    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
      state.J_G[Layer_Index] = IF (state.J_G_Help[Layer_Index] > state.J_G_Help[Layer_Index+1]) THEN state.J_G_Help[Layer_Index+1]
        ELSE state.J_G_Help[Layer_Index] ; };

    // Calculation of the height of the sludge blanket
    state.IndexOfSludgeBlanket = MSLUFindThreshold(ref(state.X_Layer[1]), NrOfLayers, parameters.X_Lim) +
      0 * (SUMOVER Comp_Index IN {1 .. NrOfLayers}: state.X_Layer[Comp_Index]) ;

    state.H_S = (NrOfLayers - state.IndexOfSludgeBlanket + 1) * state.H_Layer ;

    interface.Sludge_Blanket_Height = state.H_S;
  };

:};


CLASS SettlingTank_Base "Base class for a 1ary and 2ary settling tanks"
EXTENDS WWTPAtomicModelWithoutVolume WITH
{:

  interface <-
  { 
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Overflow (* terminal = "out_1" *) "Overflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "underflow" : OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    // manip vars
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : FlowRate := {: causality <- "CIN" ; value <- 200 ; group <- "Operational" :}; 
  };

  parameters <- 
  {
    #ifdef CalculateTSSComponent
    OBJ Help_F_TSS_COD (* hidden = "1" *) "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
    #endif
  };

  state <-
  {
    OBJ Q_Out "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Under_Actual "Underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ X_In (* is_favorite = "1" *) "Influent suspended solids concentration" : Concentration := {: group <- "Concentration : Solids" :};
    OBJ X_Out (* is_favorite = "1" *) "Effluent suspended solids concentration" : Concentration := {: group <- "Concentration : Solids" :};
    OBJ X_Under (* is_favorite = "1" *) "Underflow suspended solids concentration" : Concentration := {: group <- "Concentration : Solids" :};
    OBJ SolidFlux_In (* hidden = "1" *) "Sum of massfluxes of particulates" : MassFlux ;
    OBJ SolidFlux_Out (* hidden = "1" *) "Fraction of influx that goes to the effluent" : MassFlux ;
    OBJ SolidFlux_Under (* hidden = "1" *) "Fraction of influx that goes to the underflow" : MassFlux ;
    // PUMPING ENERGY
    OBJ Integ_PE (* hidden = "1" *) "Integral Pumping energy" : ElectricalEnergy ;
  };

  initial <-
  {
    state.Integ_PE = 0.0 ;
  };

  equations <-
  {
    // FLOW RATES    
    state.Q_Out = state.Q_In - state.Q_Under_Actual ;
    
    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under)
      THEN state.Q_In ELSE interface.Q_Under ;

    interface.Underflow[IndexOfSolvent] = - state.Q_Under_Actual / parameters.WWTPSpecificVolume[IndexOfSolvent] ;

    // SOLID INFLUX
    #ifdef CalculateTSSComponent
    { state.SolidFlux_In =
      SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
      state.InFluxPerComponent[Comp_Index] * parameters.Help_F_TSS_COD ; };
    #endif // CalculateTSSComponent

    #ifdef UseTSSComponent
    state.SolidFlux_In =  state.InFluxPerComponent[IndexOfTSSComponent] ;
    #endif // UseTSSComponent

    // TSS concentration
    state.X_In = IF (state.Q_In <= 0) THEN 0.0
      ELSE state.SolidFlux_In / state.Q_In ;
      
    // X_Out, X_Under implemented in class above
    
    state.SolidFlux_Out = state.X_Out * state.Q_Out ;
    state.SolidFlux_Under = state.X_Under * state.Q_Under_Actual ;
  };

:};

#endif // StandardCategoryModels

#endif // WWTP_BASIC_BASE_CLARIFIER