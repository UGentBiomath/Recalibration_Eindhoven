/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 15. september 2017 13:12:36$
 *
 ******************************************************************************/


state.K_X_Temp = parameters.K_X * pow(parameters.theta_K_X, state.Temp_Actual - parameters.Temp_Ref);
state.S_O_Saturation = 14.65 - 0.41 * state.Temp_Actual + 0.00799 * state.Temp_Actual * state.Temp_Actual - 7.78e-005 * state.Temp_Actual * state.Temp_Actual * state.Temp_Actual;
state.X_TSS = (state.C[X_BH] + state.C[X_BA] + state.C[X_I] + state.C[X_S] + state.C[X_P]) * parameters.F_TSS_COD;
state.b_A_Temp = parameters.b_A * pow(parameters.theta_b_A, state.Temp_Actual - parameters.Temp_Ref);
state.b_H_Temp = parameters.b_H * pow(parameters.theta_b_H, state.Temp_Actual - parameters.Temp_Ref);
state.k_a_Temp = parameters.k_a * pow(parameters.theta_k_a, state.Temp_Actual - parameters.Temp_Ref);
state.k_h_Temp = parameters.k_h * pow(parameters.theta_k_h, state.Temp_Actual - parameters.Temp_Ref);
state.mu_A_Temp = parameters.mu_A * pow(parameters.theta_mu_A, state.Temp_Actual - parameters.Temp_Ref);
state.mu_H_Temp = parameters.mu_H * pow(parameters.theta_mu_H, state.Temp_Actual - parameters.Temp_Ref);

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[AerGrowthHetero][Layer_Index] =
  state.mu_H_Temp * (state.C[S_S][Layer_Index] / (parameters.K_S + state.C[S_S][Layer_Index])) * (state.C[S_O][Layer_Index] / (parameters.K_OH + state.C[S_O][Layer_Index])) * (state.C[S_NH][Layer_Index] / (parameters.K_NH_H + state.C[S_NH][Layer_Index])) * state.C[X_BH][Layer_Index] ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[AnGrowthHetero][Layer_Index] =
  state.mu_H_Temp * (state.C[S_S][Layer_Index] / (parameters.K_S + state.C[S_S][Layer_Index])) * (parameters.K_OH / (parameters.K_OH + state.C[S_O][Layer_Index])) * (state.C[S_NO][Layer_Index] / (parameters.K_NO + state.C[S_NO][Layer_Index])) * (state.C[S_NH][Layer_Index] / (parameters.K_NH_H + state.C[S_NH][Layer_Index])) * parameters.n_g * state.C[X_BH][Layer_Index] ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[AerGrowthAuto][Layer_Index] =
  state.mu_A_Temp * (state.C[S_NH][Layer_Index] / (parameters.K_NH + state.C[S_NH][Layer_Index])) * (state.C[S_O][Layer_Index] / (parameters.K_OA + state.C[S_O][Layer_Index])) * state.C[X_BA][Layer_Index] ; };
  
{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[DecayOfHetero][Layer_Index] =
  state.b_H_Temp * state.C[X_BH][Layer_Index] ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[DecayOfAuto][Layer_Index] =
  state.b_A_Temp * state.C[X_BA][Layer_Index] ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[AmmonOfSolOrgN][Layer_Index] =
  state.k_a_Temp * state.C[S_ND][Layer_Index] * state.C[X_BH][Layer_Index] ; };
  
{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[HydrolOfEntrOrg][Layer_Index] =
  state.k_h_Temp * (state.C[X_S][Layer_Index] / state.C[X_BH][Layer_Index]) / (state.K_X_Temp + (state.C[X_S][Layer_Index] / state.C[X_BH][Layer_Index])) * ((state.C[S_O][Layer_Index] / (parameters.K_OH + state.C[S_O][Layer_Index])) + parameters.n_h * (parameters.K_OH / (parameters.K_OH + state.C[S_O][Layer_Index])) * (state.C[S_NO][Layer_Index] / (parameters.K_NO + state.C[S_NO][Layer_Index]))) * state.C[X_BH][Layer_Index] ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[HydrolOfEntrOrgN][Layer_Index] =
  (state.k_h_Temp * (state.C[X_S][Layer_Index] / state.C[X_BH][Layer_Index]) / (state.K_X_Temp + (state.C[X_S][Layer_Index] / state.C[X_BH][Layer_Index])) * ((state.C[S_O][Layer_Index] / (parameters.K_OH + state.C[S_O][Layer_Index])) + parameters.n_h * (parameters.K_OH / (parameters.K_OH + state.C[S_O][Layer_Index])) * (state.C[S_NO][Layer_Index] / (parameters.K_NO + state.C[S_NO][Layer_Index]))) * state.C[X_BH][Layer_Index]) * (state.C[X_ND][Layer_Index] / state.C[X_S][Layer_Index]) ; };

{FOREACH Layer_Index IN {1 .. NrOfLayers}: state.Kinetics[Aeration][Layer_Index] =
  state.Kla_Actual[Layer_Index] * (state.S_O_Saturation - state.C[S_O][Layer_Index]) ; };
