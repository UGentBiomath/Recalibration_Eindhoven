// AUTOMATICALLY GENERATED - DO NOT MODIFY

  interface <-
  {
    #include "ASM1Temp/wwtp.VolumeASM1TempModel.interface.msl"
  };

  parameters <-
  {
    #include "ASM1Temp/wwtp.VolumeASM1TempConversionModel.parameters.msl"
  };

  state <-
  {
    #include "ASM1Temp/wwtp.VolumeASM1TempConversionModel.state.msl"
  };

  initial <-
  {
    // Params


    // StateVars


    // Extra


    // Stoichiometry

    #include "ASM1Temp/wwtp.VolumeASM1TempConversionModel.stoichiometry.msl"
  };

  equations <-
  {
    // StateVars

    state.K_X_Temp = parameters.K_X * pow(parameters.theta_K_X, state.Temp_Actual - parameters.Temp_Ref);
    state.X_TSS = (state.C[X_BH] + state.C[X_BA] + state.C[X_I] + state.C[X_S] + state.C[X_P]) * parameters.F_TSS_COD;
    state.b_A_Temp = parameters.b_A * pow(parameters.theta_b_A, state.Temp_Actual - parameters.Temp_Ref);
    state.b_H_Temp = parameters.b_H * pow(parameters.theta_b_H, state.Temp_Actual - parameters.Temp_Ref);
    state.k_a_Temp = parameters.k_a * pow(parameters.theta_k_a, state.Temp_Actual - parameters.Temp_Ref);
    state.k_h_Temp = parameters.k_h * pow(parameters.theta_k_h, state.Temp_Actual - parameters.Temp_Ref);
    state.mu_A_Temp = parameters.mu_A * pow(parameters.theta_mu_A, state.Temp_Actual - parameters.Temp_Ref);
    state.mu_H_Temp = parameters.mu_H * pow(parameters.theta_mu_H, state.Temp_Actual - parameters.Temp_Ref);

    // Extra

      // TT 3768 Obsolete
      // state.S_O_Saturation = 14.65 - 0.41 * state.Temp_Actual + 0.00799 * state.Temp_Actual * state.Temp_Actual - 7.78e-005 * state.Temp_Actual * state.Temp_Actual * state.Temp_Actual ;
      state.S_O_Saturation = 290326 * exp(- 66.7354 + 87.4755 / ((state.Temp_Actual + 273.15) / 100.0) + 24.4526 * log((state.Temp_Actual + 273.15) / 100.0)) ;

    // Kinetics

    #include "ASM1Temp/wwtp.VolumeASM1TempConversionModel.kinetics.msl"

    // InterfaceVars

    #include "ASM1Temp/wwtp.VolumeASM1TempModel.sensors.msl"
  };

